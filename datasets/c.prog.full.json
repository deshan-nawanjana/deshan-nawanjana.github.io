[{"file":"1_first_program.c","code":"void main() {\r\n\t\r\n}","name":"First Program"},{"file":"2_variables.c","code":"void main() {\r\n\t// variable deceleration width 'garbage values'\r\n\tint x;   // integer\r\n\tchar c;  // character\r\n\tfloat y; // floating point\r\n\r\n\t// assigning values to variables\r\n\tx = 12;\r\n\tc = 'K';\r\n\ty = 4.5; // becomes 4.500000\r\n\r\n\t// variable deceleration and value assigning same time\r\n\tint a = 20;\r\n\tchar d = 'f';\r\n\r\n\t// constant variable deceleration\r\n\tconst int z = 10;\r\n\t// z = 20 is wrong! z is read only\r\n}","name":"Variables"},{"file":"3_include.c","code":"#include <stdio.h>  // for standard input and output\r\n#include <math.h>   // for mathematical operations\r\n#include <time.h>   // for deal with time calculations\r\n#include <string.h>   // for deal with strings [charactor arrays]\r\n\r\nvoid main() {\r\n\t/*\r\n\t\tprintf();\r\n\t\tscanf();\r\n\t\t\r\n\t\tfopen();\r\n\t\tfprintf();\r\n\t\tfscanf();\r\n\t\tfclose();\r\n\r\n\t\tstrlen();\r\n\t\tstrcmp();\r\n\t\tstrcat();\r\n\r\n\t*/\r\n}","name":"Include"},{"file":"4_printf_1_begin.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tprintf(\"Hello World!\");\r\n}","name":"Printf Begin"},{"file":"4_printf_2_escape_charactor.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\t\\n = New Line\r\n\t\\t = Tab Space\r\n\t\\' = Single Quote\r\n\t\\\" = Double Quote\r\n\t\\\\ = Backslash\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tprintf(\"Text 1\\nText 2\\n\");\r\n\tprintf(\"Text 1\\tText 2\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\'Single Quotes\\'\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\\"Double Quotes\\\"\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\\\ is a Backslash\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\\\\\\\ are two Backslashes\");\r\n}","name":"Printf Escape Charactor"},{"file":"4_printf_3_variables.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\t%d = integers\r\n\t%f = floats\r\n\t%c = charactors\r\n\t%s = strings\r\n\t%p = pointers\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\tprintf(\"value of x is %d\\n\", x);\r\n\r\n\tfloat y = 25.2;\r\n\tprintf(\"value of y is %f\\n\", y);\r\n\r\n\tchar z = 'w';\r\n\tprintf(\"value of z is %c\\n\", z);\r\n\r\n\tprintf(\"x = %d, y = %f, z = %c\\n\", x, y, z);\r\n}","name":"Printf Variables"},{"file":"4_printf_4_values.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\t%d = integers\r\n\t%f = floats\r\n\t%c = characters\r\n\t%s = strings\r\n\t%p = pointers\r\n*/\r\n\r\nvoid main() {\r\n\tprintf(\"My name is %s.\\n\", \"Kamal\");\r\n\tprintf(\"I am %d years old.\\n\", 22);\r\n\tprintf(\"My average is %f%\\n\", 83.4);\r\n\tprintf(\"My blood group is %c Positive\\n\", 'O');\r\n}","name":"Printf Values"},{"file":"4_printf_5_align_and_spacing_1.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\t%{align_size}.{float_sort / part_length}d\r\n*/\r\n\r\nvoid main() {\r\n\tfloat a = 65.797;  //  65.700000\r\n\tfloat b = 723.633; // 723.630000\r\n\tfloat c = 12.5224; //  12.522000\r\n\tfloat d = 8.4567;  //   8.450000\r\n\r\n\t// common represent\r\n\tprintf(\"%f\\n%f\\n%f\\n%f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// aligned to right with 12 blocks\r\n\tprintf(\"%12f\\n%12f\\n%12f\\n%12f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// aligned to left with 12 blocks\r\n\tprintf(\"%-12f\\n%-12f\\n%-12f\\n%-12f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// sorting to 2 floating points\r\n\tprintf(\"%.2f\\n%.2f\\n%.2f\\n%.2f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// aligned to right with 12 blocks and sorting to 2 floating points\r\n\tprintf(\"%12.2f\\n%12.2f\\n%12.2f\\n%12.2f\\n\", a, b, c, d);\r\n}","name":"Printf Align And Spacing"},{"file":"4_printf_5_align_and_spacing_2.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tprintf(\"%-15s %8s %8s\\n\", \"Name\", \"Age\", \"AVG\");\r\n\r\n\tprintf(\"%-15s %8d %8.2f\\n\", \"Kamal\", 22, 65.2);\r\n\tprintf(\"%-15s %8d %8.2f\\n\", \"Sunimal\", 23, 82.13);\r\n\tprintf(\"%-15s %8d %8.2f\\n\", \"Kodithuwakku\", 20, 4.53);\r\n}","name":"Printf Align And Spacing"},{"file":"5_scanf_1_begin.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x;\r\n\r\n\tprintf(\"garbage value of x      = %d\\n\", x); // display value of x [garbage value]\r\n\r\n\tprintf(\"enter a new value  to x : \");\r\n\tscanf(\"%d\", &x); // &x = memory block address of variable x\r\n\r\n\tprintf(\"new value of x          = %d\\n\", x); // display the new value of x\r\n}","name":"Scanf Begin"},{"file":"5_scanf_2_multiple_inputs.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x, y, z;\r\n\r\n\tprintf(\"Enter value for x : \");\r\n\tscanf(\"%d\", &x);\r\n\tprintf(\"Enter value for y : \");\r\n\tscanf(\"%d\", &y);\r\n\tprintf(\"Enter value for z : \");\r\n\tscanf(\"%d\", &z);\r\n\r\n\tfloat a, b, c;\r\n\r\n\tprintf(\"Enter float values for a, b, c : \");\r\n\tscanf(\"%f %f %f\", &a, &b, &c);\r\n\r\n\tint k;\r\n\tchar l;\r\n\tfloat m;\r\n\r\n\tprintf(\"Enter values for k, l, m : \");\r\n\tscanf(\"%d %c %f\", &k, &l, &m);\r\n\r\n}","name":"Scanf Multiple Inputs"},{"file":"6_operators_1.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 25; // value assigning\r\n\tint y = 10;\r\n\tint z;\r\n\r\n\tz = x + y; // addition\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tz = x - y; // substraction\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tz = x * y; // multipication\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tz = x / y; // division [no floats]\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tfloat w;\r\n\tw = x / y; // division [no floats -> int/int]\r\n\tprintf(\"z = %f\\n\", w);\r\n\r\n\tw = x / (float)y; // division [float -> int/float, float/int, float/float]\r\n\tprintf(\"z = %f\\n\", w);\r\n\r\n\tz = x % y; // remain\r\n\tprintf(\"z = %d\\n\", z);\r\n}","name":"Operators"},{"file":"6_operators_2.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx = x + 1;\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx += 1; // x = x + 1\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx++; // x += 1\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx--; // x -= 1\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx -= 2; // x = x - 2\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx *= 5; // x = x * 5\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx /= 10; // x = x / 10\r\n\tprintf(\"x = %d\\n\", x);\r\n}","name":"Operators"},{"file":"6_operators_3.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\t++x;\toperator runs before the line execution\r\n\tx++;\toperator runs after the line execution\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\tint y = 3;\r\n\r\n\tprintf(\"X = %d, y = %d\\n\", x, y);\r\n\r\n\t// before x = 10, y = 3\r\n\tprintf(\"line 1 = %d\\n\", (x++ * y)); // while x = 10, y = 3\r\n\t// after x = 11, y = 3\r\n\r\n\tprintf(\"X = %d, y = %d\\n\", x, y);\r\n\r\n\t// before x = 11, y = 3\r\n\tprintf(\"line 1 = %d\\n\", (++x * y)); // while x = 12, y = 3\r\n\t// after x = 12, y = 3\r\n\r\n\tprintf(\"X = %d, y = %d\\n\", x, y);\r\n}","name":"Operators"},{"file":"6_operators_4.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\t>\t\tgrater than\r\n\t<\t\tless than\r\n\t==\t\tequal\r\n\t>=\t\tgrater than or equal\r\n\t<=\t\tless than or equal\r\n\r\n\t1 = true\r\n\t0 = false\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\tint y = 5;\r\n\tint z = 10;\r\n\r\n\tprintf(\"x > y is %d\\n\", x > y);\r\n\tprintf(\"x < y is %d\\n\", x < y);\r\n\tprintf(\"x == y is %d\\n\", x == y);\r\n\tprintf(\"x == z is %d\\n\", x == z);\r\n\tprintf(\"x >= y is %d\\n\", x >= y);\r\n\tprintf(\"x <= y is %d\\n\", x <= y);\r\n}","name":"Operators"},{"file":"7_if_else.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 5;\r\n\tint y = 10;\r\n\r\n\tif(x==5) {\r\n\t\tprintf(\"x is equal to 5\\n\");\r\n\t}\r\n\r\n\tif(x>y) {\r\n\t\tprintf(\"x is larger than y\\n\");\r\n\t}\r\n\telse {\r\n\t\tprintf(\"x is not larger than y\\n\");\r\n\t}\r\n\r\n\tif(x>y) {\r\n\t\tprintf(\"x is larger than y\\n\");\r\n\t}\r\n\telse if(x<y) {\r\n\t\tprintf(\"x is less than y\\n\");\r\n\t}\r\n\telse {\r\n\t\tprintf(\"x is equal to y\\n\");\r\n\t}\r\n}","name":"If Else"},{"file":"8_cases_1.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar x = 'C';\r\n\r\n\tswitch(x) {\r\n\t\tcase 'A':\r\n\t\t\tprintf(\"Your Grade is A\\n\");\r\n\t\t\tbreak;\r\n\t\tcase 'B':\r\n\t\t\tprintf(\"Your Grade is B\\n\");\r\n\t\t\tbreak;\r\n\t\tcase 'C':\r\n\t\t\tprintf(\"Your Grade is C\\n\");\r\n\t\t\tbreak;\r\n\t\tcase 'D':\r\n\t\t\tprintf(\"Your Grade is D\\n\");\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tprintf(\"Your Grade is Low\\n\");\r\n\t\t\tbreak;\r\n\t}\r\n}","name":"Cases"},{"file":"8_cases_2.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar x = 'A';\r\n\r\n\tswitch(x) {\r\n\t\tcase 'A':\r\n\t\t\tprintf(\"Your Grade is A\\n\");\r\n\t\tcase 'B':\r\n\t\t\tprintf(\"Your Grade is B\\n\");\r\n\t\tcase 'C':\r\n\t\t\tprintf(\"Your Grade is C\\n\");\r\n\t\tcase 'D':\r\n\t\t\tprintf(\"Your Grade is D\\n\");\r\n\t\tdefault:\r\n\t\t\tprintf(\"Your Grade is Low\\n\");\r\n\t}\r\n}","name":"Cases"},{"file":"9_loop_1_while.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\twhile(condition) {\r\n\t\tlooping statements;\r\n\t}\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint i = 0;\r\n\twhile(i < 10) {\r\n\t\tprintf(\"i = %d\\n\", i);\r\n\t\ti++;\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// 1 = true\r\n\t// 0 = false\r\n\tint x = 1;\r\n\tint n = 5;\r\n\twhile(x) {\r\n\t\tprintf(\"n = %d\\n\", n);\r\n\t\tn += 10;\r\n\t\tif(n>80) {x = 0;}\r\n\t}\r\n}","name":"Loop While"},{"file":"9_loop_2_do_while.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\tdo {\r\n\t\tlooping statements;\r\n\t} while(condition);\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint i = 0;\r\n\tdo {\r\n\t\tprintf(\"i = %d\\n\", i);\r\n\t\ti++;\r\n\t} while(i < 10);\r\n}","name":"Loop Do While"},{"file":"9_loop_3_for.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\tfor([start];[condition];[increasement]) {\r\n\t\tlooping statements;\r\n\t}\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint i; // pre-declared variable\r\n\tfor(i = 0; i < 10; i++) {\r\n\t\tprintf(\"i = %d\\n\", i);\r\n\t}\r\n\r\n\tprintf(\"Value of i after the loop = %d\\n\", i);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// variable declaration for only the loop\r\n\tfor(int r = 0; r < 10; r++) {\r\n\t\tprintf(\"r = %d\\n\", r);\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// for-loop with charactors\r\n\tfor(char c = 'A'; c < 'K'; c++) {\r\n\t\tprintf(\"c = %c\\n\", c);\r\n\t}\r\n}","name":"Loop For"},{"file":"10_arrays_1_display_in_for_loop.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint g[10] = {45, 13, 12, 24, 63, 53, 54, 73, 36, 73};\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tprintf(\"g[%d] = %d\\n\", i, g[i]);\r\n\t}\r\n}","name":"Arrays Display In For Loop"},{"file":"10_arrays_1_begin.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint l[10]; // array declaration with gabage values\r\n\tint g[5] = {45, 13, -12, 24, 63}; // array declaration with assiging values at same time\r\n\r\n\tprintf(\"l[%d] = %d\\n\", 0, l[0]); // printing the first item of array\r\n\tprintf(\"l[%d] = %d\\n\", 1, l[1]);\r\n\tprintf(\"l[%d] = %d\\n\", 2, l[2]);\r\n\tprintf(\"l[%d] = %d\\n\", 3, l[3]);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tl[0] = 10; // assigning value to an item of the array\r\n\tprintf(\"l[%d] = %d\\n\", 0, l[0]); // printing the first item of array\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"g[%d] = %d\\n\", 0, g[0]);\r\n\tprintf(\"g[%d] = %d\\n\", 1, g[1]);\r\n\tprintf(\"g[%d] = %d\\n\", 2, g[2]);\r\n\tprintf(\"g[%d] = %d\\n\", 3, g[3]);\r\n\tprintf(\"g[%d] = %d\\n\", 4, g[4]);\r\n}","name":"Arrays Begin"},{"file":"10_arrays_2_assign_in_for_loop.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint g[10];\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tprintf(\"g[%d] = %d\\n\", i, g[i]);\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tscanf(\"%d\", &g[i]);\r\n\t}\r\n\t\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tprintf(\"g[%d] = %d\\n\", i, g[i]);\r\n\t}\r\n}","name":"Arrays Assign In For Loop"},{"file":"10_arrays_3_display_as_table_1.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint sid[8] = {196, 197, 198, 199, 200, 201, 202, 203};\r\n\tint age[8] = {22, 23, 21, 23, 22, 21, 20, 20};\r\n\tfloat avg[8] = {67.4, 65.92, 54.8, 94.73, 63.9, 65.35, 84.64, 70.0};\r\n\r\n\tprintf(\"%5s %5s %8s\\n\", \"ID\", \"Age\", \"Avarage\");\r\n\r\n\tfor(int i = 0; i < 8; i++) {\r\n\t\tprintf(\"%5d %5d %8.2f\\n\", sid[i], age[i], avg[i]);\r\n\t}\r\n}","name":"Arrays Display As Table"},{"file":"10_arrays_4_display_as_table_2.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint sid[5] = {196, 197, 198, 199, 200};\r\n\tint m_1[5] = {76, 84, 68, 37, 55};\r\n\tint m_2[5] = {97, 75, 74, 86, 68};\r\n\r\n\tprintf(\"%8s %10s %10s %12s\\n\", \"ID\", \"Marks_1\", \"Marks_2\", \"Avarage\");\r\n\r\n\tfor(int i = 0; i < 5; i++) {\r\n\t\tfloat avg = (m_1[i] + m_2[i]) / 2.0 ;\r\n\t\tprintf(\"%8d %10d %10d %12.2f\\n\", sid[i], m_1[i], m_2[i], avg);\r\n\t}\r\n}","name":"Arrays Display As Table"},{"file":"10_arrays_5_max_min_total.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint l[5] = {76, 84, 68, 37, 55};\r\n\r\n\tint max = l[0]; // do not keep garbage\r\n\tint min = l[0]; // do not keep garbage\r\n\tint tot = 0; // do not keep garbage\r\n\r\n\t// get max\r\n\tfor(int i = 0; i < 5; i++) {\r\n\t\tif(l[i] > max) {max = l[i];}\r\n\t}\r\n\r\n\t// get min\r\n\tfor(int i = 0; i < 5; i++) {\r\n\t\tif(l[i] < min) {min = l[i];}\r\n\t}\r\n\r\n\t// get total\r\n\tfor(int i = 0; i < 5; i++) {\r\n\t\ttot += l[i];\r\n\t}\r\n\r\n\t// display max min total\r\n\tprintf(\"MAX = %d\\n\", max);\r\n\tprintf(\"MIN = %d\\n\", min);\r\n\tprintf(\"TOT = %d\\n\", tot);\r\n\r\n\t// all at once\r\n\tfor(int i = 0; i < 5; i++) {\r\n\t\tif(l[i] > max) {max = l[i];}\r\n\t\tif(l[i] < min) {min = l[i];}\r\n\t\ttot += l[i];\r\n\t}\r\n}","name":"Arrays Max Min Total"},{"file":"11_strings_1_basics.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar c = 'A';\r\n\r\n\tchar str_1[6] = {'K', 'a', 'm', 'a', 'l','\\0'};\r\n\tchar str_2[6] = \"Kamal\";\r\n\r\n\tprintf(\"%s\\n\", str_1);\r\n\tprintf(\"%s\\n\", str_2);\r\n\r\n\tchar add_1[50] = \"Kelaniya, Dalugama, Sri Lanka.\";\r\n\r\n\tprintf(\"Address = %s\\n\", add_1);\r\n}","name":"Strings Basics"},{"file":"11_strings_2_scanf.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar name[50];\r\n\r\n\tprintf(\"Enter Your Name : \");\r\n\tscanf(\"%s\", name);\r\n\r\n\tprintf(\"You name is %s\", name);\r\n}","name":"Strings Scanf"},{"file":"11_strings_3_assigning.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar str_1[10] = \"MY TEXT\";\r\n\tchar str_2[10];\r\n\r\n\t// str_2 = str_1 is wrong!\r\n\r\n\tprintf(\"1st item of array = %c\\n\", str_1[0]);\r\n\tprintf(\"2nd item of array = %c\\n\", str_1[1]);\r\n\tprintf(\"3rd item of array = %c\\n\", str_1[2]);\r\n\tprintf(\"4th item of array = %c\\n\", str_1[3]);\r\n\tprintf(\"5th item of array = %c\\n\", str_1[4]);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i=0; i < 10; i++) {\r\n\t\tstr_2[i] = str_1[i];\r\n\t}\r\n\r\n\tprintf(\"str_2 = %s\\n\", str_2);\r\n\r\n}","name":"Strings Assigning"},{"file":"11_strings_4_length.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\t\\0 = empty charactor\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tchar str_1[10];\r\n\r\n\tprintf(\"Enter your string : \");\r\n\tscanf(\"%s\", str_1);\r\n\r\n\tint n = 0;\r\n\twhile(str_1[n] != '\\0') {\r\n\t\tn++;\r\n\t}\r\n\r\n\tprintf(\"Length of your string = %d\\n\", n);\r\n\r\n}","name":"Strings Length"},{"file":"11_strings_5_library_strlen_strcpy.c","code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\nvoid main() {\r\n\tchar str_1[10] = \"Kamal\";\r\n\r\n\tint len_1 = strlen(str_1);\r\n\tprintf(\"Length of str_1 = %d\\n\", len_1); // display by variable value\r\n\tprintf(\"Length of str_1 = %d\\n\", strlen(str_1)); // display by strlen function\r\n\r\n\tchar str_2[10] = \"MY_TEXT\";\r\n\tchar str_3[10];\r\n\r\n\tstrcpy(str_3, str_2); // str_3 <- str_2\r\n\r\n\tprintf(\"str_2 = %s\\n\", str_2);\r\n\tprintf(\"str_3 = %s\\n\", str_3);\r\n\r\n\tchar str_4[10];\r\n\r\n\t// str_4 = \"MY_TEXT\" is wrong!\r\n\r\n\tstrcpy(str_4, \"MY_TEXT\");\r\n\r\n\tprintf(\"str_4 = %s\\n\", str_4);\r\n}","name":"Strings Library Strlen Strcpy"},{"file":"11_strings_6_library_strcmp.c","code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n/*\r\n\r\n\tstring_1 == string_2 -> 0\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tchar str_1[10] = \"Kamal\";\r\n\tchar str_2[10] = \"Nimal\";\r\n\tchar str_3[10] = \"Kamal\";\r\n\r\n\tprintf(\"str_1, str_2 = %d\\n\", strcmp(str_1, str_2));\r\n\tprintf(\"str_2, str_1 = %d\\n\", strcmp(str_2, str_1));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"str_1, str_3 = %d\\n\", strcmp(str_1, str_3));\r\n\tprintf(\"str_3, str_1 = %d\\n\", strcmp(str_3, str_1));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"str_2, str_3 = %d\\n\", strcmp(str_2, str_3));\r\n\tprintf(\"str_3, str_2 = %d\\n\", strcmp(str_3, str_2));\r\n}","name":"Strings Library Strcmp"},{"file":"11_strings_7_library_strcmp_explain.c","code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n/*\r\n\r\n\t 0 -> string_1 == string_2\r\n\t 1 -> first_unmached_char > second_unmatched_char\r\n\t-1 -> first_unmached_char < second_unmatched_char\r\n\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tchar str_1[4] = \"abc\";\r\n\tchar str_2[4] = \"abc\";\r\n\tchar str_3[4] = \"aBc\";\r\n\r\n\tfor(int i = 0; i < 3; i++) {\r\n\t\tprintf(\"%d - %d = %d\\n\", str_1[i], str_2[i], str_1[i] - str_2[i]);\r\n\t}\r\n\tprintf(\"str_1, str_2 = %d\\n\", strcmp(str_1, str_2));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i = 0; i < 3; i++) {\r\n\t\tprintf(\"%d - %d = %d\\n\", str_1[i], str_3[i], str_1[i] - str_3[i]);\r\n\t}\r\n\tprintf(\"str_1, str_3 = %d\\n\", strcmp(str_1, str_3));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i = 0; i < 3; i++) {\r\n\t\tprintf(\"%d - %d = %d\\n\", str_3[i], str_1[i], str_3[i] - str_1[i]);\r\n\t}\r\n\tprintf(\"str_3, str_1 = %d\\n\", strcmp(str_3, str_1));\r\n}","name":"Strings Library Strcmp Explain"},{"file":"11_strings_8_library_strcat.c","code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\nvoid main() {\r\n\tchar str_1[30] = \"Kamal \";\r\n\tchar str_2[30] = \"Jayawickrama\";\r\n\r\n\tprintf(\"str_1 = %s\\n\", str_1);\r\n\tprintf(\"str_2 = %s\\n\", str_2);\r\n\r\n\tstrcat(str_1, str_2); // str_1 <- str_2\r\n\r\n\tprintf(\"str_1 = %s\\n\", str_1);\r\n\tprintf(\"str_2 = %s\\n\", str_2);\r\n}","name":"Strings Library Strcat"},{"file":"12_two_dimensional_arrays_1_basics.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\tdata_type array_name[x][y]\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint l[5][5]; // 5 x 5 = 25 items\r\n\tint m[4][3]; // 4 x 3 = 12 items\r\n\r\n\tint g[3][4] = {\r\n\t\t{34, 23, 64, 42},\r\n\t\t{75, 53, 53, 53},\r\n\t\t{47, 44, 74, 26}\r\n\t};\r\n\r\n\r\n\tprintf(\"g[2][2] = %d\", g[2][2]);\r\n}","name":"Two Dimensional Arrays Basics"},{"file":"12_two_dimensional_arrays_2_for_loop.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint l[4][3];\r\n\r\n\tfor(int i = 0; i < 4; i++) {\r\n\t\tfor(int j = 0; j < 3; j++) {\r\n\t\t\tprintf(\"Enter value for l[%d][%d] : \", i, j);\r\n\t\t\tscanf(\"%d\", &l[i][j]);\r\n\t\t}\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i = 0; i < 4; i++) {\r\n\t\tfor(int j = 0; j < 3; j++) {\r\n\t\t\tprintf(\"Value for l[%d][%d] = %d\\n\", i, j, l[i][j]);\r\n\t\t}\r\n\t}\r\n\r\n}","name":"Two Dimensional Arrays For Loop"},{"file":"13_file_processing_1_basics.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tFILE *fp; // declaring file pointer\r\n\r\n\t// assigning file pointer location and type\r\n\t// r = read, w = write, a = append\r\n\tfp = fopen(\"bin/sample_1.txt\",\"r\");\r\n\r\n\t// fscanf()\r\n\t// fgets()\r\n\r\n\tfclose(fp); // closing file pointer\r\n}","name":"File Processing Basics"},{"file":"13_file_processing_2_fscanf_1.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x;\r\n\r\n\tFILE *fp;\r\n\tfp = fopen(\"bin/sample_1.txt\",\"r\");\r\n\tfscanf(fp, \"%d\", &x);\r\n\tfclose(fp);\r\n\r\n\tprintf(\"x = %d\\n\", x);\r\n}","name":"File Processing Fscanf"},{"file":"13_file_processing_2_fscanf_2_array.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint l[8];\r\n\r\n\tFILE *fp;\r\n\tfp = fopen(\"bin/sample_2.txt\",\"r\");\r\n\tfor(int i = 0; i < 8; i++) {fscanf(fp, \"%d\", &l[i]);}\r\n\tfclose(fp);\r\n\r\n\tfor(int i = 0; i < 8; i++) {printf(\"l[%d] = %d\\n\", i, l[i]);}\r\n}","name":"File Processing Fscanf Array"},{"file":"13_file_processing_2_fscanf_3_multi_types.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x;\r\n\tchar y;\r\n\tfloat z;\r\n\r\n\tFILE *fp;\r\n\tfp = fopen(\"bin/sample_3.txt\",\"r\");\r\n\tfscanf(fp, \"%d\", &x);\r\n\tfscanf(fp, \" %c\", &y);\r\n\tfscanf(fp, \"%f\", &z);\r\n\tfclose(fp);\r\n\r\n\tprintf(\"x = %d\\n\", x);\r\n\tprintf(\"y = %c\\n\", y);\r\n\tprintf(\"z = %f\\n\", z);\r\n}","name":"File Processing Fscanf Multi Types"},{"file":"13_file_processing_2_fscanf_4_eof.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x;\r\n\r\n\tFILE *fp;\r\n\tfp = fopen(\"bin/sample_2.txt\",\"r\");\r\n\r\n\twhile(fscanf(fp, \"%d\", &x) != EOF) {\r\n\t\tprintf(\"%d\\n\", x);\r\n\t}\r\n\r\n\tfclose(fp);\r\n}","name":"File Processing Fscanf Eof"},{"file":"13_file_processing_3_fgets.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar str[10];\r\n\r\n\tFILE *fp;\r\n\tfp = fopen(\"bin/sample_4.txt\",\"r\");\r\n\r\n\twhile(fgets(str, 6, fp) != NULL) {\r\n\t\tprintf(\"%s\\n\", str);\r\n\t}\r\n\r\n\tfclose(fp);\r\n}","name":"File Processing Fgets"},{"file":"13_file_processing_4_fprintf_1_write.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 2346;\r\n\tfloat y = 56.2;\r\n\tchar z = 'K';\r\n\r\n\tFILE *fp_1;\r\n\tfp_1 = fopen(\"bin/sample_5.txt\",\"w\");\r\n\tfprintf(fp_1, \"%d\\n\", x);\r\n\tfprintf(fp_1, \"%f\\n\", y);\r\n\tfprintf(fp_1, \"%c\\n\", z);\r\n\tfclose(fp_1);\r\n\r\n\tFILE *fp_2;\r\n\tfp_2 = fopen(\"bin/sample_6.txt\",\"w\");\r\n\tfprintf(fp_2, \"%d %f %c\", x, y, z);\r\n\tfclose(fp_2);\r\n\r\n\tFILE *fp_3;\r\n\tfp_3 = fopen(\"bin/sample_7.txt\",\"w\");\r\n\tfprintf(fp_3, \"Values :\\n\");\r\n\tfprintf(fp_3, \"\\tx = %d\\n\", x);\r\n\tfprintf(fp_3, \"\\ty = %f\\n\", y);\r\n\tfprintf(fp_3, \"\\tz = %c\\n\", z);\r\n\tfclose(fp_3);\r\n}","name":"File Processing Fprintf Write"},{"file":"13_file_processing_4_fprintf_2_append.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 2346;\r\n\tfloat y = 56.2;\r\n\tchar z = 'R';\r\n\r\n\tFILE *fp_1;\r\n\tfp_1 = fopen(\"bin/sample_8.txt\",\"a\");\r\n\tfprintf(fp_1, \"x = %d, y = %f, z = %c\\n\", x, y ,z);\r\n\tfclose(fp_1);\r\n}","name":"File Processing Fprintf Append"},{"file":"13_file_processing_4_fprintf_3_dbs.c","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint l[3][5] = {\r\n\t\t{45, 65, 43, 53, 53},\r\n\t\t{43, 26, 63, 94, 22},\r\n\t\t{24, 33, 63, 35, 44},\r\n\t};\r\n\r\n\tFILE *fp_1;\r\n\tfp_1 = fopen(\"bin/sample_9.txt\",\"w\");\r\n\t\r\n\tfor(int i = 0; i < 3; i++) {\r\n\t\tfor(int j = 0; j < 5; j++) {\r\n\t\t\tfprintf(fp_1, \"%d \", l[i][j]);\r\n\t\t}\r\n\t\tfprintf(fp_1,\"\\n\");\r\n\t}\r\n\r\n\tfclose(fp_1);\r\n}","name":"File Processing Fprintf Dbs"},{"file":"14_functions_1_basics.c","code":"#include <stdio.h>\r\nvoid sayHello(); // function prototype\r\n\r\n// main function\r\nvoid main() {\r\n\tprintf(\"Hello!\\n\");\r\n\tprintf(\"Hello!\\n\");\r\n\tprintf(\"Hello!\\n\");\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tsayHello();\r\n\tsayHello();\r\n\tsayHello();\r\n\tsayHello();\r\n\tsayHello();\r\n}\r\n\r\n// function definition\r\nvoid sayHello() {\r\n\tprintf(\"Hello!\\n\");\r\n}","name":"Functions Basics"},{"file":"14_functions_2_simple.c","code":"#include <stdio.h>\r\nvoid func_1();\r\nvoid func_2();\r\n\r\nvoid main() {\r\n\tfunc_1();\r\n\tfunc_2();\r\n}\r\n\r\nvoid func_1() {\r\n\tprintf(\"Welcome!\\n\");\r\n}\r\n\r\nvoid func_2() {\r\n\tint x = 5;\r\n\tint y = 3;\r\n\tprintf(\"%d * %d = %d\\n\", x, y, x*y);\r\n}","name":"Functions Simple"},{"file":"14_functions_3_parameters.c","code":"#include <stdio.h>\r\nvoid printArea(int x, int y);\r\nvoid printCube(int x);\r\n\r\nvoid main() {\r\n\tprintArea(4, 5);\r\n\tprintArea(3, 2);\r\n\tprintArea(6, 7);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintCube(8);\r\n\tprintCube(9);\r\n\tprintCube(4);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tint x = 2;\r\n\tint y = 6;\r\n\r\n\tprintArea(x, y);\r\n\tprintArea(9, 3);\r\n}\r\n\r\nvoid printArea(int x, int y) {\r\n\tint a = x * y;\r\n\tprintf(\"Area of %d and %d = %d\\n\", x, y, a);\r\n}\r\n\r\nvoid printCube(int x) {\r\n\tprintf(\"Cube of %d = %d\\n\", x, x*x*x);\r\n}","name":"Functions Parameters"},{"file":"14_functions_4_return.c","code":"#include <stdio.h>\r\nint getArea(int x, int y);\r\nint getCube(int x);\r\nint getLarge(int x, int y);\r\n\r\nvoid main() {\r\n\tint area  = getArea(4, 5);\r\n\tint cube  = getCube(8);\r\n\tint large = getLarge(10, 12);\r\n\r\n\tprintf(\"area  = %d\\n\", area);\r\n\tprintf(\"cube  = %d\\n\", cube);\r\n\tprintf(\"large = %d\\n\", large);\r\n}\r\n\r\nint getArea(int x, int y) {\r\n\tint a = x * y;\r\n\treturn a;\r\n}\r\n\r\nint getCube(int x) {\r\n\treturn x*x*x;\r\n}\r\n\r\nint getLarge(int x, int y) {\r\n\tif(x > y) {\r\n\t\treturn x;\r\n\t}\r\n\telse if(x < y) {\r\n\t\treturn y;\r\n\t}\r\n\telse {\r\n\t\treturn -1;\r\n\t}\r\n}","name":"Functions Return"},{"file":"14_functions_5_library_function_1.c","code":"#include <stdio.h>  // printf, scanf, fprintf, fscanf, fopen, fclose\r\n#include <stdlib.h> // abs, rand\r\n#include <math.h>   // sqrt, pow, sin, cos, ceil, floor, log, log10\r\n#include <string.h> // strlen, strcmp, strcpy, strcat\r\n\r\nvoid main() {\r\n\tint x = -5;\r\n\r\n\tprintf(\"abs value of -5  = %d\\n\", abs(x));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"2 to the power 5 = %f\\n\", pow(2, 5));\r\n\tprintf(\"sin value of 90  = %f\\n\", sin(3.14/2));\r\n\tprintf(\"cos value of 90  = %f\\n\", cos(3.14/2));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"celi of 4.5      = %f\\n\", ceil(4.5));\r\n\tprintf(\"floor of 4.5     = %f\\n\", floor(4.5));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"round of 4.1     = %f\\n\", round(4.1));\r\n\tprintf(\"round of 4.5     = %f\\n\", round(4.5));\r\n}","name":"Functions Library Function"},{"file":"14_functions_5_library_function_2_sizeof.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <math.h> \r\n\r\n/*\r\n\r\n\tsizeof(x) = bits count for x variable\r\n\tsizeof(l) = bits count for l, when l is an array\r\n\r\n\titems_count_of_array = sizeof(array) / sizeof(array__data_type)\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x;\r\n\tprintf(\"size of x = %u\\n\", sizeof(x)); // bits count for variable\r\n\r\n\tchar c;\r\n\tprintf(\"size of c = %u\\n\", sizeof(c));\r\n\r\n\tfloat y;\r\n\tprintf(\"size of y = %u\\n\", sizeof(y));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"size of int   = %u\\n\", sizeof(int));\r\n\tprintf(\"size of char  = %u\\n\", sizeof(char));\r\n\tprintf(\"size of float = %u\\n\", sizeof(float));\t\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tint l[12];\r\n\tprintf(\"size of l array       = %u\\n\", sizeof(l)); // item count * bits per item\r\n\tprintf(\"item count of l array = %u\\n\", sizeof(l) / sizeof(int)); // item count * bits per item\r\n\r\n\r\n}","name":"Functions Library Function Sizeof"},{"file":"15_recursion_1_addition.c","code":"#include <stdio.h>\r\nint addi(int x);\r\n\r\nvoid main() {\r\n\tprintf(\"addition until 0 to 4 = %d\\n\", addi(4));\r\n\tprintf(\"addition until 0 to 5 = %d\\n\", addi(5));\r\n\tprintf(\"addition until 0 to 6 = %d\\n\", addi(6));\r\n}\r\n\r\n // addition\r\nint addi(int x) {\r\n\tif(x == 0) {\r\n\t\treturn x;\r\n\t}\r\n\telse {\r\n\t\treturn x + addi(x-1);\r\n\t}\r\n}","name":"Recursion Addition"},{"file":"15_recursion_2_factorial.c","code":"#include <stdio.h>\r\nint fact(int x);\r\n\r\nvoid main() {\r\n\tprintf(\"factorial of 3 = %d\\n\", fact(3));\r\n\tprintf(\"factorial of 4 = %d\\n\", fact(4));\r\n\tprintf(\"factorial of 5 = %d\\n\", fact(5));\r\n\tprintf(\"factorial of 0 = %d\\n\", fact(0));\r\n}\r\n\r\n // factorial\r\nint fact(int x) {\r\n\tif(x == 0) {\r\n\t\treturn 1;\r\n\t}\r\n\telse if(x == 1) {\r\n\t\treturn x;\r\n\t}\r\n\telse {\r\n\t\treturn x * fact(x-1);\r\n\t}\r\n}","name":"Recursion Factorial"},{"file":"15_recursion_3_power.c","code":"#include <stdio.h>\r\nint powr(int x, int y);\r\n\r\nvoid main() {\r\n\tprintf(\"3 to the power 3 = %d\\n\", powr(3, 3));\r\n\tprintf(\"4 to the power 2 = %d\\n\", powr(4, 2));\r\n\tprintf(\"1 to the power 0 = %d\\n\", powr(1, 0));\r\n}\r\n\r\n // power\r\nint powr(int x, int y) {\r\n\tif(y == 0) {\r\n\t\treturn 1;\r\n\t}\r\n\telse if(y == 1) {\r\n\t\treturn x;\r\n\t}\r\n\telse {\r\n\t\treturn x * powr(x, y - 1);\r\n\t}\r\n}","name":"Recursion Power"},{"file":"16_pointers_1_memory_address.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\t\r\n\tmemory block has a [values] and [address]\r\n\t&x = address of x variable\r\n\t%p = address representation in printf()\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x; // grab memory location for a variable\r\n\tx = 10; // saving a value in memory block\r\n\r\n\tprintf(\"value   of x = %d\\n\", x);\r\n\tprintf(\"address of x = %p\\n\", &x);\r\n}","name":"Pointers Memory Address"},{"file":"16_pointers_2_assigning.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\twhen *p is a pointer:\r\n\t\tp  = address\r\n\t\t*p = value of pointed memory location\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 15;\r\n\tint *p;\r\n\r\n\tp = &x;\r\n\r\n\tprintf(\"value of x                    = %d\\n\", x);\r\n\tprintf(\"address of x                  = %p\\n\", &x);\r\n\tprintf(\"address of p                  = %p\\n\", &p);\r\n\tprintf(\"pointed address of p          = %p\\n\", p);\r\n\tprintf(\"value of pointed address of p = %d\\n\", *p);\r\n}","name":"Pointers Assigning"},{"file":"16_pointers_3_operators.c","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\twhen *p is a pointer:\r\n\t\tp  = address\r\n\t\t*p = value of pointed memory location\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 15;\r\n\tint *p = &x;\r\n\tprintf(\"x = %d, *p = %d\\n\", x, *p);\r\n\t*p = *p + 1;\r\n\tprintf(\"x = %d, *p = %d\\n\", x, *p);\r\n\t*p += 1;\r\n\tprintf(\"x = %d, *p = %d\\n\", x, *p);\r\n\t*p = *p - 2;\r\n\tprintf(\"x = %d, *p = %d\\n\", x, *p);\r\n\t*p *= 2;\r\n\tprintf(\"x = %d, *p = %d\\n\", x, *p);\r\n\t*p /= 3;\r\n\tprintf(\"x = %d, *p = %d\\n\", x, *p);\r\n\r\n\t// *p-- *p++ no available\r\n\r\n\tp++; // pointing to next address (usually in arrays)\r\n\tp--; // pointing to previous address (usually in arrays)\r\n\r\n\tp+=5; // pointing to next 5th address;\r\n\tp-=3; // pointing to previous 3rd address;\r\n\r\n\t/*\r\n\r\n\t\tNo Meaning:\r\n\t\t\tp = p / 2;\r\n\t\t\tp = p * 5;\r\n\r\n\t*/\r\n}","name":"Pointers Operators"},{"file":"16_pointers_4_functions_1.c","code":"#include <stdio.h>\r\nvoid addTen(int *p);\r\n\r\nvoid main() {\r\n\tint x = 15;\r\n\tint *p;\r\n\r\n\tp = &x;\r\n\r\n\tprintf(\"x = %d\\n\", x);\r\n\taddTen(p);\r\n\tprintf(\"x = %d\\n\", x);\r\n}\r\n\r\nvoid addTen(int *p) {\r\n\t*p += 10;\r\n}","name":"Pointers Functions"},{"file":"16_pointers_4_functions_2.c","code":"#include <stdio.h>\r\nvoid getAddSub(int x, int y, int *a, int *s);\r\n\r\n/*\r\n\t x = value_1\r\n\t y = value_2\r\n\t*a = pointer of addition\r\n\t*s = pointer of substraction\r\n*/\r\n\r\nvoid main() {\r\n\tint v1 = 10;\r\n\tint v2 = 15;\r\n\r\n\tint ad, sb;\r\n\tint *ad_ptr = &ad;\r\n\tint *sb_ptr = &sb;\r\n\r\n\tgetAddSub(v1, v2, ad_ptr, sb_ptr);\r\n\r\n\tprintf(\"ad = %d\\n\", ad);\r\n\tprintf(\"sb = %d\\n\", sb);\r\n}\r\n\r\nvoid getAddSub(int x, int y, int *a, int *s) {\r\n\t*a = x + y;\r\n\t*s = x - y;\r\n}","name":"Pointers Functions"},{"file":"16_pointers_5_arrays.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint getTotal(int *p, int n);\r\n\r\nvoid main() {\r\n\tint l[8] = {34, 53, 78, 48, 32, 63, 35, 36};\r\n\tint n = sizeof(l) / sizeof(int);\r\n\tint total = getTotal(&l[0], n);\r\n\r\n\tprintf(\"total = %d\", total);\r\n}\r\n\r\nint getTotal(int *p, int n) {\r\n\tint t = 0;\r\n\tfor(int i = 0; i < n; i++) {\r\n\t\tt += *p;\r\n\t\tprintf(\"l[%d] = %d\\n\", i, *p);\r\n\t\tp++; // changing pointer location to next item of array\r\n\t}\r\n\treturn t;\r\n}","name":"Pointers Arrays"},{"file":"17_block_and_scope_1.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\nvoid sampleFunction();\r\n\r\n// always grab the closest variable\r\n\r\nint x = 10;\r\n\r\nvoid main() {\r\n\tint x = 20;\r\n\r\n\tprintf(\"main    : x = %d\\n\", x);\r\n\tsampleFunction();\r\n}\r\n\r\nvoid sampleFunction() {\r\n\tprintf(\"sample  : x = %d\\n\", x);\r\n}","name":"Block And Scope"},{"file":"17_block_and_scope_2.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n/*\r\n\r\n\t{...} is a block\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\t{\r\n\t\tint x = 20;\r\n\t\tprintf(\"x = %d\\n\", x);\r\n\r\n\t}\r\n}","name":"Block And Scope"},{"file":"17_block_and_scope_3.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n/*\r\n\r\n\t{...} is a block\r\n\r\n*/\r\n\r\nvoid main() {\r\n\t// main function\r\n\tint x = 10;\r\n\tint y = 15;\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\t{\r\n\t\t// block 1\r\n\t\tint y = 35;\r\n\t\tint x = 20;\r\n\t\tprintf(\"x = %d\\n\", x);\r\n\r\n\t\t{\r\n\t\t\t// block 2\r\n\t\t\tint x = 30;\r\n\t\t\tprintf(\"y = %d\", y);\r\n\t\t}\r\n\t}\r\n}","name":"Block And Scope"},{"file":"18_storage_classes_1_global.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\nvoid sampleFunction();\r\n\r\nint x = 10; // global variable\r\n\r\nvoid main() {\r\n\tint y = 20; // local variable\r\n\r\n\tprintf(\"in main function    :  x = %d\\n\", x);\r\n\tprintf(\"in main function    :  y = %d\\n\", y);\r\n\tsampleFunction();\r\n}\r\n\r\nvoid sampleFunction() {\r\n\tprintf(\"in sample function  :  x = %d\\n\", x);\r\n}","name":"Storage Classes Global"},{"file":"18_storage_classes_2_extern.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\nint x = 10; // global variable\r\n\r\nvoid main() {\r\n\tint x = 25; // local variable\r\n\tprintf(\"in main  : x = %d\\n\", x);\r\n\r\n\t{\r\n\t\textern int x; // referring to external (global) variable\r\n\t\tprintf(\"in block : x = %d\\n\", x);\r\n\t}\r\n}","name":"Storage Classes Extern"},{"file":"19_struct_1_basics.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n/*\r\n\r\n\tstruct {structure_variables} structure_name;\r\n\r\n\t// no garbage values -> auto initialized\r\n\r\n\tint   = 0\r\n\tchar  = \\0\r\n\tfloat = 0.000000\r\n\r\n*/\r\n\r\nstruct mrk {int subj_1; int subj_2; int subj_3;} marks;\r\nstruct grd {char grd_1; char grd_2; char grd_3;} grade;\r\nstruct rts {float rt_1; float rt_2; float rt_3;} rates;\r\n\r\n\r\nvoid main() {\r\n\tprintf(\"marks 1 = %d\\n\", marks.subj_1);\r\n\tprintf(\"marks 2 = %d\\n\", marks.subj_2);\r\n\tprintf(\"marks 3 = %d\\n\", marks.subj_3);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"grade 1 = %c\\n\", grade.grd_1);\r\n\tprintf(\"grade 2 = %c\\n\", grade.grd_2);\r\n\tprintf(\"grade 3 = %c\\n\", grade.grd_3);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"rates 1 = %f\\n\", rates.rt_1);\r\n\tprintf(\"rates 2 = %f\\n\", rates.rt_2);\r\n\tprintf(\"rates 3 = %f\\n\", rates.rt_3);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tmarks.subj_1 = 75;\r\n\tmarks.subj_2 = 94;\r\n\tmarks.subj_3 = 69;\r\n\r\n\tprintf(\"marks 1 = %d\\n\", marks.subj_1);\r\n\tprintf(\"marks 2 = %d\\n\", marks.subj_2);\r\n\tprintf(\"marks 3 = %d\\n\", marks.subj_3);\r\n\r\n\tgrade.grd_1 = 'B';\r\n\tgrade.grd_2 = 'A';\r\n\tgrade.grd_3 = 'C';\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"grade 1 = %c\\n\", grade.grd_1);\r\n\tprintf(\"grade 2 = %c\\n\", grade.grd_2);\r\n\tprintf(\"grade 3 = %c\\n\", grade.grd_3);\r\n}","name":"Struct Basics"},{"file":"19_struct_2_scanf_printf.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\nvoid readMarks();\r\nvoid calcMarks();\r\nvoid showMarks();\r\n\r\nstruct mrk {\r\n\tint subj_1;\r\n\tint subj_2;\r\n\tint subj_3;\r\n\tint tot;\r\n\tfloat avg;\r\n} marks;\r\n\r\nvoid main() {\r\n\treadMarks();\r\n\tcalcMarks();\r\n\tshowMarks();\r\n}\r\n\r\nvoid readMarks() {\r\n\tprintf(\"Enter Subject 1 Marks : \");\r\n\tscanf(\"%d\", &marks.subj_1);\r\n\tprintf(\"Enter Subject 2 Marks : \");\r\n\tscanf(\"%d\", &marks.subj_2);\r\n\tprintf(\"Enter Subject 3 Marks : \");\r\n\tscanf(\"%d\", &marks.subj_3);\r\n}\r\n\r\nvoid calcMarks() {\r\n\tmarks.tot = marks.subj_1 + marks.subj_2 + marks.subj_3;\r\n\tmarks.avg = marks.tot / 3.0;\r\n}\r\n\r\nvoid showMarks() {\r\n\tprintf(\"Total   = %d\\n\", marks.tot);\r\n\tprintf(\"Average = %.2f %%\\n\", marks.avg);\r\n}","name":"Struct Scanf Printf"},{"file":"19_struct_3_arrays.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nvoid readMarks();\r\nvoid calcMarks();\r\nvoid showMarks();\r\n\r\nstruct mrk {\r\n\tint subj_1;\r\n\tint subj_2;\r\n\tint subj_3;\r\n\tint tot;\r\n\tfloat avg;\r\n} marks[10];\r\n\r\nvoid main() {\r\n\treadMarks();\r\n\tcalcMarks();\r\n\tshowMarks();\r\n}\r\n\r\nvoid readMarks() {\r\n\tfor(int i = 0; i< 10; i++) {\r\n\t\tprintf(\"Student %d Subject 1 : \", i+1);\r\n\t\tscanf(\"%d\", &marks[i].subj_1);\r\n\t\tprintf(\"Student %d Subject 2 : \", i+1);\r\n\t\tscanf(\"%d\", &marks[i].subj_2);\r\n\t\tprintf(\"Student %d Subject 3 : \", i+1);\r\n\t\tscanf(\"%d\", &marks[i].subj_3);\r\n\t}\r\n}\r\n\r\nvoid calcMarks() {\r\n\tfor(int i = 0; i< 10; i++) {\r\n\t\tmarks[i].tot = marks[i].subj_1 + marks[i].subj_2 + marks[i].subj_3;\r\n\t\tmarks[i].avg = marks[i].tot / 3.0;\r\n\t}\r\n}\r\n\r\nvoid showMarks() {\r\n\tfor(int i = 0; i< 10; i++) {\r\n\t\tprintf(\"Student %d Total   = %d\\n\", i+1, marks[i].tot);\r\n\t\tprintf(\"Student %d Average = %.2f %%\\n\", i+1, marks[i].avg);\r\n\t}\r\n}","name":"Struct Arrays"},{"file":"20_union_1_basics.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nunion mrk {int subj_1; int subj_2; int subj_3;} marks;\r\n\r\n\r\nvoid main() {\r\n\tprintf(\"marks 1 = %d\\n\", marks.subj_1);\r\n\tprintf(\"marks 2 = %d\\n\", marks.subj_2);\r\n\tprintf(\"marks 3 = %d\\n\", marks.subj_3);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tmarks.subj_1 = 75;\r\n\tmarks.subj_2 = 94;\r\n\tmarks.subj_3 = 69;\r\n\r\n\tprintf(\"marks 1 = %d\\n\", marks.subj_1);\r\n\tprintf(\"marks 2 = %d\\n\", marks.subj_2);\r\n\tprintf(\"marks 3 = %d\\n\", marks.subj_3);\r\n}","name":"Union Basics"},{"file":"21_enum_1_basics.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nenum enum_1 {x, y, z} e_1;\r\nenum enum_2 {a = 10, b, c, d = 20, e, f} e_2;\r\n\r\nvoid main() {\r\n\tprintf(\"e_1 = %u\\n\", e_1);\r\n\te_1 = y;\r\n\tprintf(\"e_1 = %u\\n\", e_1);\r\n\te_1 = z;\r\n\tprintf(\"e_1 = %u\\n\", e_1);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\te_2 = a;\r\n\tprintf(\"e_2 = %u\\n\", e_2);\r\n\te_2 = b;\r\n\tprintf(\"e_2 = %u\\n\", e_2);\r\n\te_2 = c;\r\n\tprintf(\"e_2 = %u\\n\", e_2);\r\n\te_2 = d;\r\n\tprintf(\"e_2 = %u\\n\", e_2);\r\n\te_2 = e;\r\n\tprintf(\"e_2 = %u\\n\", e_2);\r\n\te_2 = f;\r\n\tprintf(\"e_2 = %u\\n\", e_2);\r\n\r\n}","name":"Enum Basics"},{"file":"21_enum_2_for_loop.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nenum enum_2 {a = 10, b, c, d = 20, e, f} e_2;\r\n\r\nvoid main() {\r\n\tfor(int i = a; i< f; i++) {\r\n\t\tprintf(\"%d\\n\", i);\r\n\t}\r\n}","name":"Enum For Loop"},{"file":"22_typedef_basics.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\ntypedef int newType;\r\ntypedef char grade;\r\n\r\nvoid main() {\r\n\tnewType x = 15;\r\n\tnewType y = 20;\r\n\r\n\tgrade g_1 = 'B';\r\n\tgrade g_2 = 'C';\r\n\r\n\tnewType a, b, c;\r\n\tgrade g_3, g_4;\r\n}","name":"Typedef Basics"},{"file":"22_typedef_2_struct_1_func_parameters.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\ntypedef struct student_struct {\r\n\tint m_1;\r\n\tint m_2;\r\n\tint m_3;\r\n\tint tot;\r\n\tfloat avg;\r\n} std;\r\n\r\nint getTotal(struct student_struct s);\r\nfloat getAverage(struct student_struct s);\r\n\r\nstd student_1;\r\nstd student_2;\r\n\r\nvoid main() {\r\n\tstudent_1.m_1 = 76;\r\n\tstudent_1.m_2 = 63;\r\n\tstudent_1.m_3 = 84;\r\n\r\n\tstudent_2.m_1 = 75;\r\n\tstudent_2.m_2 = 47;\r\n\tstudent_2.m_3 = 94;\r\n\r\n\tstudent_1.tot = getTotal(student_1);\r\n\tstudent_2.tot = getTotal(student_2);\r\n\r\n\tstudent_1.avg = getAverage(student_1);\r\n\tstudent_2.avg = getAverage(student_2);\r\n\r\n\tprintf(\"student_1 : tot = %d, avg = %.2f %%\\n\", student_1.tot, student_1.avg);\r\n\tprintf(\"student_2 : tot = %d, avg = %.2f %%\\n\", student_2.tot, student_2.avg);\r\n\r\n}\r\n\r\nint getTotal(struct student_struct s) {\r\n\tint total = s.m_1 + s.m_2 + s.m_3;\r\n\treturn total;\r\n}\r\n\r\nfloat getAverage(struct student_struct s) {\r\n\tint total = s.m_1 + s.m_2 + s.m_3;\r\n\tfloat average = total / 3.0;\r\n\treturn average;\r\n}","name":"Typedef Struct Func Parameters"},{"file":"22_typedef_2_struct_1_begin.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\ntypedef struct student_struct {\r\n\t\tchar name[10];\r\n\t\tint m_1;\r\n\t\tint m_2;\r\n\t\tint m_3;\r\n\t\tint tot;\r\n\t\tfloat avg;\r\n\t} std;\r\n\r\nstd student_1;\r\nstd student_2;\r\n\r\nvoid main() {\r\n\tstrcpy(student_1.name, \"Kamal\");\r\n\tstudent_1.m_1 = 76;\r\n\tstudent_1.m_2 = 63;\r\n\tstudent_1.m_3 = 84;\r\n\r\n\tstrcpy(student_2.name, \"Sunil\");\r\n\tstudent_2.m_1 = 75;\r\n\tstudent_2.m_2 = 47;\r\n\tstudent_2.m_3 = 94;\r\n}","name":"Typedef Struct Begin"},{"file":"22_typedef_2_struct_2_func_return.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\ntypedef struct student_struct {\r\n\tchar name[10];\r\n\tint m_1;\r\n\tint m_2;\r\n\tint m_3;\r\n\tint tot;\r\n\tfloat avg;\r\n} std;\r\n\r\nstruct student_struct readInputs();\r\n\r\nvoid main() {\r\n\tstd student_1;\r\n\tstudent_1 = readInputs();\r\n\r\n\tprintf(\"\\n\");\r\n\tprintf(\"name = %s\\n\", student_1.name);\r\n\tprintf(\"m_1  = %d\\n\", student_1.m_1);\r\n\tprintf(\"m_2  = %d\\n\", student_1.m_2);\r\n\tprintf(\"m_3  = %d\\n\", student_1.m_3);\r\n}\r\n\r\nstruct student_struct readInputs() {\r\n\tstd std_tmp;\r\n\tprintf(\"Input name : \");\r\n\tscanf(\"%s\", std_tmp.name); // no & sign for string arrays\r\n\tprintf(\"Input m_1  : \");\r\n\tscanf(\"%d\", &std_tmp.m_1);\r\n\tprintf(\"Input m_2  : \");\r\n\tscanf(\"%d\", &std_tmp.m_2);\r\n\tprintf(\"Input m_3  : \");\r\n\tscanf(\"%d\", &std_tmp.m_3);\r\n\treturn std_tmp;\r\n}","name":"Typedef Struct Func Return"},{"file":"23_memory_1_basics.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nvoid main() {\r\n\tint   x; // defining integer variable with 4 bytes\r\n\tchar  y; // defining character variable with 1 byte\r\n\tfloat z; // defining float variable with 4 bytes\r\n\r\n\tint   k[10]; // defining integer array with 4 * 10 bytes\r\n\tchar  l[10]; // defining character array with 1 * 10 bytes\r\n\tfloat m[10]; // defining float array with 4 * 10 bytes\r\n\r\n\tprintf(\"size of x = %d\\n\", sizeof(x));\r\n\tprintf(\"size of y = %d\\n\", sizeof(y));\r\n\tprintf(\"size of z = %d\\n\", sizeof(z));\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"size of k = %d\\n\", sizeof(k));\r\n\tprintf(\"size of l = %d\\n\", sizeof(l));\r\n\tprintf(\"size of m = %d\\n\", sizeof(m));\r\n}","name":"Memory Basics"},{"file":"23_memory_2_malloc.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n/*\r\n\r\n\tpointer = (data_type*)malloc(block_count * bytes_for_data_type);\r\n\r\n\tno initializing memory locations while allocating\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint *p;\r\n\r\n\tint n = 5; // the block count\r\n\r\n\t// allocating memory to pointer\r\n\tp = (int*)malloc(n * sizeof(int));\r\n\t// assigning values to array -> 0  to 10\r\n\tfor(int i = 0; i < n; i++) {p[i] = i;}\r\n\t// displaying array items \r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tn = 10;\r\n\r\n\t// allocating memory to pointer\r\n\tp = (int*)malloc(n * sizeof(int));\r\n\t// display array before assigning values\r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// assigning values to array -> 0  to 10\r\n\tfor(int i = 0; i < n; i++) {p[i] = i;}\r\n\t// displaying array items \r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\r\n\tfree(p);\r\n}","name":"Memory Malloc"},{"file":"23_memory_3_calloc.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n/*\r\n\r\n\tpointer = (data_type*)calloc(block_count, bytes_for_data_type);\r\n\r\n\tinitializing memory locations while allocating\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint *p;\r\n\r\n\tint n = 5; // the block count\r\n\r\n\t// allocating memory to pointer\r\n\tp = (int*)calloc(n, sizeof(int));\r\n\t// assigning values to array -> 0  to 10\r\n\tfor(int i = 0; i < n; i++) {p[i] = i;}\r\n\t// displaying array items \r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tn = 10;\r\n\r\n\t// allocating memory to pointer\r\n\tp = (int*)calloc(n, sizeof(int));\r\n\t// display array before assigning values\r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\t\r\n\tprintf(\"\\n\");\r\n\r\n\t// assigning values to array -> 0  to 10\r\n\tfor(int i = 0; i < n; i++) {p[i] = i;}\r\n\t// displaying array items \r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\r\n\tfree(p);\r\n}","name":"Memory Calloc"},{"file":"23_memory_4_realloc.c","code":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n/*\r\n\r\n\tpointer = realloc(pointer, block_count * bytes_for_data_type);\r\n\r\n\tshould run after calloc\r\n\tno initializing memory locations while allocating\r\n\tkeeps the old memory location data\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint *p;\r\n\r\n\tint n = 5; // the block count\r\n\r\n\t// allocating memory to pointer\r\n\tp = (int*)calloc(n, sizeof(int));\r\n\t// assigning values to array -> 0  to 10\r\n\tfor(int i = 0; i < n; i++) {p[i] = i;}\r\n\t// displaying array items \r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tn = 10;\r\n\r\n\t// allocating memory to pointer\r\n\tp = realloc(p, n * sizeof(int));\r\n\t// display array before assigning values\r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\t\r\n\tprintf(\"\\n\");\r\n\r\n\t// assigning values to array -> 0  to 10\r\n\tfor(int i = 0; i < n; i++) {p[i] = i;}\r\n\t// displaying array items \r\n\tfor(int i = 0; i < n; i++) {printf(\"p[%d] = %d\\n\", i, p[i]);}\r\n\r\n\tfree(p);\r\n}","name":"Memory Realloc"},{"file":"24_directives_1_inclusion_1.c","code":"#include <stdio.h>  // for standard input and output\r\n#include <math.h>   // for mathematical operations\r\n#include <time.h>   // for deal with time calculations\r\n#include <string.h>   // for deal with strings [charactor arrays]\r\n\r\n/*\r\n\r\n\t#include<header_file_name.h>\r\n\t#include \"my_file_name.h\"\r\n\r\n*/\r\n\r\nvoid main() {\r\n\t/*\r\n\t\tprintf();\r\n\t\tscanf();\r\n\t\t\r\n\t\tfopen();\r\n\t\tfprintf();\r\n\t\tfscanf();\r\n\t\tfclose();\r\n\r\n\t\tstrlen();\r\n\t\tstrcmp();\r\n\t\tstrcat();\r\n\r\n\t*/\r\n}","name":"Directives Inclusion"},{"file":"24_directives_1_inclusion_2.c","code":"#include <stdio.h>\r\n#include \"bin/my_library_file.h\"\r\n\r\nvoid main() {\r\n\tsayHello();\r\n\r\n\tfloat area = triangleArea(5, 10);\r\n\tprintf(\"Area of the triangle = %f\\n\", area);\r\n}","name":"Directives Inclusion"},{"file":"24_directives_2_define.c","code":"#include <stdio.h>\r\n\r\n#define PI 3.14\r\n#define name \"my_name\"\r\n\r\n/*\r\n\r\n\t#define [name] [value]\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tfloat  x   = 3.14;\r\n\tchar c[10] = \"my_name\";\r\n\r\n\tprintf(\"x = %f\\n\", x);\r\n\tprintf(\"c = %s\\n\", c);\r\n\r\n\tprintf(\"PI   = %f\\n\", PI);\r\n\tprintf(\"name = %s\\n\", name);\r\n}","name":"Directives Define"},{"file":"24_directives_3_pragma_1.c","code":"#include <stdio.h>\r\n\r\n\r\nstruct str {int a; char b;} str_1;\r\n\r\n/*\r\n\r\n\tstructure str_1 gets 8 bytes in memory\r\n\r\n\t####\tint    (4 bytes)\r\n\t#---\tchar   (1 byte)\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tprintf(\"size of str_1.a = %d\\n\", sizeof(str_1.a));\r\n\tprintf(\"size of str_1.b = %d\\n\", sizeof(str_1.b));\r\n\tprintf(\"size of str_1   = %d\\n\", sizeof(str_1));\r\n}","name":"Directives Pragma"},{"file":"24_directives_3_pragma_2.c","code":"#include <stdio.h>\r\n#pragma pack(1)\r\n\r\nstruct str {int a; char b;} str_1;\r\n\r\n/*\r\n\r\n\tstructure str_1 gets 8 bytes in memory\r\n\r\n\t#\tint    (1 byte)\r\n\t#\tint    (1 byte)\r\n\t#\tint    (1 byte)\r\n\t#\tint    (1 byte)\r\n\t#\tchar   (1 byte)\r\n\r\n\tpack(1) -> 1 = 2^n -> n = 0 (no empty spaces)\r\n*/\r\n\r\nvoid main() {\r\n\tprintf(\"size of str_1.a = %d\\n\", sizeof(str_1.a));\r\n\tprintf(\"size of str_1.b = %d\\n\", sizeof(str_1.b));\r\n\tprintf(\"size of str_1   = %d\\n\", sizeof(str_1));\r\n}","name":"Directives Pragma"},{"file":"24_directives_3_pragma_3.c","code":"#include <stdio.h>\r\n#pragma pack(2)\r\n\r\nstruct str {int a; char b;} str_1;\r\n\r\n/*\r\n\r\n\tstructure str_1 gets 8 bytes in memory\r\n\r\n\t#\tint    (1 byte)\r\n\t#\tint    (1 byte)\r\n\t#\tint    (1 byte)\r\n\t#\tint    (1 byte)\r\n\t-\tempty  pack(2) -> 2 = 2^n -> n = 1\r\n\t#\tchar   (1 byte)\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tprintf(\"size of str_1.a = %d\\n\", sizeof(str_1.a));\r\n\tprintf(\"size of str_1.b = %d\\n\", sizeof(str_1.b));\r\n\tprintf(\"size of str_1   = %d\\n\", sizeof(str_1));\r\n}","name":"Directives Pragma"}]