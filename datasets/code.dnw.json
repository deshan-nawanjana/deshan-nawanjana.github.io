{"C":[{"name":"first_program","code":"void main() {\r\n\t\r\n}","info":"C භාෂාවෙන් ලිවි හැකි කෙටිම සහ සරළම මෙන්ම, C පරිගණක වැඩසටහනක තිබිය යුතු අවශ්‍යම කොටස වන්නේද මෙයයි.\r\nමෙය Main Function එක වන අතර වැඩසටහන ක්‍රියාත්මක වීමේදී මේ තුළ ඇති කේත මූලික වශයෙන් එකින් එක පහළට ධාවනය වීම සිදු වේ."},{"name":"variables","code":"void main() {\r\n\t// variable deceleration width 'garbage values'\r\n\tint x;   // integer\r\n\tchar c;  // character\r\n\tfloat y; // floating point\r\n\r\n\t// assigning values to variables\r\n\tx = 12;\r\n\tc = 'K';\r\n\ty = 4.5; // becomes 4.500000\r\n\r\n\t// variable deceleration and value assigning same time\r\n\tint a = 20;\r\n\tchar d = 'f';\r\n\r\n\t// constant variable deceleration\r\n\tconst int z = 10;\r\n\t// z = 20 is wrong! z is read only\r\n}","info":"Variables යනු දත්ත මතකයේ තබා ගන්නා ඒකක වේ. C භාෂාවේ මූලික විචල්‍ය වර්ග තුනක් වන අතර ඒවා\r\nInteger (නිඛිල සංඛ්‍යා), Float (දශමය සංඛ්‍යා) සහ Charactors (අක්ෂර හෝ සංඛේත) වේ.\r\n\r\nමෙහිදී අප වටහාගත යුතු දෙයක් වන්නේ විචළල්‍යයක් තැනීමේදී සිදු වන්නේ පරිගණකයේ RAM එක මත ඇති දහස්ගානක Memory Blocksවලින් එක Block එකක් මේ විචල්‍යයක් සඳහා වෙන් වන බවයි. විචල්‍යයක් තැනීමේදී එයට අගයක් ඉදිරියෙන් ඒ මොහොතේම ලබා නෙදේ නම්, එම විචල්‍යයට ඇත්තේ Garbage Value එකකි. එනම් අදාළ Memory Block එක පෙර වැඩසටහනකින් භාවිත කර ඇත්නම් එම වැඩසටහනේ කාර්යය අවසන් වූ පසු එහි ඉතුරු කර ගොස් ඇති අගයයි.\r\n\r\nඑනම් Interger විචල්‍යයක් තැනූ සැනින් එහි අගය 0 වන්නේ නැත. අපට කැමති අවස්ථාව මෙම විචල්‍යයන්ගේ අගයන් වෙනස් කළ හැකියි. Float සඳහා දශම සංඛ්‍යා තැන්පත් කරන අතර එහි සෑමවිටම දශම ස්ථාන 6ක් සහිතව අදාළ අගය ගබඩා වේ. Char සඳහා අක්ෂරයක් හෝ සංඛේතයක් ලබා දීමේදී තනි උඩු කොමා භාවි වේ.\r\n\r\nතවද const නම් Keyword මගින් තැනූ විචල්‍යයක අගය එය නිර්මානය කරන අවස්ථාවේ ලබාදිය යුතු අතර, එම අගය පසුවට වෙනස් කිරීමට නොහැක.\r\n\r\n"},{"name":"include","code":"#include <stdio.h>  // for standard input and output\r\n#include <math.h>   // for mathematical operations\r\n#include <time.h>   // for deal with time calculations\r\n#include <string.h>   // for deal with strings [charactor arrays]\r\n\r\nvoid main() {\r\n\t/*\r\n\t\tprintf();\r\n\t\tscanf();\r\n\t\t\r\n\t\tfopen();\r\n\t\tfprintf();\r\n\t\tfscanf();\r\n\t\tfclose();\r\n\r\n\t\tstrlen();\r\n\t\tstrcmp();\r\n\t\tstrcat();\r\n\r\n\t*/\r\n}","info":"#include මගින් අප වැඩසටහනට අවශ්‍ය බෙහෝ Functions එක් කර ගැනීම සිදු වේ. Functions පිළිබඳ පසුව විස්තරාත්මකව ඉදිරිපත් කර ඇත. එම කොටස්වලදී මෙය වැඩි වශයෙන් තේරුම් ගැනීමට හැකි වනු ඇත.\r\n\r\n"},{"name":"printf_1_begin","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tprintf(\"Hello World!\");\r\n}","info":"මෙම C වැඩසටහන් ක්‍රියාත්මක වන්නේ Windows Command Prompt එක මතය. එබැවින් Command Prompt එක මත අපට අවශ්‍ය ආදාන හා ප්‍රතිදාන සිදු කරනු ලැබේ. අපට අවශ්‍ය කිසියම් ආකාරයෙක වැකියක් දර්ශනය කිරීමට printf() නම් Function එක භාවිත කෙරේ. මෙහිදී printf() යන්න stdio.h නම් Librabry File එක තුල හඳුන්වා දී ඇති බැවින් එම ගොනුව මෙම වැඩසටහනට ඇතුලත් කළ යුතුය. printf() තුළ අපට අවශ්‍ය වැකිය ද්විත්ව උඩුකොමා සහිතව දක්වනු ලැබේ.\r\n\r\n"},{"name":"printf_2_escape_charactor","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\t\\n = New Line\r\n\t\\t = Tab Space\r\n\t\\' = Single Quote\r\n\t\\\" = Double Quote\r\n\t\\\\ = Backslash\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tprintf(\"Text 1\\nText 2\\n\");\r\n\tprintf(\"Text 1\\tText 2\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\'Single Quotes\\'\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\\"Double Quotes\\\"\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\\\ is a Backslash\");\r\n\tprintf(\"\\n\");\r\n\tprintf(\"\\\\\\\\ are two Backslashes\");\r\n}","info":"සාමාන්‍යෙයන් printf() එකක් තුළ සෘජුවම දැක්විය නොහැකි ස්ඛේත පවතී. නිදසුනක් ලෙස ද්විත්ව උඩුකොමාව ගත හැකිය. මක් නිසාදයත් අපට දර්ශනය කිරීමට අවශ්‍ය වැකිය දෙපස ද්විත්ව උඩු කොමා ඇති බැවින් එහි මැදට නැවත ද්විත්ව උඩුකොමාවක් එකවර යෙදිය නොහැක. මේ නිසා භාවිතා වන Escape Charactor එකක් ලෙස පසු ඇල ඉර (\\) හැඳින්විය හැකිය. ඇල ඉරක් සමග පසුවට යෙදෙන අක්ෂරය හෝ සංඛේතය මත එම ස්ථානයේ නිරූපණය විය යුතු ස්ඛේතය දර්ශනය වේ.\r\n\r\nMain Function එකට ඉහළීන් ඇති Comment එක තුළ අදාළ ආකාර දක්වා ඇත.\r\n\r\nනිදසුනක් ලෙස printf() දෙකක් පහළට ලබා දුන්නේ යැයි කියා එම වැකි දෙක වෙන වෙනම පේලි දෙකක දර්ශනය නොවේ. එසේ වීමට නම් New Line Charactor එකක් යෙදීමට අවශ්‍යය. එය ‍\\n මගින් අපට අවශ්‍ය තැනට ලබා දිය යුතුය. එමෙන්ම පසු ඇල ඉරි දෙකක් එක ලඟ යෙදීමෙන් එක පසු ඇල ඉරක් දර්ශනය කළ හැක.\r\n\r\n"},{"name":"printf_3_variables","code":"#include <stdio.h>\r\n\r\n/*\r\n\t%d = integers\r\n\t%f = floats\r\n\t%c = charactors\r\n\t%s = strings\r\n\t%p = pointers\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\tprintf(\"value of x is %d\\n\", x);\r\n\r\n\tfloat y = 25.2;\r\n\tprintf(\"value of y is %f\\n\", y);\r\n\r\n\tchar z = 'w';\r\n\tprintf(\"value of z is %c\\n\", z);\r\n\r\n\tprintf(\"x = %d, y = %f, z = %c\\n\", x, y, z);\r\n}","info":"\r\nprintf() මගින් අපට අවශ්‍ය වැකි පමණක් නොව බොහෝ විට විචල්‍ය අගයන් පවා දැක්වීමට සිදු වේ. ඒ සඳහා අප % නම් Escape Charactor එක භාවිතා කරයි. මෙහිදී printf() වෙත දෙන වැකියේ විචල්‍ය අගය දැක්විය යුතු තැනට % ලකුණ සහිතව විචල්‍ය වර්ගයට අනුරූප අක්ෂරය දෙනු ලැබේ. එම අක්ෂර ලැයිස්තුව නිදසුනේ Comment කර ඇත. පසුව printf() හි අප දෙන වැකිය අවසානයේ කොමා දක්වමින් අදාළ විචල්‍ය පිළීවෙලට ලබා දීම සිදු කළ යුතුය. මෙදිහිදී ලබා දෙන පිලිවෙල වැදගත් වේ. එක printf() එකක් තුළ එක විචල්‍ය නිරූපණයක් පමණක් නොව අපට අවශ්‍ය තරම් නිරූපණය කිරීම කළ හැක."},{"name":"printf_4_values","code":"#include <stdio.h>\r\n\r\n/*\r\n\t%d = integers\r\n\t%f = floats\r\n\t%c = characters\r\n\t%s = strings\r\n\t%p = pointers\r\n*/\r\n\r\nvoid main() {\r\n\tprintf(\"My name is %s.\\n\", \"Kamal\");\r\n\tprintf(\"I am %d years old.\\n\", 22);\r\n\tprintf(\"My average is %f%\\n\", 83.4);\r\n\tprintf(\"My blood group is %c Positive\\n\", 'O');\r\n}","info":"printf() වෙත අපට විචල්‍ය ලබා දී ඒවායේ අගයන් නිරූපණය කළ හැකි මෙන්ම විචල්‍ය පමණක් නොව අගයක් හෝ ලබා දිය හැකිය. මෙ බැලූ බැල්මට වැදගත්කමක් නැති දෙයක් යැයි සිතුනත්, පසුවට මෙහි භාවිත අවස්ථා ඔබට වැටහෙනු ඇත. මෙහිදීද ඔබ ලබා දෙන අගයේ දත්ත වර්ගයට අනුරූපව Escape Charactor එක සමග එන අක්ෂරය ලබා දිය යුතුය.\r\n"},{"name":"printf_5_align_and_spacing_1","code":"#include <stdio.h>\r\n\r\n/*\r\n\t%{align_size}.{float_sort / part_length}d\r\n*/\r\n\r\nvoid main() {\r\n\tfloat a = 65.797;  //  65.700000\r\n\tfloat b = 723.633; // 723.630000\r\n\tfloat c = 12.5224; //  12.522000\r\n\tfloat d = 8.4567;  //   8.450000\r\n\r\n\t// common represent\r\n\tprintf(\"%f\\n%f\\n%f\\n%f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// aligned to right with 12 blocks\r\n\tprintf(\"%12f\\n%12f\\n%12f\\n%12f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// aligned to left with 12 blocks\r\n\tprintf(\"%-12f\\n%-12f\\n%-12f\\n%-12f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// sorting to 2 floating points\r\n\tprintf(\"%.2f\\n%.2f\\n%.2f\\n%.2f\\n\", a, b, c, d);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// aligned to right with 12 blocks and sorting to 2 floating points\r\n\tprintf(\"%12.2f\\n%12.2f\\n%12.2f\\n%12.2f\\n\", a, b, c, d);\r\n}","info":"printf() හි දක්වන වැකිය අපට අවශ්‍ය පරිදි එකෙල්ල කිරීම හෝ ඉඩ සහිතව දැක්වීම කළ හැක. මෙම නිදසුනේ ආකාරයට දශම සංඛ්‍යා 4ක් සැළකු විට ඒවායේ සෑම විටම දශම ස්ථාන 6ක් පවතින නිසාත්, පූර්ණ අගය නිරූපණයට යන ඉඩ වෙනස් නිසාත් සාමාන්‍ය ලෙස පහළින් පහළට දැක්වීමේදී දශම අගයන් ස්ථාන එක පෙළට නොදැක්වේ. නමුත් අපට අවශය ලෙස ඒවා වමට හෝ දකුණට එකෙල්ල කිරීම කළ හැකිය. ඒ සඳහා අදාළ Escape Charactor එක හා එය සමග එන අක්ෂරය අතරට + හෝ - නිඛිල අගයක් ලබා දේ. එමගින් + නම් එම නිඛිල අගයට අදාළ අක්ෂර ස්ථාන ගනනක් තුළ විචල්‍ය අගය දකුණට එකෙල්ල වීම හෝ -  නම් එම අගය වමට එකෙල්ල වීම සිදු වේ. වගුවක් නිර්මාණය කිරීමේදී මෙ ක්‍රමය බොහෝ සෙයින් උපකාරී වේ.\r\n\r\nඑමෙන්ම දශමය අගයක් නම් අප එකෙල්ල කිරීමට ලබා දෙන නිඛිල අගය සමග දශම අගයක් ලබා දුන්නහොත් එම දශමය අගය නිරූපණය වන්නේ එම ලබා දුන් සංඛ්‍යාවට සරිලන දශම ස්ථාන ගණනකට වැටයීමෙන් පසුවය.\r\n\r\n"},{"name":"printf_5_align_and_spacing_2","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tprintf(\"%-15s %8s %8s\\n\", \"Name\", \"Age\", \"AVG\");\r\n\r\n\tprintf(\"%-15s %8d %8.2f\\n\", \"Kamal\", 22, 65.2);\r\n\tprintf(\"%-15s %8d %8.2f\\n\", \"Sunimal\", 23, 82.13);\r\n\tprintf(\"%-15s %8d %8.2f\\n\", \"Kodithuwakku\", 20, 4.53);\r\n}","info":"\r\nමෙහි දැක්වෙන්නේ කලින් කතා කළ එකෙල්ල කිරීම වගුවක් නිරූපණයට භාවිත කළ ඇති ආකාරයයි. මෙහිදී පැවසිය යුතු තව දෙයක් වන්නේ Escape Charactor මගින් නිරූපණය කළ හැකිවන්නේ විචල්‍යයක් පමණක් නොව සෘජුවම අගයක් හෝ වැකියක් වුවත් ලබා දිය හැකිද බවයි."},{"name":"scanf_1_begin","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x;\r\n\r\n\tprintf(\"garbage value of x      = %d\\n\", x); // display value of x [garbage value]\r\n\r\n\tprintf(\"enter a new value  to x : \");\r\n\tscanf(\"%d\", &x); // &x = memory block address of variable x\r\n\r\n\tprintf(\"new value of x          = %d\\n\", x); // display the new value of x\r\n}","info":"මෙහිදී අප සළකනුයේ පරිහීලකයෙන් වැඩසටහනට කිසියම් අගයක් ආදානය කරන ආකාරයයි. මේ සඳහා scanf() Function එක භාවිත වේ. මෙසේ ආදානය කරගන්නා අයගන් විචල්‍යවල ගබඩා කිරීම සිදු වේ. \r\n\r\nමෙහි එන නිදසුනේ x නමැති නිඛිල විචල්‍යයක් මුලින්ම තනා ඇත. පසුව එහි Garbage Value එක කුමක්දැයි දර්ශනය කර ඇත. නැවතද printf() එකක් යොදා ඇත්තේ x සඳහා අගයක් ලබා දෙන ලෙස පරිහීලකයට දැක්වීමටයි. මෙය දත්ත ආදානයට අත්‍යාවශ්‍ය නොවුනත් වැඩසටහන තුළ දත්තයක් ආදානය කළ යුතු අවස්ථාවක එය පරිහීලකට හඳුනාගැනීමට දැක්වීම සුදුසු වේ.\r\n\r\nඉන් පසුව ඇති scanf() මගින් දත්ත ආදානය කරගනු ඇත. මෙහිදී ද්විත්ව උඩුකොමා තුළ ආදානය කරගන්නා දත්තයේ වර්ගයට අදාළ Escape Charactor සහ අක්ෂරය යෙදිය යුතුය. පසුව කොමො සහිතව එම ආදානය කරගන්නා අගය තැම්පත් කළ යුතු විචල්‍යයේ RAM Memory Location Address එක ලබා දිය යුතුය. එය නිරූපණය වනුයේ විචල්‍ය නම සමග ඊට මුලට & ලකුණ යෙදීමෙනුයි.\r\n\r\nපසුව නැවත printf() මගින් නව විචල්‍ය අගය පෙන්වා දී තිබේ.\r\n"},{"name":"scanf_2_multiple_inputs","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x, y, z;\r\n\r\n\tprintf(\"Enter value for x : \");\r\n\tscanf(\"%d\", &x);\r\n\tprintf(\"Enter value for y : \");\r\n\tscanf(\"%d\", &y);\r\n\tprintf(\"Enter value for z : \");\r\n\tscanf(\"%d\", &z);\r\n\r\n\tfloat a, b, c;\r\n\r\n\tprintf(\"Enter float values for a, b, c : \");\r\n\tscanf(\"%f %f %f\", &a, &b, &c);\r\n\r\n\tint k;\r\n\tchar l;\r\n\tfloat m;\r\n\r\n\tprintf(\"Enter values for k, l, m : \");\r\n\tscanf(\"%d %c %f\", &k, &l, &m);\r\n\r\n}","info":"scanf() මගින් එක් වරකට එක් ආදානයක් පමණක් නොව ආදාන කිහිපයක් වුවත් ලබා ගත හැක. මෙහිදීද printf() විචල්‍ය ලබා දුන් පිලිවෙල ගැන සැලකිලිමත් වූ මෙන් විචල්‍ය ලිපින ලබා දීමේ පිලිවෙල පිලිබඳවද සැලකිලිමත් විය යුතුය.\r\n\r\nමෙම නිදසුනේ මුලින්ම වෙන වෙනම විචල්‍ය අගයන් ආදානය කරගන්නා ආකාරය දක්වා ඇති අතර පසුව දශමය ආගයන් තුනකුත්, ඉන් පසුව දත්ත ආකාර තුනෙන්ම එකවර ආදාන ලබාගන්නා ආකාරය දක්වා ඇත.\r\n\r\n"},{"name":"operators_1","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 25; // value assigning\r\n\tint y = 10;\r\n\tint z;\r\n\r\n\tz = x + y; // addition\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tz = x - y; // substraction\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tz = x * y; // multipication\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tz = x / y; // division [no floats]\r\n\tprintf(\"z = %d\\n\", z);\r\n\r\n\tfloat w;\r\n\tw = x / y; // division [no floats -> int/int]\r\n\tprintf(\"z = %f\\n\", w);\r\n\r\n\tw = x / (float)y; // division [float -> int/float, float/int, float/float]\r\n\tprintf(\"z = %f\\n\", w);\r\n\r\n\tz = x % y; // remain\r\n\tprintf(\"z = %d\\n\", z);\r\n}","info":"C භාෂාවේදීද අනෙක් පරිගණක භාෂා වෙල මෙන් ගණතකර්ම සිදු කිරීමේ සංඛේත භාවිත වේ. එකතු කිරීම සඳහා + ලකුණත්, අඩු කිරීමට - ලකුණත්, ගුණ කිරීමට * ලකුණත්, බෙදීම සඳහා / ලකුණත් භාවිත වේ. නිඛිල දෙකක් හෝ, නිඛිල විචල්‍ය දෙකක් බෙදීමේදී එහි බෙදුන අගයේ දශම අගයන් ඉතිරිවන්නේ නැත. දශම සහිත බෙදීමකට නම් බෙදීම සිදු කරන අගයන් එකක් හෝ අවම වශයෙන් දශමය විය යුතුය. එමෙන්ම එම බෙදූ අගය දශම සහිතව ගබඩා කිරීමට නම් දශම විචල්‍යයක් භාවිතා කිරීමද අත්‍යාවශ්‍යය.\r\n\r\nතවද % කර්මය මගින් යම් නිඛිල අගයන් දෙකක් බෙදුන පසු ලැබෙන ඉතිරිය ලබා දේ.\r\n\r\n"},{"name":"operators_2","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx = x + 1;\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx += 1; // x = x + 1\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx++; // x += 1\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx--; // x -= 1\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx -= 2; // x = x - 2\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx *= 5; // x = x * 5\r\n\tprintf(\"x = %d\\n\", x);\r\n\r\n\tx /= 10; // x = x / 10\r\n\tprintf(\"x = %d\\n\", x);\r\n}","info":"මෙම කොටසේ දැක්වෙන්නේ අමතර ගණිතකර්ම කිහිපයකි. මේවා බොහෝවිට ගණත කර්මවලට වඩා භාවිත වන්නේ විශේෂ කේත සඳහාය (For, While Loops වැනි). x = x + 1 මගින් x ට අගයක් එකතු වන අතර එය x += 1 ලෙසද ලිවිය හැක. මෙමගින් කේතය කුඩා වන අතර පහසුවෙන් හඳුනාගත හැකි වනු ඇත. අනෙකුත් මූලික ගණත කර්මද මේ ආකාරයෙන් සාරාංශ කළ හැක. x++ මගින් සිදු වනුයේ සෑම විටම xහි අගය එකකින් වැඩි වීමයි.  එමෙන්ම x-- මගින් xහි අගය එකකින් අඩු වේ.\r\n\r\n\r\n"},{"name":"operators_3","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\t++x;\toperator runs before the line execution\r\n\tx++;\toperator runs after the line execution\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\tint y = 3;\r\n\r\n\tprintf(\"X = %d, y = %d\\n\", x, y);\r\n\r\n\t// before x = 10, y = 3\r\n\tprintf(\"line 1 = %d\\n\", (x++ * y)); // while x = 10, y = 3\r\n\t// after x = 11, y = 3\r\n\r\n\tprintf(\"X = %d, y = %d\\n\", x, y);\r\n\r\n\t// before x = 11, y = 3\r\n\tprintf(\"line 1 = %d\\n\", (++x * y)); // while x = 12, y = 3\r\n\t// after x = 12, y = 3\r\n\r\n\tprintf(\"X = %d, y = %d\\n\", x, y);\r\n}","info":"පෙර සඳහන් කළ x++ යන්න ++x ලෙසද ලිවිය හැක. එමගින් සිදු වන්නේද x හි අගය එකකින් වැඩි වීමම වුවත් එම අවස්තා දෙකෙහි වෙනසක් ඇත. x++ යන්න කිසියම් කේත පේලියක තිබේ නම්, x හි අගය 1කින් වැඩි වනුයේ අදාළ පේලිය ධාවනය වීමෙන් අනතුරුවය. එනම් එම කේත පේලියේ ගණනය කිරීමකට ගනුයේ x හි අගය එකකින් වැඩි වීමට පෙර අගයයි.\r\n\r\nනමුත් ++x යන්න කේත පේලියක තිබුනහොත් එම පේලිය ධාවනය වන්නට පෙර x හි අගය 1කින් වැඩි වේ.\r\nx-- සහ --x යන්නද ඒ ආකාරයේද වේ.\r\n\r\n\r\n"},{"name":"operators_4","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\t>\t\tgrater than\r\n\t<\t\tless than\r\n\t==\t\tequal\r\n\t>=\t\tgrater than or equal\r\n\t<=\t\tless than or equal\r\n\r\n\t1 = true\r\n\t0 = false\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint x = 10;\r\n\tint y = 5;\r\n\tint z = 10;\r\n\r\n\tprintf(\"x > y is %d\\n\", x > y);\r\n\tprintf(\"x < y is %d\\n\", x < y);\r\n\tprintf(\"x == y is %d\\n\", x == y);\r\n\tprintf(\"x == z is %d\\n\", x == z);\r\n\tprintf(\"x >= y is %d\\n\", x >= y);\r\n\tprintf(\"x <= y is %d\\n\", x <= y);\r\n}","info":"තවද අගයන් දෙකක් සැසඳීමටද ගණිත කර්ම කිහිපයක් පිවතී. මෙම කර්මවල ප්‍රතිදානය 1 හෝ 0 ලෙස ලැබේ. එනම් 1 යනු අදාළ සැසඳීම සත්‍ය සහ 0 යනු අසත්‍ය ලෙස ලැබේ.\r\n\r\n< සහ > මගින් අසමානතාවය සහ  == මගින් සමානද යන්නත් >= සහ <= මගින් විශාල හෝ සමාන සහ කුඩා හෝ සමාන බව දැක්වේ. තවද != මගින් අසමානද යන්නත් දැක්වේ.\r\n\r\n"},{"name":"if_else","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint x = 5;\r\n\tint y = 10;\r\n\r\n\tif(x==5) {\r\n\t\tprintf(\"x is equal to 5\\n\");\r\n\t}\r\n\r\n\tif(x>y) {\r\n\t\tprintf(\"x is larger than y\\n\");\r\n\t}\r\n\telse {\r\n\t\tprintf(\"x is not larger than y\\n\");\r\n\t}\r\n\r\n\tif(x>y) {\r\n\t\tprintf(\"x is larger than y\\n\");\r\n\t}\r\n\telse if(x<y) {\r\n\t\tprintf(\"x is less than y\\n\");\r\n\t}\r\n\telse {\r\n\t\tprintf(\"x is equal to y\\n\");\r\n\t}\r\n}","info":"කලින් සඳහන් කළ සැසඳීමකින් එම සැසඳීම සත්‍ය නම් යමක් කිරීමට හෝ එසේ නොමැතිව අසත්‍ය නම් වෙනත් යමක් සිදු වීමට සැලැස්විය හැකිය. ඒ සඳහා if කේතය භාවිතා වේ. if() තුළ ඇති ප්‍රකාශය සත්‍ය නම් ඒ සමගම ඇති {} සඟල වරහන තුළ ඇති කේත ක්‍රියාත්මක වේ. එම ප්‍රකාශය අවශ්‍ය නම් else කේත සමග ඇති සඟල වරහනේ කේත ක්‍රියාත්මක වේ.\r\n\r\nමෙම නිදසුනේ පළමු if කේතය එවැනි එකකි. එහි කේත බෙදීම් ඇත්තේ if සහ else ලෙස සමණි. නමුත් else if පදය මගින් අතිරේක ප්‍රකාශද ලබා දිය හැකිය එවිට එකින් එක ප්‍රකාශ පහළට සළකැ පැමිණෙන අතර සත්‍යවන ප්‍රකාශයට අදාළ කේත කොටස් ධාවනය වී ඉවත් වේ.\r\n\r\n"},{"name":"cases_1","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar x = 'C';\r\n\r\n\tswitch(x) {\r\n\t\tcase 'A':\r\n\t\t\tprintf(\"Your Grade is A\\n\");\r\n\t\t\tbreak;\r\n\t\tcase 'B':\r\n\t\t\tprintf(\"Your Grade is B\\n\");\r\n\t\t\tbreak;\r\n\t\tcase 'C':\r\n\t\t\tprintf(\"Your Grade is C\\n\");\r\n\t\t\tbreak;\r\n\t\tcase 'D':\r\n\t\t\tprintf(\"Your Grade is D\\n\");\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tprintf(\"Your Grade is Low\\n\");\r\n\t\t\tbreak;\r\n\t}\r\n}","info":"cases එකක් මගින් සිදු වනුයේ කිසියම් විචල්‍යය යම් අගයන් කිහිපයකට වරින් වර සමාන වේදැයි බැලීමයි. එසේ සමාන වේ නම් එය තුළ ඇති කේත ධාවනය වේ. මෙයත් බැලූ බැල්මය else if කේතයකට සමාන වේ යැයි සිතුනත් එසේ නොවේ. මෙහිදී එක් අවස්තාවක හෝ අදාළ සසඳන අගය හෝ අක්ෂරය සමාන වුවහොත් ඒ තුළ ඇති කේත ධාවනය වී break කේතයක් හමුවන තුරුම පහළට ගමන් කරයි. මෙම නිදසුනේ සියලුම අවස්ථා සඳහා break යොදා ඇති නිසා මෙහිදී සිදු වන්නේ else if එකක ආකාරයමයි."},{"name":"cases_2","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tchar x = 'A';\r\n\r\n\tswitch(x) {\r\n\t\tcase 'A':\r\n\t\t\tprintf(\"Your Grade is A\\n\");\r\n\t\tcase 'B':\r\n\t\t\tprintf(\"Your Grade is B\\n\");\r\n\t\tcase 'C':\r\n\t\t\tprintf(\"Your Grade is C\\n\");\r\n\t\tcase 'D':\r\n\t\t\tprintf(\"Your Grade is D\\n\");\r\n\t\tdefault:\r\n\t\t\tprintf(\"Your Grade is Low\\n\");\r\n\t}\r\n}","info":"මෙම නිදසුන සැළකුවහොත් මෙහි කිසිම අවස්තාවක break නොමැති බැවින් x හි අගය අදාළ එකයම් හෝ case එකකට සමාන වූ විට එහි තුළ ඇති කේතය ක්‍රියාත්මක වී ඉන් ඉදිරියට ඇති ඉතිරි සියලුම cases තුළ ඇති කේතන ක්‍රියාත්මක වේ."},{"name":"loop_1_while","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\twhile(condition) {\r\n\t\tlooping statements;\r\n\t}\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint i = 0;\r\n\twhile(i < 10) {\r\n\t\tprintf(\"i = %d\\n\", i);\r\n\t\ti++;\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// 1 = true\r\n\t// 0 = false\r\n\tint x = 1;\r\n\tint n = 5;\r\n\twhile(x) {\r\n\t\tprintf(\"n = %d\\n\", n);\r\n\t\tn += 10;\r\n\t\tif(n>80) {x = 0;}\r\n\t}\r\n}","info":"යම් කිසි කේත කොටසක් කිහිප වරක් පුනරාවර්තනය කිරීමට Loops භාවිතා වේ. මෙහි දැක්වෙන්නේ While නම් වූ ඉන් එක වර්ගයකි. while() තුලට කිසියම් සැසඳීම් ප්‍රකාශයක් ලබා දිය යුතුය. එවිට එම ්‍රපකාශය සත්‍යවන තුරු while සමග ඇති {} සඟල වරහන් තුල ඇති කේත ක්‍රියාත්මක වේ.\r\n\r\nපළමු while loop එකෙහි සැසඳීම කර ඇත්තේ i යන්න 10ට අඩු වන තුරු ලෙසයි. ආරම්භයේදී x අගය 0 නිසා while කේතය ක්‍රියාත්මක වේ. while තුලදී x හි අගය එකින් එක වැඩි වන නිසා අවසානයේ x හි අගය 10 වූ විට while කේතය නවතී. ඒ වන තාක් i හි අගය පිලිවෙලින් පහළට දර්ශනය වේ.\r\n\r\nදෙවන නිදසුනේ ඇත්තේ x පදය සත්‍ය වන තුරු එම දෙවන while කෙතය ක්‍රියාත්මක වේ. while තුල ඇති if කේතය මගින් n හි අගය 80ට වඩා විශාල වූ විට x අගය 0 බවට පත් කරන අතර ඒ අවස්තාවේදී while කේතය නවතී.\r\n\r\n"},{"name":"loop_2_do_while","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\tdo {\r\n\t\tlooping statements;\r\n\t} while(condition);\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint i = 0;\r\n\tdo {\r\n\t\tprintf(\"i = %d\\n\", i);\r\n\t\ti++;\r\n\t} while(i < 10);\r\n}","info":"Do While Loop යන්නත් While Loop ආකාරයේම වන අතර එහි සැකැස්මද Main Function එකට ඉහළින් දක්වා ඇත.\r\n\r\n"},{"name":"loop_3_for","code":"#include <stdio.h>\r\n\r\n/*\r\n\r\n\tfor([start];[condition];[increasement]) {\r\n\t\tlooping statements;\r\n\t}\r\n\r\n*/\r\n\r\nvoid main() {\r\n\tint i; // pre-declared variable\r\n\tfor(i = 0; i < 10; i++) {\r\n\t\tprintf(\"i = %d\\n\", i);\r\n\t}\r\n\r\n\tprintf(\"Value of i after the loop = %d\\n\", i);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// variable declaration for only the loop\r\n\tfor(int r = 0; r < 10; r++) {\r\n\t\tprintf(\"r = %d\\n\", r);\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\t// for-loop with charactors\r\n\tfor(char c = 'A'; c < 'K'; c++) {\r\n\t\tprintf(\"c = %c\\n\", c);\r\n\t}\r\n}","info":"For Loop ආකාරය පෙර Loop ආකාර දෙකෙන්ම තරමක් වෙනස් වේ. මෙහිදී for() තුල ප්‍රධාන කොටස් තුනක් ලබා දිය යුතු අතර මුලින්ම අප භාවිත කරන විචල්‍යෙය් මුල් අවස්තාව, දෙවනුව සැසඳීම් පදය සහ තෙවනුව එක් වරක් කේත ක්‍රියාක්මක වූ පසු අදාල විචල්‍යයට කළ යුතු වෙනස්කම දක්වයි.\r\n\r\nපළමු for loop එකට පිටින් i විචල්‍යක් තනා ඇති අතර අපසුව for() තුල i හි අගය 0 කර තිබේ. පසුව එම i හි අගය 10ට අඩුවන තාක් වරින් වර i හි අගය එකින් එක වැඩි කරමින් ඒ තුළ ඇතු කේත ධාවනය කෙර්.\r\n\r\nඅවසානයේ printf() එකක් මගින් i හි අගය දර්ශනය කර ඇත. මෙහිදී i හි අගය 10 ලෙස දැක්වෙනු ඇත.\r\n\r\nනමුත් දෙවන loop එකෙහි ඇති r විචල්‍යය භාවිත තළ හැකි වන්නේ එම loop එක තුළ පමණි. එම කේත ක්‍රියාත්මක වූ පසු r විචල්‍යය නැති වී යයි.\r\n\r\nතෙවන කේතයේ ඇත්තේ අක්ෂර මගින් for loop ලියා ඇති ආකාරයයි. නමුත් මෙහිද සිදු වන්නේ නිඛිල මගින් වන ක්‍රියාවලියක්ම වේ. මක් නිසාදයත් A යනු ASCII මගින් 65 වන අතර B, C, D යන අක්ෂර 66, 67, 68 ලෙස ගැනේ.\r\nමෙම loop එක මගින් පහළට A සිට J දක්වා ප්‍රතිදානය වේ.\r\n\r\n"},{"name":"arrays_1_display_in_for_loop","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint g[10] = {45, 13, 12, 24, 63, 53, 54, 73, 36, 73};\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tprintf(\"g[%d] = %d\\n\", i, g[i]);\r\n\t}\r\n}","info":"For Loop එකක් මගින් ආරාවක අගයන් වරින් වර ප්‍රතිදානය මෙහිදී සිදු කර ඇත. i නම් විචල්‍යය 0 සිට 10ට අඩු වන තාක් For Loop තුල ක්‍රියාත්මක වන නිසා වරින් වර g[i] සැළකූ විට එක් දත්තයෙන් දත්තය ආරාවෙන් කියවිය හැකිය.\r\n\r\n"},{"name":"arrays_1_begin","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint l[10]; // array declaration with gabage values\r\n\tint g[5] = {45, 13, -12, 24, 63}; // array declaration with assiging values at same time\r\n\r\n\tprintf(\"l[%d] = %d\\n\", 0, l[0]); // printing the first item of array\r\n\tprintf(\"l[%d] = %d\\n\", 1, l[1]);\r\n\tprintf(\"l[%d] = %d\\n\", 2, l[2]);\r\n\tprintf(\"l[%d] = %d\\n\", 3, l[3]);\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tl[0] = 10; // assigning value to an item of the array\r\n\tprintf(\"l[%d] = %d\\n\", 0, l[0]); // printing the first item of array\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tprintf(\"g[%d] = %d\\n\", 0, g[0]);\r\n\tprintf(\"g[%d] = %d\\n\", 1, g[1]);\r\n\tprintf(\"g[%d] = %d\\n\", 2, g[2]);\r\n\tprintf(\"g[%d] = %d\\n\", 3, g[3]);\r\n\tprintf(\"g[%d] = %d\\n\", 4, g[4]);\r\n}","info":"එක් විචල්‍යයක් තුල ගබඩා කල හැක්කේ එක් අගයක් පමණක් වේ. එ නමුත් ආරාවන් (Arrays) මගින් එකම දත්ත ආකාරයක අගයන් රාශියක් ගබඩා කළ හැකිය. මෙය සාමාන්‍ය විචල්‍ය නමක් ලෙසම දක්වා අගය කොට වරහන් [] යොදා හඳුන්වා දෙයි. මුලින්ම එම කොටු වරහන තුළ අදාල ආරාවේ විශාලත්වය නෙහොත් ගබා කළ හැකි දත්ත ගනන ලබා දේ. එය සුව වෙනස් කළ නොහැක.\r\n\r\nමෙම නිදසුනේ int l[10]මගින් නිඛිල දත්ත 10ක් ගබඩා කිරීමට ආරාවක් සෑදේ. මුල් අවස්තාවේ කිසිඳු අගයන් ලබා දීමක් කර නොමැති නිසා එම ආරාවේ සෑම අගයක්ම Garbage Value එකක් වේ. නමුත් g[5] ආරාව සෑදූ සැන්නිම් {} වරහන් මගින් කොමා සමග සියලු දත්ත ලබා දී ඇති නිසා එහි Gabage Value ඉතුරු නොවේ.\r\n\r\nඑම ගබඩා කර දත්ත නැවත ලබා ගැනීමටද කොටු වරහන යෙදිය යුතුය. එහිදී l[0] යනු පළමු දත්තය වේ. l[1] යනු දෙවන දත්තය වේ. ඒ ආකාරයට දත්ත සංඛ්‍යාවට එකක් අඩු වන තෙක්ම දත්ත පවතී. ඒ ආකාරයට දත්ත කියවීම සහ දත්ත අලුත් කිරීම කළ හැකිය."},{"name":"arrays_2_assign_in_for_loop","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint g[10];\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tprintf(\"g[%d] = %d\\n\", i, g[i]);\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tscanf(\"%d\", &g[i]);\r\n\t}\r\n\t\r\n\tprintf(\"\\n\");\r\n\r\n\tfor(int i = 0; i < 10; i++) {\r\n\t\tprintf(\"g[%d] = %d\\n\", i, g[i]);\r\n\t}\r\n}","info":"මෙහිදී ආරාවක සෑම අගයක්ම පිලිවෙලින් ආදානය කිරීමට for loop එකක් භාවිත කර තිබේ.\r\n\r\nමුලින්ම ඇති loop එක මගින් ආරාවේ Garbage Value සියල්ල ප්‍රතිදානය කරන අතර දත්ත ආදාරනය කර ඇත්තේ දෙවෙනි loop එක මගිනි. මෙහිදී ආරාවේ අදාළ ස්ථානයක ඇති දත්තය සැළකීමට g[i] ලෙස ගෙන ඇති අතර &g[i] මගින් එම දත්තය සඳහා RAM එකෙහි ගෙන ඇති Memory Block එකෙහි ලිපිනය ලැබේ. තුන් වන loop එක මගින් ආදානය කල පසු ආරාවේ අගයන් පවතින ආකාරය ප්‍රතිදානය කර ඇත."},{"name":"arrays_3_display_as_table_1","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint sid[8] = {196, 197, 198, 199, 200, 201, 202, 203};\r\n\tint age[8] = {22, 23, 21, 23, 22, 21, 20, 20};\r\n\tfloat avg[8] = {67.4, 65.92, 54.8, 94.73, 63.9, 65.35, 84.64, 70.0};\r\n\r\n\tprintf(\"%5s %5s %8s\\n\", \"ID\", \"Age\", \"Avarage\");\r\n\r\n\tfor(int i = 0; i < 8; i++) {\r\n\t\tprintf(\"%5d %5d %8.2f\\n\", sid[i], age[i], avg[i]);\r\n\t}\r\n}","info":"මෙහිදී සිදු කර ඇත්තේ ආරාවන් තුනක දත්ත වගුවක් ලෙස ප්‍රතිදානය කර තිබීමයි. මෙවැනි අවස්තා වල printf() වල ඇති එකෙල්ල කිරීමේ ක්‍රමයේ වැදගත් කම වැටහෙනු ඇත."},{"name":"arrays_4_display_as_table_2","code":"#include <stdio.h>\r\n\r\nvoid main() {\r\n\tint sid[5] = {196, 197, 198, 199, 200};\r\n\tint m_1[5] = {76, 84, 68, 37, 55};\r\n\tint m_2[5] = {97, 75, 74, 86, 68};\r\n\r\n\tprintf(\"%8s %10s %10s %12s\\n\", \"ID\", \"Marks_1\", \"Marks_2\", \"Avarage\");\r\n\r\n\tfor(int i = 0; i < 5; i++) {\r\n\t\tfloat avg = (m_1[i] + m_2[i]) / 2.0 ;\r\n\t\tprintf(\"%8d %10d %10d %12.2f\\n\", sid[i], m_1[i], m_2[i], avg);\r\n\t}\r\n}","info":"මෙම නිදසුනේ ප්‍රතිදානය කර ඇති වගුවේ අවසාන තීරය තුළ විශයන් දෙකක සාමාන්‍ය ගණනය කර දක්වා ඇත. එය ගණනය කර ඇත්තේද වරින් වර for loop එක තුලය. "}],"HTML":[{"name":"first_web","code":"<html>\r\n<head>\r\n<title>This is web title</title>\r\n</head>\r\n<body>\r\nThis is web body\r\n</body>\r\n</html>","info":"වෙබ් අඩවියක් කේතකරණය කිරීමේ දී අනිවාර්යයෙන් ලිවිය යුතු ටැගය &lt;html&gt; වේ. එම ටැගයේ අවසානය &lt;/html&gt; මගින් පෙන්වයි. කේත ගොනුවක අනිවාර්යය පළමු ටැගය &lt;html&gt; වන අතර අවසානම ටැගය &lt;/html&gt; වේ. ඉතිරි සියළුම කේත ලියවෙන්නේ &lt;html&gt; සහ &lt;/html&gt; අතරය. මෙම ටැගය යෙදූ විට මෙය HTML කේත ගොනුවක් බව වෙබ් බ්‍රව්සරය හඳුනා ගනී. අනු ප්‍රධාන ටැග දෙක &lt;head&gt; සහ &lt;body&gt; වේ. &lt;head&gt; මගින් වෙබ් පිටුවේ හිස (Tab Title) ද &lt;body&gt; මගින් වෙබ් පිටුවේ බඳ නිරූපණය කරයි. එම ටැග දෙක පිළිවෙලින් &lt;/head&gt; සහ &lt;/body&gt; ලෙස අවසන් කෙරේ.&lt; head&gt; සහ &lt;/head&gt; අතර &lt;title&gt; සහ &lt;/title&gt; ද ඒ දෙක අතර මැද වෙබ් හිසේ පිටු නාමයද යොදනු ලැබේ. ඉතිරි සියළුම කේත ලියනු ලබන්නේ &lt;body&gt; සහ &lt;/body&gt; අතර ය. ඔබ සකසන සෑම වෙබ් කේත ගොනුවකම මෙම කේත අනිවාර්යය වේ. ඉදිරියට කතා කිරීමට බලාපොරොත්තු වන්නේ &lt;body&gt; සහ &lt;/body&gt; අතර ලියන කේත වේ. එනම් වාක්‍ය, ඡායා රූප, වගු, වීඩියෝ පට ආදීයයි."},{"name":"headings","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body>\r\n<h1>The Heading Text</h1>\r\n<h2 align=\"center\">Center Heading</h2>\r\n</body>\r\n</html>","info":"HTML භාෂාවෙහි වෙබ් අඩවිවලට අදාළ තොරතුරු, මාතෘකා හා උප මාතෘකා වශයෙන් වෙන් වෙන්ව දැක්වීම සඳහා අකුරු ප්‍රමාණ ආකාර 6ක් ඊට අදාළ කේතයන් ලියමින් නිර්මාණය කල හැක. ඒවා නම් &lt;h1&gt; සිට &lt;h6&gt; දක්වා කේතයන්ය. එම සියලුම කේතයන් වැසිය යුතු අතර &lt;h1&gt; සිට &lt;h6&gt; දක්වා යන විට අක්ෂර ක්‍රමයෙන් කුඩා මාතෘකා බවට පත්වේ. &lt;h1&gt; ප්‍රධාන මාතෘකා සඳහා යොදා ගන්නා අතර &lt;h2&gt; සිට &lt;h6&gt; දක්වා උප මාතෘකා සඳහා යෙදා ගනී. තවද මෙම මාතෘකා තද කලු අකුරෙන් (Bold) නිරූපණය වේ. මෙවැනි අක්ෂර සහිත කේත සඳහා පෙළගැස්වීම (Align) දක්වන කේතයක්ද තිබේ. එනම් &lt;h1&gt; ආරම්භක කේතය තුළ align=\"\" යෙදීමයි. නිදසුනක් ලෙස &lt;h1 align=\"center\"&gt; යෙදූ විට මාතෘකාව වෙබ් පිටුවෙහි මැදින් දිස්වේ. &lt;h1 align=\"right\"&gt; යෙදූ විට මාතෘකාව වෙබ් පිටුවෙහි දකුණින් දිස්වේ. එය මාතෘකා ආම්භක කේතය එලෙස වෙනස් කළද අවසාන කිරීමේ කේතය සැම විටම &lt;/h1&gt; ම වේ. &lt;h1&gt; කේතය &lt;/h1&gt; ලෙස අවසන් වන අතර &lt;h2&gt; කේතය &lt;/h2&gt; ලෙස අවසන් වේ. අනෙකුත් මාතෘකා කේතද අදාළ ලෙස අවසන් කළ යුතුය."},{"name":"line_spacing","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body>\r\nMy Text One<br>My Text Two\r\n</body>\r\n</html>","info":"වෙබ් පිටුවක එක් පේලියකින් අලුත් පේලියකට යාම සඳහා (Line Brake) උප කේතය යෙදා ගනී. මෙහි දී පේලි අතර හිස් පේලියක් නොතබා ඊලඟ පේලියට ඉතිරි කොටස ගෙන ගොස් ලියනය කෙරෙයි. මෙය වැසීමට අවශ්‍ය නොවන කේතයකි. එහෙයින් එය 'Empty Tag' එකක් ලෙසද හඳුන්වයි. නෝට් පෑඩයක ඔබ සකසන කේත අතර හෝ යම් වාක්‍ය අතර වෙන් කිරීමක දී යතුරු පුවරුවේ Enter යතුර භාවිත කළ ද වෙබ් අඩවිය බ්‍රව්සරයේ දිස් වීමේ දී එම වෙන් කිරීම ගනු නොලැබේ. ඒ නිසා එම වෙන් විය යුතු තැනට <br> ලෙස යෙදිය යුතුය."},{"name":"pharagraphs","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body>\r\n<p>My Text One</p>\r\n<p align=\"right\">My Text Two</p>\r\n</body>\r\n</html>","info":"ඡේද වෙන් කිරීම හෝ පේලි දෙකක් අතර වැඩිපුර රූලක ඉඩක් තැබීම සඳහා කේතය යෙදා ගනී. ඡේද පෙල ගැස්වීම සඳහා ද මෙම කේතය භාවිතා කල හැක. &lt;p&gt; ලෙස අරඹන මෙම කේතය &lt;/p&gt; ලෙස අවසන් වේ. මෙම කේත දෙක අතර අදාළ ඡේදය ලියනය කළ යුතුය. මෙහිද මාතෘකා ආකාරයටම පෙළගැස්වීම් කළ හැක. එවා පහත පරිදිය. \r\n<ul type=\"square\">\r\n<li>&lt;p align=\"center\"&gt; මගින් ඡේදය මැදට පෙළගස්වයි.\r\n<li>&lt;p align=\"right\"&gt; මගින් ඡේදය දකුණට පෙළගස්වයි.\r\n<li>&lt;p align=\"justify\"&gt; මගින් ඡේදය දෙපසට පෙළගස්වයි. (පොත්වල ඡේද පිහිටන ආකාරයට)\r\n</ul>\r\n"},{"name":"font_styling_1","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body>\r\n<font color=\"green\">This is Green Color text</font>\r\n<font size=\"7\" face=\"Consolas\">Large Text</font>\r\n</body>\r\n</html>","info":"වෙබ් පිටුවක අක්ෂර යෙදීමකදී එහි විවිධ වෙනස්කම් සිදු කළ හැක. එනම් අකුරුවල වර්ණය, ප්‍රමාණය, වර්ගය වැනි වෙනස්කම් වේ. එම වෙනස්කම් සිදුකරන කේතය &lt;font&gt; යන කේතයයි. එම අක්ෂර වෙනස්කම්වල අවසානය &lt;/font&gt; මගින් දක්වයි. ඒ අතර ලියැවෙන අක්ෂරවල අදාළ වෙනස්කම් සිදු වේ. පහත දැක්වෙන්නේ එම &lt;font&gt; කේතයට අදාළ අනු උපදේශ කේත කිහිපයකි.\r\n<ul type=square>\r\n<li>&lt;font size=\"5\"&gt; මගින් අකුරේ ප්‍රමාණය වෙනස් කරයි. (1 සිට 7 දක්වා ප්‍රමාණ යෙදිය හැක)\r\n<li>&lt;font face=\"Arial\"&gt; මගින් අකුරේ වර්ගය වෙනස් කරයි. (ඔබේ පරිගණකයේ ඇතුළත් ඕනෑම Font එකක නමක් යෙදිය හැක)\r\n<li>&lt;font color=\"red\"&gt; මගින් අකුරේ වර්ණය වෙනස් කරයි. (මූලික වර්ණ පමණක් වචන යෙදීමෙන් භාවිතා කළ හැක. අනෙක් වර්ණ ෂඩ් දශමය ආකාරයට යෙදිය යුතුය.)\r\n</ul>\r\nවර්ණ යෙදීම සඳහා භාවිතා කරනු ලබන color කේතය භාෂාවට අනුව u අක්ෂරය ඉවත් වේ. එබැවින් color යන්න යෙදේ. "},{"name":"font_styling_2","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body>\r\n<big>Big Letters</big><br>\r\n<small>small Letters</small><br>\r\nNone-Superscript Letters<sup>Superscript Letters</sup><br>\r\nNone-Subscript Letters<sub>Subscript Letters</sub><br>\r\n<cite>Cite Letters</cite><br>\r\n<code>Code Letters</code><br>\r\n<em>EM Letters</em><br>\r\n<kbd>KBD Letters</kbd><br>\r\n<blink>Blink Letters</blink>\r\n</body>\r\n</html>","info":"\r\n\r\nමීට අමතරව අක්ෂරවල වෙනස්කම් සිදුකළ හැකි කේත කිහිපයක්ද ඇත. පහත දැක්වෙන්නේ ඒවායින් කිහිපයකි. මෙම කේත &lt;font&gt; සම්බන්ධයක් නැති තනි තනි කේත වේ. ආරම්භක හා අවසාන කේතය අතර ලිවූ අක්ෂරවලට අදාළ වෙනස්කම් සිදුවේ.\r\n<table border=\"1\">\r\n<tr><td>&lt;b&gt;___&lt;/b&gt;</td>\r\n<td>අකුරු ඝනකම් කර දක්වයි.</td></tr>\r\n<tr><td>&lt;u&gt;___&lt;/u&gt;</td>\r\n<td>අකුරු යටින් රේඛා කර දක්වයි.</td></tr>\r\n<tr><td>&lt;big&gt;___&lt;/big&gt;</td>\r\n<td>අකුරුවල ප්‍රමාණය විශාල කර දක්වයි.</td></tr>\r\n<tr><td>&lt;small&gt;___&lt;/small&gt;</td>\r\n<td>අකුරුවල ප්‍රමාණය කුඩා කර දක්වයි.</td></tr>\r\n<tr><td>&lt;sup&gt;___&lt;/sup&gt;</td>\r\n<td>Superscript ආකාරයට පෙන්වයි.</td></tr>\r\n<tr><td>&lt;sub&gt;___&lt;/sub&gt;</td>\r\n<td>Subscript ආකාරයට පෙන්වයි.</td></tr>\r\n<tr><td>&lt;cite&gt;___&lt;/cite&gt;</td>\r\n<td>අකුරු තරමක් ලොකුවට Italic කර දක්වයි.</td></tr>\r\n<tr><td>&lt;code&gt;___&lt;/code&gt;</td>\r\n<td>කේත ගොනුවක අක්ෂර දිස්වන ආකාරයට දක්වයි.</td></tr>\r\n<tr><td>&lt;em&gt;___&lt;/em&gt;</td>\r\n<td>අකුරු Italic කර දක්වයි.</td></tr>\r\n<tr><td>&lt;kbd&gt;___&lt;/kbd&gt;</td>\r\n<td>ටයිප්රයිටරයක දක්නට ලැබෙන ආකාරයට අක්ෂර දක්වයි.</td></tr>\r\n<tr><td>&lt;blink&gt;___&lt;/blink&gt;</td>\r\n<td>අක්ෂර නිවි නිවී දැල්වෙන අයුරින් දිස්වෙයි. </td></tr>\r\n</table>"},{"name":"colors","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body bgcolor=\"#FF0000\">\r\n<font color=\"#B87333\">Cooper color text</font>\r\n</body>\r\n</html>","info":"වෙබ් පිටුවක වර්ණ සඳහා ෂඩ් දශමය ආකරය භාවිතා කරයි. RGB වර්ණ අනුපාතය ෂඩ් දශමය සංඛ්‍යාවලට පරිවර්ථනය කර ‍වර්ණ කේතය ලබා ගැනේ. නිදසුනක් ලෙස රතු වර්ණයේ RGB වර්ණ අනුපාතය 225,000,000 වේ. එය ෂඩ් දශමය ආකාරයෙන් FF,00,00 වේ. එනම් රතු වර්ණයේ කේතය FF0000 වේ. එම වර්ණය යෙදීමේ දී # සළකුණ අගට යොදා ලියනය කළ යුතුය. (#FF0000) පහත දැක්වෙන්නේ එවැනි වර්ණ කිහිපයකි.\r\n\r\n<br><br>\r\n<table border=\"1\">\r\n<tr><td width=\"100\">White</td><td>#FFFFFF</td><td width=\"100\">Red</td><td>#FF0000</td></tr>\r\n<tr><td>Lvory</td><td>#FFFFF0</td><td>Yellow</td><td>#FFFF00</td></tr>\r\n<tr><td>Silver</td><td>#E6E8FA</td><td>Green</td><td>#00FF00</td></tr>\r\n<tr><td>Sky Blue</td><td>#3299CC</td><td>Orange</td><td>#FF7F00</td></tr>\r\n<tr><td>Blue</td><td>#0000FF</td><td>Gold</td><td>#CD7F32</td></tr>\r\n<tr><td>Purple</td><td>#871F78</td><td>Cooper</td><td>#B87333</td></tr>\r\n<tr><td>Magenta</td><td>#FF00FF</td><td>Gray</td><td>#808080</td></tr>\r\n<tr><td>Neon Pink</td><td>#FF6EC7</td><td>Black</td><td>#000000</td></tr>\r\n</table>"},{"name":"horizontal_line","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body>\r\n<hr color=\"red\"><br>\r\n<hr color=\"#FF00FF\" size=\"12\"><br>\r\n<hr color=\"blue\" width=\"60%\"><br>\r\n<hr color=\"black\" width=\"60%\" align=\"right\"><br>\r\n</body>\r\n</html>","info":"වෙබ් පිටුවක බාහිර ස්වරූපය අලංකාර කරගැනීම සඳහා තිරස් රේඛා යොදා ගනීයි. (Horizontal Rules) මේ සඳහා යොදා ගනු ලබන උපදේශ කේතය වනුයේ &lt;hr&gt; කේතයයි. මෙම උපදේශ කේතය නිදහස් ටැගයක් වන අතර එය අවසාන කිරීමට අවශ්‍ය නොවේ. මෙම තිරස් රේඛාව මගින් වෙබ් පිටුවෙහි කොටස් වෙන් කර දැක්වීමට ද හැකිය. මෙම තිරස් රේඛා තව දුරටත් අලංකාරව යොදා ගැනීම සඳහා අනු උපදේශ කේත 4ක් එක් කරගත හැක. \r\n<ol>\r\n<li>රේඛාවේ ඝනකම දැකිවීම: මේ සඳහා size අනුඋපදේශ කේතය යොදා ගනී.\r\n<li>රේඛාවේ දිග : මෙහි දී දිග දැක්වීම සඳහා width අනුඋපදේශ කේතය යොදා ගන්නා අතර මෙය ආකාර 2කින් දැක්විය හැක.\r\n<ul type=square>\r\n<li>රේඛාවේ දිග පික්සල් මගින් දැකිවීම: &lt;hr width=\"50\"&gt; \r\n<li>රේඛාවේ දිග පරිගණක තිරයේ වෙබ් පිටුව දිස්වන ප්‍රමාණයෙහි ප්‍රතිශකයක් ලෙස: &lt;hr width=\"50%\"&gt;\r\n</ul>\r\n<li>රේඛාවේ වර්ණය වෙනස් කිරීමට: &lt;hr color=\"#FF9900\"&gt;\r\nරේඛාවේ පෙළගැස්වීම වෙනස් කිරීමට: &lt;hr align=\"left\"&gt;\r\n</ol>\r\n\r\n"},{"name":"lists","code":"<html>\r\n<head>\r\n<title>This Is Web Title</title>\r\n</head>\r\n<body>\r\n<dl>\r\n<dt>Title One\r\n<dd>Title One Description.\r\n<dt>Title Two\r\n<dd>Title Two Description.\r\n</dl>\r\n</body>\r\n</html>","info":"වෙබ් අඩවි සැකසීමේ දී තොරතුරු වාර්තා කිරීම සඳහා ලැයිස්තු සකස් කිරීමට සිදු වේ. මෙම ලැයිස්තු සකස් කිරීමේ දී ප්‍රධාන ආකාර තුනක් යොදා ගත හැක.\r\n<ol>\r\n<li>අංක සහිත ලැයිස්තු (Ordered List) \r\n<li>අංක රහිත ලැයිස්තු (Unordered List) \r\n<li>විස්තර සහිත ලැයිස්තු (Definition List) \r\n</ol>\r\n\r\n\r\n<h5>අංක සහිත ලැයිස්තු (Ordered List)</h5>\r\nඅංක සහිත ලැයිස්තු &lt;ol&gt; උපදේශ කේතය මගින් ආරම්භ කෙරෙන අතර ලැයිස්තුවේ සෑම අයිතමයක්ම &lt;li&gt; උපදේශ කේතයෙන් යෙදිය යුතුය. එලෙසම අවසානයේ &lt;/ol&gt; කේතයෙන් ලැයිස්තුව අවසන් කළ යුතුය. මෙහි දී 1, 2, 3 ලෙස අංක සඳහන් වන අතර එම ක්‍රමය වෙනස් කිරීමට අවශ්‍ය නම් පහත කේතය යොදා ගත හැක. \r\n<p>&lt;ol type=\"1\" strat=\"3\"&gt;</p>\r\nමෙහි දී 1, 2, 3 ආකාරයටම ලැයිස්තු අංකනය වන අතර ලැයිස්තුව ආරම්භ වන්නේ 3 ඉලක්කමේ සිටය. ඉලක්කම් වෙනුවට රෝම අංක හෝ ඉංග්‍රීසි හෝඩියේ අක්ෂර යෙදීමට පහත ලෙස භාවිත වේ. \r\n<ul type=square>\r\n<li>&lt;ol type=\"A\" strat=\"A\"&gt; ලෙස යෙදූ විට ඉංග්‍රීසි අක්ෂරවලින් ගැනෙන අතර ආරම්භය A සිට වේ.\r\n<li>&lt;ol type=\"i\" strat=\"i\"&gt; ලෙස යෙදූ විට රෝම ඉලක්කම්වලින් ගැනෙන අතර ආරම්භය i සිට වේ.\r\n</ul>\r\n\r\n<h5>අංක රහිත ලැයිස්තු (Unordered List)</h5>\r\nලැයිස්තු සකස් කිරීමේ දී අංක හෝ අක්ෂර භාවිත නොකරන අවස්ථාවල දී ඒ වෙනුවට සංඛේත භාවිත කරයි. එ වැනි අවස්ථාවල දී &lt;ul&gt; උපදේශ කේතය යෙදා ගැනෙන අතර අවසානයේ දී &lt;/ul&gt; යෙදනු ලැබේ. සාමාන්‍යෙයන් යෙදාගත් විට තිතක හැඩයෙන් යුතු ලැයිස්තු සළකුණු වේ. එම සළකුණ පහත ආකාරයට මාරු කිරීමද කළ හැක.\r\n\r\n<br><br>\r\n\r\n<ul type=square>\r\n<li>&lt;ul type=\"cricle\"&gt; ලෙස යෙදූ විට සළකුණ වෘත්තයක් වේ.\r\n<li>&lt;ul type=\"square\"&gt; ලෙස යෙදූ විට සළකුණ චතුරස්‍රයක් වේ.\r\n</ul>\r\n\r\n<h5>විස්තර සහිත ලැයිස්තු (Definition List)</h5>\r\nයම් කිසි වචනයන් පිළිබඳ විස්තර දැක්වීමේ දී මෙය යෙදා ගනී. එය &lt;dl&gt; උපදේශ කේතය මගින් ආරම්භ වී අවසන් කිරීමට &lt;/dl&gt; ලෙස යොදනු ලබයි. විග්‍රහ කිරීමේ දී හෝ විස්තර කිරීමේ දී මගින් ආරම්භ කර විග්‍රහ කරන වචනය හෝ මාතෘකාව සඳහා &lt;dt&gt; ද විග්‍රහය සඳහා &lt;dd&gt; ද යෙදා ගනී. \r\n\r\n\r\n"},{"name":"tables_1","code":"<table border=\"1\">\r\n<tr>\r\n<th>Head 1</th>\r\n<th>Head 2</th>\r\n</tr>\r\n<tr>\r\n<td>Data 1</td>\r\n<td>Data 2</td>\r\n</tr>\r\n<tr>\r\n<td>Data 3</td>\r\n<td>Data 4</td>\r\n</tr>\r\n</table>\r\n","info":"වෙබ් පිටු සකස් කිරීමේ දී වගු යොදා ගැනීමට සිදු වේ. වගු නිර්මාණය කිරීමේ දී &lt;table&gt; යන උපදේශ කේතය භාවිත කරන අතර එම වගුව අවසන් කිරීම සඳහා &lt;/table&gt; යෙදා ගනී. සෑම පේළියක් හඳුන්වාදීම සඳහා &lt;tr&gt; (Table Row) උපදේශ කේතය යෙදා ගත යුතුය. සෑම කොෂයක් සඳහාම, එනම් දත්ත වෙන වෙනම ඇතුළු කිරීම සඳහා &lt;td&gt; (Table Data) උපදේශ කේතය යෙදා ගත යුතුය. අවශ්‍ය වූ විට දී වගුව සඳහා මාතෘකා යෙදීමට &lt;td&gt; (Table Heading) උපදේශ කේතය යෙදා ගැනේ. වගුවේ දාරයේ ප්‍රමාණය සඳහා &lt;table&gt; කේතය තුළ &lt;table border=\"1\"&gt; ලෙස ප්‍රමාණය දැක්විය යුතුය.\r\n\r\n<table border=\"1\">\r\n<tr>\r\n<th>Head 1</th>\r\n<th>Head 2</th>\r\n</tr>\r\n<tr>\r\n<td>Data 1</td>\r\n<td>Data 2</td>\r\n</tr>\r\n<tr>\r\n<td>Data 3</td>\r\n<td>Data 4</td>\r\n</tr>\r\n</table>\r\n\r\n"},{"name":"tables_2","code":"<table border=\"1\">\r\n<tr>\r\n<th>Head 1</th>\r\n<th>Head 2</th>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\">Data 1</td>\r\n</tr>\r\n<tr>\r\n<td rowspan=\"2\">Data 2</td>\r\n<td>Data 3</td>\r\n</tr>\r\n<tr>\r\n<td>Data 4</td>\r\n</tr>\r\n</table>","info":"තව ද වගු ඇතුළත් කිරීමේ දී කෝෂ (දත්ත ඇත්ළත් වන කවුළු) එක්නෙකට බද්ධ කොට නිර්මාණය කිරීමට සිදු වේ. එවැනි අවස්තා වල දී යම් ක්‍රමවේදයක් අනුගමනය කළ හැක.&lt; td colspan=\"2\"&gt; මගින් හරහට කෝෂ දෙකක් බද්ධ වේ.&lt;td rawspan=\"2\"&gt; මගින් පහළට කෝෂ දෙකක් බද්ධ වේ.\r\n\r\n<table border=\"1\">\r\n<tr>\r\n<th>Head 1</th>\r\n<th>Head 2</th>\r\n</tr>\r\n<tr>\r\n<td colspan=\"2\">Data 1</td>\r\n</tr>\r\n<tr>\r\n<td rowspan=\"2\">Data 2</td>\r\n<td>Data 3</td>\r\n</tr>\r\n<tr>\r\n<td>Data 4</td>\r\n</tr>\r\n</table>\r\n"},{"name":"tables_3","code":"","info":"<h5>වගුවෙහි දාරය සැකසීම:</h5>\r\nඕනෑම වගුවක් සඳහා ඒ වටා රේඛා හෝ දාර දැක්විය යුතුය. මේ සඳහා යොදා ගන්නා අගයේ ප්‍රමාණය Pixel වලින් යෙදේ. \r\n<p>&lt;table border=\"3\"&gt;</p>\r\n\r\n<h5>වගුව තිරයහි මධ්‍යගත කිරීම:</h5>\r\nමේ සඳහා වගුවට අදාළ සියලු කේත දෙපසට &lt; center&gt;...&lt;/center&gt; ලෙස යෙදිය යුතුය. නැතහොත් &lt;table&gt; කේතයට &lt;table align=\"center\"&gt; දිය යුතුය. \r\n\r\n<h5>කොෂයක් හා දත්ත අතර ඉඩ සැකසීම:</h5>\r\nමෙහි දී එක් කොෂයක් තුළ ඇති දත්ත සහ එම කෝෂයේ දාරය අතර දුර නිෂ්චිත ප්‍රමණයක් ලබා දිය හැක. \r\n<p>&lt;table cellpadding=\"5\"&gt;</p>\r\n\r\n<h5>කොෂ අතර ඉඩ සැකසීම:</h5>\r\nමේ සඳහා පහත කේතය යොදා ගනී. \r\n<p>&lt;table cellspacing=\"5\"&gt;</p>\r\n\r\n<h5>වගුවෙහි මුලු දිග සැකසීම:</h5>\r\nවගුවෙහි මුලු දිග සැකසීම ක්‍රම දෙකකට සිදු කළ හැක.\r\n<ol>\r\n<li>වගුවෙහි මුලු දිග Pixel වලින් දැක්වීම: &lt; table width=\"70\"&gt; \r\n<li>වගුවෙහි මුලු දිග වෙබ් කවුළුවෙහි ප්‍රතිශතයක් ලෙස දැකිවීම දැක්වීම: &lt; table width=\"70%\"&gt;\r\n</ol>\r\n\r\n<h5>වගුවෙහි දත්ත පෙළගැස්වීම:</h5>\r\nවගුවක දත්ත පෙළගැස්වීම සඳහා ආකාර දෙකක් භාවිත වේ. \r\n<ol>\r\n<li>පේළියක ඇති දත්ත පෙළගැස්වීම.\r\nමෙය ආකාර 3කි.\r\n<ul type=sqaure>\r\n<li>Center</li>\r\n<li>Right</li>\r\n<li>Left</li>\r\n</ul>\r\n<p>&lt;tr align=''center''&gt;</p>\r\n<li>තීරුවත් තුළ ඇති දත්ත පෙළගැස්වීම.\r\nමෙය ආකාර 3කි. \r\n<ul type=sqaure>\r\n<li>Top</li>\r\n<li>Middle</li>\r\n<li>Bottom</li>\r\n</ul>\r\n<p>&lt;tr valign=''bottom''&gt;</p>\r\n\r\n\r\n"},{"name":"insert_images","code":"","info":"වෙබ් පිටුවලට ඡායාරූප චිත්‍ර ඇතුලත් කිරීමට හැකිය. ඒ තුළින් වෙබ් පිටුවේ මූල්‍යමය හා ගුණාත්මක වටිනාකම වැඩි වී තිබේ. නමුත් වැඩියෙන් චිත්‍ර හො ඡායාරූප යෙදා ගැනීමෙන් එම තොරතුරු හුවමාරු කිරීමට වැඩි කාලයක් ගත විය හැක. වෙබ් පිටු සකස් කිරීම සඳහා භාවිතා කරනු ලබන චිත්‍ර හෝ ඡායාරූප පරිගණකවල තැම්පත් කර තැබීම සඳහා අනුමත කරගනු ලැබූ ප්‍රචලිත ආකාර 2කි. ඒවා නම් GIF (Graphics Interchange Format) සහ JPEG (Joint Photographic Expert Group) යන ඒවායි. \r\n<br><br>\r\nමෙලෙසම අවශ්‍ය චිත්‍ර තමන්ගේ පරිගණකයේ පමණක් නොව වෙනත් තැනක ඇති පරිගණකයක හෝ අන්තර්ජාලයට සම්බන්ධ වී ඇති ඕනෑම පරිගණකයක සිට ද ලබා ගත හැක. පරිගණකගත කරන ලද ඡායාරූපයක් වෙබ් පිටුවට ඇතුලත් කිරීම සඳහා යෙදා ගන්නා විට &lt;img&gt; නම් වූ උපදේශ කේතය භාවිත වේ. මෙහි දී උපදේශ කේතය යටතේ src නම් අනු උපදේශ කේතය ඔබ ඇතුලු කිරීමට බලාපොරොත්තු වන ඡායාරූපයෙහි නම හා එහි ගොනු දිගුව ආදේශ කළ යුතුය. අවසානයේ &lt;/img&gt; ලෙස කේතය වැසීම සිදු නොවේ.\r\n<br><br>\r\nනිදසුනක් ලෙස ඔබේ පරිගණකයේ එකම විවරයක් (Folder) තුළ ඔබ සකසා ඇති වෙබ් පිටුව හා Seegiriya.jpg නම් ඡායාරූපයක් ඇතැයි සිතන්න. එවිට වෙබ් පිටුවෙහි පහත පරිදි කේතයක් ලියූ විට එම ඡායාරූපය වෙබ් පිටුවේ දිස් වේ. \r\n<p>&lt;img src=\"Seegiriya.jpg\"&gt;</p>\r\n\r\nවෙබ් අඩවියක ඇති පින්තූරයක ලිපිනය මේ පරිදි යැයි සිතන්න. http://schoolnet.lk/science.jpg. එම ඡායාරූපය වෙබ් පිටුවේ දිස් වීමට පහත ලෙස කේත කළ යුතුය. \r\n<p>&lt;img src=\"http://schoolnet.lk/science.jpg\"&gt;</p>\r\n\r\n<p>&lt;img src=\"Seegiriya.jpg\" height=\"100\" width=\"200\"&gt; ආදී වශයෙන් යෙදීමෙන් එහි දිග පළල වෙනස් කළ හැක. </p>\r\n\r\n"},{"name":"insert_videos","code":"","info":"වෙබ් අඩවියකට වීඩියෝ පටයක් ඇතුළත් කිරීම එහි ගුණාත්මක බව වර්ධනය කරයි. පරිශීලකයාට වීඩියෝ පටයක් හරහා පහසුවෙන් තමාට අවශ්‍ය කරුණු ලබාගත හැක. එය ඡායාරූපයක් ඇතුළත් කරන ආකාරයේම සරළ කේත ක්‍රමයකි. වෙබ් පිටුව සෙව් කර ඇති ෆෝල්ඩරය තුළට අදාළ වීඩියෝ පටයද පිටපත් කරන්න. බොහෝවිට වීඩියෝ පටයේ ගොනු දිගුව .mp4 හෝ .flv යොදාගැනීම සිදුකරයි. &lt;embed&gt; යනු එහි ආරම්භක කේතය වන අතර එය &lt;/embed&gt; ලෙස අවසාන කරයි. &lt;embed&gt; යන කේතය තුළ අනු උපදේශ කේතයක් වන src මගින් වීඩියෝවේ නම ලබා දේ.&lt; embed&gt; හා &lt;/embed&gt; අතරට වීඩියෝවමට කැමති නමක් ලබාදිය හැක. වීඩියෝ පටය ධාවන නොවන අවස්ථාවේ දී හෝ වීඩියෝ පටයේ දෝශයක් නිසා ක්‍රියාතමක නොවන අවස්ථාවේ දී ඔය යෙදූ නම පමණක් හෝ ඒ වෙනුවට දිස්වේ. පහත නිදසුන දෙස බලන්න. \r\n\r\n<p>&lt;embed src=\"sample.mp4\"&gt;My Video&lt;/embed&gt;</p>\r\n\r\nමෙවැනි වීඩියෝපට වෙබ් අඩවියක ධාවන කිරීමේ දී වෙබ් ෆ්ලෑෂ් ධාවකයක් අවශ්‍ය වේ. Adobe Flash Player යනු එවැනි වැඩි දෙනෙක් භාවිතා කරනු ලබන ෆ්ලෑෂ් ධාවකයකි."}],"PHP":[{"name":"introduction","code":"<!doctype html>\r\n<head>\r\n<title>Web Title</title>\r\n</head>\r\n<body>\r\n&lt;?php // this is a php segment ?&gt;\r\n</body>\r\n</html>","info":"PHP යනු වෙබ් සේවාදායක පරිගණකයක් තුල ක්‍රියත්මක වන සේවාදායකයේ (Server) ක්‍රියාකාරීත්වය පාලනය කළ හැකි පරිගණක භාෂාවකි.\r\nPHP කේත ඛණ්ඩ HTML සමග ලිවීම සිදු කල හැකිය. නමුත් මෙම කේත කිසි විටකත් සේවාලාභී පරිගණක වෙත පැමිණෙන්නේ නැත. සිදු වන්නේ ඒවා සේවාදායක\r\nපරිගණකය තුල ක්‍රියාත්මක වී අදාළ පුතිදානය පමණක් සේවාලාභී පරිගණක වෙත පැමිණීම පමණි. මේ නිසා වෙබ් අඩවියක කේත වෙබ් පිරික්සුව මගින් විශ්ලේෂණය\r\nකිරීමේදී මෙම PHP කේත දැක ගැනීමට නොහැක.\r\n\r\nමෙහි දැක්වෙන &lt;?php ?&gt; යන කොටස PHP සඳහා වෙන් වූ කොටසකි. එම කෙත් ඛණ්ඩය තුළ ලියූ යමක් වේ නම් එය අයත් වන්නේ PHP කේතවලටය.\r\n\r\n<br><br>\r\n\r\nඑමෙන්ම PHP ගොනුවක් සාමාන්‍ය පරිගණකය‍ක ක්‍රියාත්මක වීම සඳහා Wampserver වැනි මෘදුකාංගයක් අවශ්‍ය වේ."},{"name":"echo_and_print","code":"<!doctype html>\r\n<head>\r\n<title>&lt;?php echo 'This is web title'; ?&gt;</title>\r\n</head>\r\n<body>\r\n&lt;?php print('This is web body'); ?&gt;\r\n</body>\r\n</html>","info":"සාමාන්‍ය වැකියක් වෙබ් අඩවියේ දර්ශනය කරන අයුරු සලකා බලමු. මෙහිදී echo සහ print() යන විධාන භාවිතා කරන අතර එයට ඉදිරියෙන් අපට අවශ්‍ය වැකිය හෝ විචල්‍ය\r\nලබා දිය හැකිය. මෙහිදී සෑම කේත පෙලක්ම අවසානයේ තිත් කොමාව (;) යෙදීම සිදු කළ යුතු වේ. නිදසුනේ පරිදි &lt;title&gt; සහ  &lt;body&gt;\r\nඅතරට PHP ඛණ්ඩ දෙකක් ඇතුලත් කර තිබේ. එම ඛණුඩ දෙක මගින් එම අදාල ස්ථානවල එම වැකි ප්‍රතිදානය සිදු වේ. එමෙන්ම echo කේතය සමග වරහනක් නොයෙදුනත් print විධානය ඉිදිරියෙන් ඇති වරහනක අදාළ ප්‍රතිදානය කරන වැකිය සඳහන් කල යුතුය."},{"name":"variable_types","code":"&lt;?php\r\n\r\n    $string_v_1 = 'sample text';\r\n    $string_v_2 = 'Line 1<br>Line 2';\r\n    $int_v_1    = 25;\r\n    $float_v_1  = 4.3;\r\n    $float_v_2  = 6.13;\r\n\r\n    echo $string_v_1 . '<br>';\r\n    echo $string_v_2 . '<br>';\r\n    echo $int_v_1 . '<br>';\r\n    echo $float_v_1 . '<br>';\r\n    echo $float_v_2 . '<br>';\r\n    echo ($float_v_1 + $float_v_2) . '<br>';\r\n\r\n?&gt;","info":"PHP තුළ විචල්‍ය භාවිතය වඩා පහසු වන්නේ මේ සඳහා විචල්‍ය දත්ත ස්වරූපය හඳුන්වාදීමක් සිදු නොකල යුතු නිසාවෙනි. PHP මගින් අප ලබා දෙන\r\nදත්තයට අනුව ස්වරූපය වටහා ගැනේ. එමෙන්ම විචල්‍යයක් තැනීමේදී සෑම විචල්‍යයක් මුලටම $ ලකුණ අනිවාර්ය වේ.\r\nතවද echo විධානය මගින් නිදසුනේ පරිදි විචල්‍ය අගයන් ප්‍රතිදානය කිරීම කළ හැකිය. නිදසුනේ දැත්වෙන ආකාරයට &lt;br&gt; කොටස් echo සමග\r\nයොදා ඇත්තේ පේලියෙන් පේලියට ප්‍රතිදාන වෙන් වී දිස් වීමටය. නැති නම් වෙබ් අඩවිය තුළ තනිලෙට මේවා දිස් වනු ඇත.\r\n\r\nතවද මෙසේ වැකි කිහිපයක් එකතු කිරීමේදී (ගණිතකර්ම නොව වැකි එකට සම්බන්ධ කිරීම) තිත (.) යෙදීම නිදසුනේ පරිදි සිදු කල හැකිය.\r\nවිචල්‍ය බෙදීම ගුණ කිරීම එකතු කිරීම අඩු කිරීම වැනි මූලික ගණිතකර්මද පහසුවෙන් PHP මගින් සිදු කල හැකිය."},{"name":"mathematical_operators","code":"&lt;?php \r\n\r\n    $a = 15;\r\n    $b = 20;\r\n\r\n    echo ($a + $b) . '<br>';\r\n    echo ($a - $b) . '<br>';\r\n    echo ($a * $b) . '<br>';\r\n    echo ($a / $b) . '<br>';\r\n    echo ($a % $b) . '<br>';\r\n\r\n    $a++;\r\n    $b--;\r\n\r\n    echo $a . '<br>';\r\n    echo $b . '<br>';\r\n\r\n ?&gt;","info":"ගණිත කර්ම ගැන සැළකීමේදී එකතු කිරීම, අඩු කිරීම, ගුණ කිරීම සහ බෙදීම යන ගණිත කර්ම සුපුරුදු පරිදි සිදු කළ හැකිය. තවද නිදසුනේ පරිදි බෙදීමේ ඉතිරිය සඳහා % සළකුණද භාවිත කළ හැකිය.\r\n\r\nඑමෙන්ම ++ හා -- ගණිතකර්ම මගින් විචල්‍ය අගයන් එකකින් ඉහළ දැමීම සහ පහළ දැමීම සිදු කළ හැකිය.\r\n\r\n<table border=\"1\">\r\n<tr>\r\n\t<th>ගණිතකර්මය</th>\r\n\t<th>සංඛේතය</th>\r\n\t<th>විස්තරය</th>\r\n</tr>\r\n<tr>\r\n\t<td>එකතු කිරීම</td>\r\n\t<td>+</td>\r\n\t<td>නිඛිල හෝ දශම දත්ත ආකාර සඳහා භාවිත කළ හැක</td>\r\n</tr>\r\n<tr>\r\n\t<td>අඩු කිරීම</td>\r\n\t<td>-</td>\r\n\t<td>නිඛිල හෝ දශම දත්ත ආකාර සඳහා භාවිත කළ හැක</td>\r\n</tr>\r\n<tr>\r\n\t<td>ගුණ කිරීම</td>\r\n\t<td>*</td>\r\n\t<td>නිඛිල හෝ දශම දත්ත ආකාර සඳහා භාවිත කළ හැක</td>\r\n</tr>\r\n<tr>\r\n\t<td>බෙදීම</td>\r\n\t<td>/</td>\r\n\t<td>නිඛිල හෝ දශම දත්ත ආකාර සඳහා භාවිත කළ හැක. නිඛිල දෙකක් බෙදීමේදී ප්‍රතිදානයේ දශම ඇතුලත් වේ.</td>\r\n</tr>\r\n<tr>\r\n\t<td>ඉතිරිය</td>\r\n\t<td>%</td>\r\n\t<td>නිඛිල සඳහා පමණි</td>\r\n</tr>\r\n</table>"},{"name":"arrays","code":"&lt;?php \r\n\r\n    $int_array = array(45, 35, 63, 53, 12);\r\n    $str_array = array(\"apples\", \"cats\", \"dogs\", 54);\r\n\r\n    echo $int_array[2] . \"<br>\";\r\n    echo $int_array[3] . \" \" . $str_array[0]  . \"<br>\";\r\n    echo $int_array[4] . \"<br>\";\r\n\r\n ?&gt;","info":"එක් විචල්‍යයකට තැම්පත් කළ හැක්කේ එක අගයක් පමණක් වුවත් ආරාවන් මගින් එසේ වූ අගයන් ගණනාවක් එකවර ගබඩා කිරීමේ\r\nහැකියාව ඇත. එමෙන්ම PHP ආරාවන්වල විශේෂත්වය වන්නේ එක් දත්ත ස්වරූපයක පමණක් නොව දත්ත ස්වරූප කිහිපයක දත්ත එකම ආරාවක\r\nතැම්පත් කිරීමට හැකි වීමයි. නිදසුනේ ආකාරයට දෙවන $str_array නම් ආරාවේ String ආකාරයේ මෙන්ම Integer ආකාරයේ\r\nදත්තයද ඇතුලත් වී ඇති අයුරු දක්වා ඇත.\r\n<br><br>\r\nඑමෙන්ම නම ආරාවක් තැනීමේදී ආරාවේ නම සහ සමාන කිරීමේ ලකුණට පසුව array යන කේතයද ඇතුලත් කළ යුතුය. ඉන් පසුව\r\nඅපට අවශ්‍ය දත්ත වරහනක් තුළ කොමා මගින් වෙන් කරමින් දැක්විය හැකිය.\r\n<br><br>\r\nපලමු echo ප්‍රතිදානයේ දැක්වෙන පරිදි ආරාවේ නම සමග කොටු වරහන යොදා අදාල අයිතමයේ පිහිටුම් අංකය මගින් එම දත්තය \r\nලබා ගත හැකිය. එම පිහිටුම් අගයන් 0 සිට ඉදිරියට ගැනේ. දෙවන echo කොටසේ දැක්වෙන පරිදි ආරාවන්වලින් ලබා ගත් දත්ත එකතු කර වාක්‍ය වැනි දෑ\r\nතැනීමට වුවද හැකියාව ඇත."},{"name":"loops","code":"&lt;?php \r\n\r\n    $i = 0;\r\n    do {\r\n        echo \"The number is \" . $i . \"<br>\";\r\n        $i++;\r\n    }\r\n    while($i < 10);\r\n\r\n\r\n    $i = 0;\r\n    while($i < 10) {\r\n        echo \"The number is \" . $i . \"<br>\";\r\n        $i++;\r\n    }\r\n\r\n\r\n    for($i=0; $i<10; $i++){\r\n        echo \"The number is \" . $i . \"<br>\";\r\n    }\r\n\r\n ?&gt;","info":"Loops මගින් එකම කේත කොටසක් හෝ කාර්යයක් කිහිප වතාවක් පුනරාවර්තිතව කිරීමේ හැකියව ඇත.\r\nප්‍රධාන වශයෙන් PHP හි Loop වර්ග 3ක් ඇති අතර ඒවා Do While, While සහ For ලෙස වෙන් කෙරේ.\r\n<br><br>\r\nනිදසුනේ එම Loop වර්ග තුන වෙන වෙනම පිලිවෙලින් දක්වා ඇත. පලමුව ඇති Do While මගින් $i ලෙස කලින් හැඳින්වූ විචල්‍යයක\r\nඅගය 10ට වඩා කුඩා වන තුරු (9 වන තුරු) නොනෙවත්වාම වැකියක් ප්‍රතිදානය සිදු කර අත. එිදී වරින් වර $i හි අගය ප්‍රතිදානය\r\nකර ඇති තර එම අගය දිවෙන්නේ 0 සිට 9 දක්වායි.\r\n<br><br>\r\nදෙවනියට ඇති While Loop එක මගින්ද කර අත්තේ එම කාර්යමය. එහිදී ඇති වෙනස වන්නේ අදාල පුනරාවර්ත කොන්දේසිය සියල්ලටම පෙර දක්වා\r\n තිබීමයි. Loop එකක් ක්‍රියාත්මක වන්නේ මෙම කොන්දේසිය සත්‍ය වන තුරු පමණක් නිසා $i හි අගය එකින් එක එකතු කරගෙන\r\nපැමිණීමේදී $i 10 වූ විට පුනරාවර්තනය නැවතීම සිදු වේ.\r\n<br><br>\r\nFor Loop හි ඇති විශේෂත්වය වන්නේ මෙහිදී කොන්දේසියට ගන්නා විචල්‍යය එය තුලම හඳුන්වා දීම සිදු කිරීමයි. බෙහෝ පරිගණක\r\nභාෂාවල මෙන්ම For Loop හි ආරම්භයේ ඇති වරහක තුළ ප්‍රධාන කොටස් තුනක් වන අතර එහි පලමු කොටස මගින් අදාල විචල්‍යෙය් මුල්\r\nපිහිටීමද, පසුව විචල්‍ය කොන්දේසිය සහ අවසානයේ වරින්වර විචල්‍යයේ අගය වෙනස් කල යුතු ආකාරය ලෙස තිත් කොමාව මගින් වෙන් කරමින්\r\nවිධාන තුනත් සැපයීම සිදු වේ. මෙම Loop එක මගින්ද සිදු වන්නේ කලින් ලෙසම අගයන් 0 සිට 9 දක්වා ප්‍රතිදානය වීමයි."},{"name":"file_read_and_write","code":"&lt;?php \r\n\r\n    $data = file_get_contents(\"sample_1.txt\") or die(\"ERROR: Cannot open the file\");\r\n    echo $data;\r\n\r\n    $file = fopen(\"sample_2.txt\",'w') or die(\"cant open file\");\r\n    fwrite($file, \"My_Text_Data\");\r\n    fclose($file);\r\n\r\n ?&gt;","info":"සාමාන්‍ය Text File එකක ඇති දත්ත කියවීම සහ ගොනුවක දත්ත ගබඩා කිරීම මෙම කොටසේ විස්තර කෙරේ.\r\nමෙම නිදසුනේ වෙන් වූ කොටස් දෙකෙන් දක්වා ඇත්තේ එම කාර්යයන් ද්විත්වයයි.\r\n<br><br>\r\nfile_get_contents විධානය මගින් එය සමග වූ වරහනක් තුල දත්ත කියවීමට අවශ්‍ය ගොනුවේ නම ලබා දේ. එමෙන්ම එය ඉදිරියෙන් දක්වා ඇති $data නම් වූ\r\nවිචල්‍ය තුළ අදාල ගොනුවෙන් කියවන දත්ත String ආකාරයෙන්  තැම්පත් වීම සිදු වේ. පසුව නිදසුනේ පරිදි echo විධානය මගින් එම දත්ත ප්‍රතිදානය කළ හැකිය.\r\nතවද එහි or කේතයට පසුව ඇති die යන කොටසින් සිදු වන්නේ යම් හෙයිකින් අදාළ ගොනුව කියවීමට නෙහැකි වී නම්, ඊට අදාළව ප්‍රතිදානය කළ යුතු දෝෂ පණිවුඩයයි.\r\n<br><br>\r\nගොනුවක දත්ත තැම්පත් කිරීමේදී fopen මගින් ගොනුව මුලින්ම විවෘත කරගෙන සිටිය යුතුය. එමෙන්ම එහිදී fopen සමග ඇති වරහනේ අදාළ ගොනුවේ නම සහ එය විවෘත කළ යුතු\r\nආකාරය 'w' නෙහොත් Write ලෙස දැක්විය යුතුය. එහිදීද දෝෂ පණිවුඩයක් ඉදිරියෙන් die මගින් දක්වා ඇත.\r\nපසුව fwrite විධානය මගින් අදාළ ගොනුව විවෘත කරගත් විචල්‍යය සහ අදාළ String ආකරයේ දත්ත ලබා දිය යුතුය. මෙහිදී විචල්‍යයක් වුවත් ලබා දිය හැකි අතර එමගින් විචල්‍යයක ඇති\r\nදත්ත වුවද ගොනුවක ගබඩා කල හැකි වේ. අවසානයේ fclose විධානය මගින් අදාළ ගොනුව වසා දැමිය යුතුය.\r\n<br><br>\r\nමෙහිදී දත්ත කිවන ගොනුව අදාළ PHP ගොනුව ඇති ෆෝල්ඩරය තුළම තිලිය යුතුවන්නේ ලබා දී ඇත්තේ ගොනුවේ නම පමණක් බැවිනි. ගොනුව තිබෙන්නේ වෙන යම් තැනක නම් ගොනුවට අදාල\r\nසම්පූර්ණ ලිපිනයම ලබා දිය යුතුය."},{"name":"get_and_post","code":"&lt;?php \r\n\r\n    $data_1 = $_GET['name'];\r\n    $data_2 = $_GET['age'];\r\n\r\n    echo $data_1 . '<br>';\r\n    echo $data_2 . '<br>';\r\n\r\n    if(isset($data_3)) {\r\n        $data_3 = $_GET['marks'];\r\n    \techo $data_3 . '<br>';\r\n    }\r\n\r\n    $data_4 = $_POST['message'];\r\n\r\n ?&gt;","info":"HTML මගින් ලියූ පෝරමයක (Form) දත්ත ලබා ගැනීමට $_GET සහ $_POST භාවිත කෙරේ.\r\nමෙහිදී පෝරමය සම්බන්ධ කර ඇත්තේ submit.php යන ගොනුවට නම්, අදාළ පෝරමය Submit කල පසු\r\nඑහි ලිපිනය (URL) submit.php?name=Deshan&age=23 ලෙස ඇතැයි සිතන්න. එවිට submit.php ගොනුව \r\nතුලින් අදාළ දත්ත දබා ගැනීමට නිදසුනේ පරිදි කේත කල යුතුය.\r\n<br><br>\r\nමෙහිදී $_GET විධානය සමග කොටු වරහනක් තුළ උඩු කොමා සහිතව අදාළ දත්තයේ නම ලබා දිය යුතුය.\r\nSubmit කල ලිපිනයක අදාළ දත්ත දැක්වෙනුයේ name=value&name=value&name=value ලෙසය. මේ නිසා\r\nඅදාල value එක ලබා ගැනීමට $_GET වෙත එහි නම ලබා දිය යුතුය. ඒ අනුව $_GET['name'] යන කේතය මගින්\r\n$data_1 විචල්‍ය තුල submit කල ලිපිනයේ ඇති නමද, $_GET['age'] යන කේතය මගින්\r\n$data_2 විචල්‍ය තුල submit කල ලිපිනයේ ඇති වයස යන අගයද ගබඩා වීම සිදු වේ.\r\nනමුත් යම් හෙයකින් මෙම ලිපිනයේ අදාළ නමින් දත්තයක් නොමැති නම් දෝශයක් ලැබිය හැකිය.\r\nමේ නිසා $_GET['marks'] දත්තය ලබාගෙන ඇති ආකාරයෙන් isset() මගින් අදාළ දත්තය ලිපිනය තුළ ඇත්\r\nදැයි පෙර පරික්ෂාවක් කල හැකිය.\r\n<br><br>\r\nතවද $_POST ආකාරය භාවිතා කරනුයේ ලිපිනයේ දත්ත දැක්වීමකින් තොරව දත්ත සම්ප්‍රේෂණය කරන ආකාරයෙන් දත්ත\r\nලබා ගැනීමටය. ඒ සඳහා HTML පෝරමයේ &lt;form action=\"submit.php\" method=\"post\"&gt ලෙස\r\nලබා දිය යුතුය. එවිට එම දත්ත ලිපිනයේ දැක්වීමකින් තොරව PHP වෙත සන්නිවේදනය කල හැකිය."},{"name":"cookies","code":"&lt;?php \r\n\r\n    if(isset($_COOKIE[\"username\"])) {\r\n        $cookie_data = $_COOKIE[\"username\"];\r\n    }\r\n\r\n    setcookie(\"username\", \"Deshan Nawanjana\", time() + (30*24*60*60));\r\n\r\n    setcookie(\"username\", \"\", time()-3600);\r\n\r\n ?&gt;","info":"Cookies යනු යම් ඔබේ වෙබ් අතිරික්සුවක් (Web Browser) තුළ වෙබ් අඩවියකට අදාලව ගබඩා කරන දත්ත වේ.\r\nනිදසුනක් ලෙස යම් වෙබ් අඩවියක ගිනුමකින් ඔබ දැනටමත් Log වී ඇත්නම් එලෙස Web Browser එකහෙි ඒ බව තොරතුරු\r\nගබඩා වනුයේ Cookies තුලය. වෙබ් අතිරික්සුවේ Cookies මකා දැමුවහොත් එසේ Log වී ඇති වෙබ් අඩවි වල සම්බන්ධතාව නැති වී යයි.\r\n<br><br>\r\nනිදසුනේ පරිදි Cookie එකක් කියවීමට $_COOKIE විධානය භාවිතා කළ හැකි අතර ඒ සමග අදාල Cookie එකෙහි නම ලබා දේ.\r\nඑමෙන්ම දෝශ නොමැති වීමට Cookie එක දැනට පවතීද යන්න isset() මගින් පෙර පරික්ෂාවක් කල හැකිය.\r\nමෙහිදී $cookie_data විචල්‍ය තුළ කියවූ Cookie දත්ත ගබඩා කර ගැනේ.\r\n<br><br>\r\nCookie තැනීම සහ මැකීම setcookie විධානය මගින් සිදු කල හැකි අතර එය තැනීමේදී දිරියෙන් ඇති\r\nවරහන තුල Cookie එකෙහි නම, Cookie එකෙහි අගය නොහොත් Value එක සහ එය කල් ඉකුත් වන වේලාව ලබා දේ.\r\ntime() මගින් දැන් වේලාව ලැබෙන් අතර දෙවන කොටසේ පරිදි time() + (30*24*60*60) ලෙස ලබා දීමෙන් දැන් වෙලාවේ සිට\r\nමාසයක කාලයක් (දවස් 30යි) මෙම Cookie එක පවතිනු ඇත.\r\n<br><br>\r\nතවද Cookie එක මැකීමට අදාළ Cookie එක තැනූ ආකාරයටම සිදු කරමින් කල් ඉකුත් වන දිනය දැන් වේලාවෙන් යම් කාලයක්\r\nඅඩු කර ලබා දීම සිදු කල හැකිය. එවිට එම Cookie එක මැකී යයි."}],"Python":[{"name":"first_Step","code":"a = 5\r\nb = 7\r\nprint(a + b)\r\nprint(\"abc\")\r\nprint(123)\r\na = 2 * 3\r\nb = 4\r\nc = b - a\r\nprint(c)","info":"Python භාෂාවේදී ඉතා පහසුවෙන් විචල්‍යවල දත්ත ස්වරූපයක් හඳුන්වා දීමකින් තොරව විචල්‍ය නිර්මාණය කළ හැක. මක්නිසාදයත් වැඩසටහන මගින්ම අදාළ දත්ත ස්වරූපය හඳුනාගන්නා බැවිනි. මෙහි ආරම්භයේ a හා b ලෙස විචල්‍ය දෙකක් තනා ඇති අතර පසුව print() විධානය මගින් එම වඅචල්‍ය අගයන්ගේ එකතුව Python Shell එක මත ප්‍රතිදානය කිරීමට සලස්වා ඇත.  ඉන් පසුව ඇති print() විධානය මගින් \"abc\" ලෙස වැකියක් ප්‍රතිදානය කර ඇති අතර වැකි නෙහොත් String හඳුන්වා දීමේදී එයට දෙපසින් තනි හෝ ද්විත්ව උඩු කොමා යොදනු ලැබේ. අනතුරුව print() මගින් 123 ලෙස අගයක්ද ප්‍රතිදානය කර ඇති අතර එයින් පසු සරළ ගණිත කර්ම කිහිපයක් සිදු කර ඇත. a = 2 * 3 මගින් 2, 3න් ගුණ කර ලැබෙන අගය a නම් විචල්‍ය තුල තැම්පත් වීම සිදු වේ. b = 4 මගින් පෙර b හි පැවති 7 යන අගය ඉවත්ව එහි 4 යන අගය තැම්පත් වේ. c = b - a මගින්  b හි අගයෙන් a හි අගය අඩු කර විට ලැබෙන අගය c නම් විචල්‍ය තුල තැම්පත් වේ. අවසානයේ c තුල ඇති අගය ප්‍රතිදානය කර ඇත."},{"name":"fixed_point_numbers","code":"print(2.1)\r\nprint(22 / 7)\r\nprint(22 // 7)\r\nprint(22 / 7.0)","info":"බෙදීමේදී එහි ගණනය කිරීම් සිදු වන ආකාරය මෙම නිදසුනේ දැක්වේ. සාමාන්‍යයෙන් දශම සහිත අගයක් දැක්වීම පළමු print() විධානය මගින් කර තිබේ. එවිට එය ප්‍රතිදානය වන්නේද එක දශම ස්ථානයක් සහිතවය. නමුත් බෙදීමක් සිදු කර එහි අගය ප්‍රතිදානය වන විට උපරිම දශම ස්ථාන 15ක් දක්වා ප්‍රතිදානය කිරීමේ හැකියාව Python සතුවේ. එක ඇල ඉරක් මගින් බෙදීමේදී දශම ස්ථාන ගැනෙන අතර අල ඉරි දෙකක් මගින් බෙදීමේදී දශම ස්ථාන ගණනය නොවේ. පෙර Python සංස්කරණවල නිඡල දෙකක් බෙදූ විට දශම ස්ථාන නොසැලකූ අතර ඒ අවස්ථාවල ගණනය කරන අගය සඳහා එක් අගයක් හෝ දශම ලෙස දක්වා තිබිය යුතු වියත නමුත් නව සංස්කරණවල එසේ අවශ්‍ය නොවේ. තවද ගණනය කිරීම්වලදී BODMAS පිලිවෙලින් ගණනය වීමද සිදු වේ.\r\n"},{"name":"formatted_directing","code":"print(\"%i\" %100.6)\r\nprint(\"%7d\" %100)\r\nprint(\"abc%d\" %100)\r\nprint(\"%x\" %14)\r\nprint(\"%X\" %14)\r\nprint(\"%o\" %18)","info":"Python භාෂාවේ % සළකුණ String එකක් තුළදී Escape Charactor එකක් ලෙස සැළකේ. එනම් එම සංඛේතය සමග ඉන් පසුව ඇති අක්ෂරයට අදාළව එම ස්ථානයේ වෙනත් යමක් දර්ශණය කිරීම සිදු වේ. මෙම නිදසුනේ පළමු පේලියේ %i මගින් සිදු වනුයේ දෙන ලද අගයක දශම ස්ථාන රහිතව දැක්වීමයි. print() හි ලබා දී ඇති \"%i\" නම් String එකට පසුව එයට පිටින් ඇති %100.6 යන්නෙන් එම අගය ලබා දේ. එනම් මෙහි ප්‍රතිදානය 100 ලෙස Python Shell එක මතට ලැබේ.\r\n\r\n<br><br>\r\n\r\n%d මගින් සිදු වනුයේ දෙන ලද අගයක් දශමය (දහයේ පාදයෙන්) ආකාරයෙන් දැක්වීමයි. මෙහි %7d මගින් සිදු වනුයේ අදාළ අගය දහයේ පාදයෙන් දැක්වීම සහ එම අගය දැක්වීමේදී අක්ෂර ස්ථාන 7ක් සළකා එහි දකුණට වන්නට දර්ශනය වීම සිදු වේ. තුන වන පේලියෙන් දැක්වෙන ආකාරයට ඉදිරයෙන් කිසියම් වැකියක් දැක්වූ අවස්ථාවක එය සාමාන්‍ය ආකාරයෙන් ප්‍රතිදානයේ මුලට දැක්වීම සිදු වේ. %x මගින් අදාළ අගය 16 පාදයෙන් දැක්වීම සිදු වේ. මෙහිදී ලබා දී ඇති x අකුර සිම්පල් නිසා 16 පාදයෙන් දක්වන විට එහි a, b, c වැනි අගයන් සිම්පල්වලින් දැක්වීම සිදු වේ. (10 = a, 11 = b, 12 = c,...) ලබා දී ඇති X අකුර කැපිටල් නම් කැපිටල්වලින් ප්‍රතිදානය ලැබේ. (10 = A, 11 = B, 12 = C,...) %o මගින් ලබා දෙන අගය අටේ පාදයෙන් දැක්වේ."},{"name":"floating_point","code":"print(\"%f\" %100)\r\nprint(\"%.2f\" %1234)\r\nprint(\"%.1f\" %1212.1212)\r\nprint(\"%.2f\" %12.5555)\r\nprint(\"%12.3f\" % 34.56689)\r\nprint(\"Rs.%.2f\" %1234.9456)","info":"%f මගින් දෙන ලද අගයක් දශම ස්ථාන 6ක් සහිතව දැක්වීම සිදු වේ. තවද එම % සළකුණ හා f කුර මැද්දට ලබා දෙන දශම අගය මගින් දශම ස්ථාන කීයකට වැටයිය යුතුද යන්න දැක්වේ. එමෙන්ම %12.3f යන්නෙන් දෙන ලද අගය දශම ස්ථාන 3කට වැටයීමෙන් සහ අක්ෂර ස්ථාන 12ක් ගෙන එහි දකුණට වන්නට දැක්වීම සිදු වේ. අවසාන පේළියෙහි ඇති ආකාරයට Rs. ලෙස මුලට වැකියක් දැක්වුවත් එය සාමාන්‍ය ලෙසම ප්‍රතිදානය වේ.\r\n"},{"name":"scientific_format","code":"print(\"%e\" %123.456)\r\nprint(\"%e\" %0.000123)\r\nx = 434.321\r\nprint(\"%e\" %x)\r\nprint(\"%E\" %1234.235)","info":"මෙහිදී දක්වා ඇත්තේ විද්‍යාත්මක ආකාරයෙන් අගයක් ප්‍රතිදානය කරන ආකාරයයි. එනම් එක පූර්ණ සංඛ්‍යාවක් පමණක් තබා ඉතිරිය දශම සහිතව දහයේ + හෝ - බලයක් ලෙස දක්වයි. මේ සඳහා අගයක් හෝ සිව් වන පේළියේ දැක්වෙන ලෙස විචල්‍යයක් වුවත් භාවිතා කළ හැකිය. තවද ලබා දෙන %E අක්ෂරය කැපිටල් නම් ප්‍රතිදානයේ ඇති E අක්ෂරයද කැපිටල් වේ."},{"name":"numeric_data_types","code":"x = \"abc\"\r\nprint(type(x))\r\ny = \"123\"\r\nprint(type(y))\r\nx = 16\r\ny = 0x10\r\nz = 0o144\r\nprint(x == y)\r\nprint(type(x) == type(y))\r\nprint(type(x) != type(y))","info":"දත්තවල ස්වරූප සහ ඒවායේ සැසඳීම් මෙහිදී විස්තර කර තිබේ. මුලින්ම x නමැති String විචල්‍යයක් සාදා ඇති අතර එයට \"abc\" ලෙස වැකියක් දී ඇත. පසුව එහි දත්ත ස්වරූපය type() මගින් ලබා ගෙන ඇත. x නම් විචල්‍යය වැකියක් නිසා එහි ප්‍රතිදානය str ලෙස ලැබේ. type(x) යන්න ඇත්තේ print() එකක් තුළ ඇත. මේ නිසා අදාළ ප්‍රතිදානය Shell එක මත දැක්වේ. ඉන් පසුව දක්වා ඇති y විචල්‍යය තුල \"123\" ලෙස ලබා දී ඇති අතර එය මේහිදී නිඛිල (Integer) නොවේ. එයද String එකකි. මක් නිසාදයත් එහි දෙපසට උඩුකොමා දී ඇති බැවිනි. එහි දත්ත ස්වරූපයද str ලෙස ලැබේ. x යනු දහයේ පාදයේ අගයක් ලෙස ගෙන ඇති අතර, 0x මගින්ද සිදු වන්නේද එයමය. 0o මගින් දක්වනුයේ අටේ පාදයේ සංඛ්‍යාවකි. එම නිසා z හි අගය තැම්පත් වන්නේ අටේ පාදයෙනි. \r\n\r\nprint(x == y) මගින් විචල්‍ය අයගන් සසඳා බැලීම සිදු වේ. x හා y හි අයගන් සමාන නම් ප්‍රතිදානය true ලෙසද, අගයන් අසමාන නම් ප්‍රතිදානය false ලෙසද ලැබේ. ඉන් පසු කොටසේ සිදු කර ඇත්තේ එම විචල්‍ය දෙකෙහිම දත්ත ස්වරූපය සසඳා බැලීමයි. මෙතනදී x හා y යන විචල්‍ය දෙකම int ස්වරූපයේ නිසා ප්‍රතිදානය ture වේ. print(type(x) != type(y)) යන්නෙන් අදාළ විචල්‍ය ස්වරූප අසමානද යන්න දැක්වේ. ඒවායේ දත්ත ස්රූප අසමාන නොවන නිසා එහි ්‍රතිදානය false ලෙස ලැබේ.\r\n\r\n"},{"name":"strings","code":"txt = \"Sri\"\r\nprint(\"My Country is \" + txt +\" Lanka.\")\r\nprint(\"A\" * 10)\r\nprint('\"Yes\". He said.')\r\nprint('doesn\\'t')\r\nprint(\"\\\"yes,\\\"he said\")\r\nprint(\"One\\nTwo\")\r\ntxt = \"abc\"\r\nprint(len(txt))\r\nc = \"klm\"\r\nb = \"xyz\"\r\nprint(type(x))\r\nx = \"abc\"\r\nprint('''Line One\r\nLine Two\r\nLine Three''')\r\ntxt = \"ABCDEF\"\r\nprint(txt[0])\r\nprint(txt[0:4])\r\nprint(txt[2:])","info":"මෙහිදී Stringවල විවිධ භාවිත අවස්ථා දක්වා තිබේ. මෙම නිදසුනේ txt ලෙස මුලින්ම විචල්‍යයක් සාදා ඇති අතර එහි \"txt\" ලෙස වැකියක් ගබඩා කර ඇත. පසුව print() මගින් තවත් වැකියක් සමග එම විචල්‍යද සම්බන්ධ කරමින් වාක්‍යයක් ප්‍රතිදානය කර ඇත. ඒ ආකාරයට විචල්‍ය හා වැකි සම්බන්ධ කර ප්‍රතිදානය කිරීම Python භාෂාවේ සිදු කළ හැකිය.\r\n\r\nපසුව print() තුල \"A\" නම් අක්ෂරයක් * ලකුණ මගින් 10 වතාවත් ගුණ කර දක්වා ඇත. එමගින් A යන අක්ෂරය 10 වතාවත් එක දිගට ප්‍රතිදානය වේ. එය තනි අක්ෂරයක් පමණක් නොව වැකියකට වුවද සිදු කළ හැක.\r\n\r\nතවද String එකක් දැක්වීමට තනි හෝ ද්විත්ව උඩු කොමා භාවිත වන බව පෙරද සඳහන් කර ඇත. මෙහිදී නැවත වැකිය දෙපස භාවිත කළ වර්ගයේ උඩු කොමා නැවත එය තුළ ප්‍රතිදානය සමග දැක්වීඹ එක වරම සිදු කළ නොහැක. මේ සඳහා ඇල ඉර \\ ලෙස ගැනෙන Escape Charactor එක භාවිත කළ යුතුය. \\ සමග ඉන් පසු තනි හෝ ද්විත්ව උඩු කොමාව යෙදීමෙන් එය print() හි ප්‍රතිදානයට ලබා ගත හැක.\r\n\r\n\\n මගින් එකම වැකිය පේලි දෙකට අදාළ ස්ථානයෙන් වෙන් කර දැක්විය හැකිය. මෙහි එන len() මගින් String එකක අක්ෂර ගණන නෙහොත් විශාලත්වය ලබා ගත හැක. ඒ සඳහා එහි වරහන තුළට අදාළ String විචල්‍යය දිය යුතුය.\r\n\r\nකලින් සඳහන් කල ලෙසම type මගින් විචල්‍ය දත්ත ස්වරූපය ලබා ගත හැකිය. මෙහි x යන විචල්‍යය String බැවින් එහි ප්‍රතිදානය str ලෙස ලැබේ. \r\n\r\nතවද තනි උඩු කොමා තුන බැගින් භාවිතයෙන් පේලි කිහිපයක වැකියක් print() එකක් පමණක් භාවිතයෙන් ප්‍රතිදානය කල හැක.\r\n\r\nඅවසාන වශයෙන් txt ලෙස දී ඇති String එකෙහි \"ABCDEF\" ලෙස ගබඩා කර ඇත. මෙහිදී txt[0] මගින් විචල්‍ය අගයේ පළමු අකුර ලැබේ. txt[1] මගින් එහි දෙවන අකුර ලැබේ. ඒ ආකාරයට අපට අවශ්‍ය අක්ෂරයක් ලබා ගත හැක.\r\n\r\ntxt[0:4] මගින් දැක්වෙන්නේ txt හි වැකියේ පළමු අකුරේ සිට ඉදිරියට අකුරු 4ක වැකි කොටස වෙන් කර ලබා ගන්නා ලෙසයි. එමෙන්ම txt[2:] ලෙස දැක්වූ විට එමගින් වැකියේ දෙවන අකුරේ සිට ඉදිරියට ඇති සියලුම කොටස නිරූපණය වේ.\r\n\r\n"},{"name":"leading_and_trailing","code":"s=\"   NAME   \"\r\nprint(s.strip())\r\nprint(s.lstrip())\r\nprint(s.rstrip())","info":"strip() කේත මගින් වැකියක හිස් අවකාශ ඉවත් කිරීමේ හැකියාව ඇත. s.strip() මගින් s නම් String විචල්‍යය කුල ගබඩා කර ඇති වැකියේ දෙපසින් ඇති හිස් අවකාශ ඉවත් වීම සිදු වේ. එමෙන්ම lstrip() මගින් leading, එනම් ඉදිරියෙන් ඇති හිස් අවකාශය පමණක්ද, rstrip() මගින් trailing, එනම් වැකියේ පිටුපසින් ඇති හිස් අවකාශය  පමණක්ද ඉවත් වී ප්‍රතිදානය වේ. මෙම නිදසුනේ එක් අවස්ථාවකවත් එම අවකාශ ඉවත්ව නැවත එම විචල්‍ය තුළ ගබඩා වීමක් සිදු නොවේ. එසේ වීමට නම් s = s.strip() ලෙස ලිවිය යුතුය."},{"name":"case_in_strings","code":"a = \"lanka\"\r\nb = \"LANKA\"\r\nprint(a.capitalize())\r\nprint(a.upper())\r\nprint(b.lower())\r\nprint(\"\\n\" *5)\r\nc = \"letter\"\r\nprint(c.islower())\r\nprint(c.isupper())\r\nd=\"my school\"\r\nprint(d.capitalize())\r\ne = \"First letter\"\r\nprint(e.islower())","info":"මෙහිදී Stringවල Casing එක වෙනස් කිරීමේ ආකාර සළකා බැලේ. capitalize() මගින් විචල්‍යය තුල ඇති වැකියේ පළමු අකුර පමණක් කැපිටල් කර දැක්වීම සිදු වේ. upper() මගින් සියලුම අක්ෂර කැපිටල් වීම සිදු වන අතර, lower() මගින් සියලුම අක්ෂර සිමප්ල් වී දැක්නීම සිදු වේ. islower() සහ isupper() යනු true හෝ false ලෙස ප්‍රතිදාන ලැබෙන විධාන වේ. islower මගින් අදාල වැකියේ සියලුම අකුරු සිම්පල් නම් පමණක් true සහ එසේ නැති නම් false ලෙසද ලැබේ. isupper() මගින් සියලුම අකුරු කැපිටල් නම් පමණක් true ලෙස ප්‍රතිදානය වේ. එසේ නැති නම් false ලෙස ලැබේ.\r\n"},{"name":"centering_text","code":"a = \"Programming in Python\"\r\nprint(a.center(50 ,' '))\r\nprint(a.center(50 ,'*'))","info":"මෙහිදී වැකියක් මධ්‍යගත කිරීම සිදු කෙරේ. center() විධානය තුළට පිලිවෙලින් කොපමණ අක්ෂර ප්‍රමාණයකින් මධ්‍යගත විය යුතුද යන්න සහ මධ්‍යගත වීමේදී එය දෙපස දැක්විය යුත්තේ කුමන සංඛේතයකින්ද යන්න දැක්විය යුතුය. a.center(50 ,' ') ලෙස දක්වා ඇති පළමු කේතයෙන් a විචල්‍යයේ ඇති වැකිය අක්ෂර ස්ථාන 50කින් මධ්‍යගත වේ. මධ්‍යගත වීමට හිස් ඉඩක් ලබා දී ඇති නිසා දෙපස හිස් ඉඩක් ලෙස දැක්වේ.\r\n\r\nදෙවැනි කොටසේදී එයට භාවිතා කර ඇත්තේ ලකුණ නිසා එය මධ්‍යගත වන්නේ තරු ලකුණු වලිනි."},{"name":"subsrings_in_a_string","code":"x = \"This is a sentence of t variable. And this is a Python program\"\r\ny = x.count('a')\r\nprint(y)\r\nz = x.count('t')\r\nprint(z)\r\na = x.count('is')\r\nprint(a)","info":"වැකියක් තුල ඇති උප වැකි කෙටස් ගණන ගනන් කිරීම මෙහිදී විස්තර කෙරේ. මේ සඳහා count() යන විධානය භාවිත කෙරේ. එම විධානය තුළට දෙන අක්ෂරය හෝ වැකි කොටස කී වාරයක් දෙන ලද විචල්‍යය තුල ගබඩා වී ඇති වැකියේ ඇති දැයි මෙමගින් ප්‍රතිදානය වේ.\r\n\r\n<br><br>\r\n\r\nතවද මෙහිදී x[5], x[6] ලෙස සැළකීමේදී x හි ඇති වැකියේ එම අදාළ ස්ථානයේ අක්ෂරය බැගින් ලබා ගත හැකිය. x[3:5] ලෙස සැලකුවහොත් ඉන් අදහස් වන්නේ x හි සිව් වන අකුරේ සිට ඉදිරියට අක්ෂර 5ක කොටස ප්‍රතිදාන වීම එමගින් සිදු වේ. තවද x[3:] මගින් සිදු වන්නේ x හි සිව්වන අකුරේ සිට ඉතිරි සියලුම වැකි කොටසම ප්‍රතිදාන වීමයි."},{"name":"input_method","code":"L = int(input('Enter the Length'))\r\nB = int(input('Enter the Breadth'))\r\nArea = L * B\r\nprint(\"Answer is\", Area)\r\nL = float(input('Enter the Length'))\r\nB = float(input('Enter the Breadth'))\r\nArea = L * B\r\nprint(\"Answer is\", \"%.2f\" %Area)","info":"වැඩසටහන ක්‍රියාත්මක වන අවස්ථාවේදී පරිශීලකගෙන් ආදාන ලබා ගැනීමේ ආකාරය මෙහිදී සළකා බැලේ. ඒ සඳහා input() යන විධානය භාවිත කෙර්. ඒ තුළට දෙන වැකිය මගින් අදානය කළ යුත්තේ කුමක්ද යන්න පරිහීලකට හඳුන්වා දිය හැකිය. මෙම මුලු කේතයම int() කුළ දක්වා ඇත්තේ එමගින් ඇතුලත් කරන අගය නිඛිල බවට පරිවර්තනය වීමටයි. පළමු ආදාන දෙක මිග්න ලබා ගන්නා අගයන් වලින් වර්ගඵලය නිඛිල ලෙස ගණනය වේ. එය තුන් වන පේළියේ පරිද ප්‍රතිදානය කර ඇත. පසුව ඇති කොටසේ ආදාන දශම අගයන් ලෙස ාගන දශම සහිතවම වර්ගඵලය ගණනය කර ඇත."},{"name":"lists","code":"list_1 = ['abcd', 786, 2.23, 'john', 70.2]\r\nlist_2 = ['abc', 123]\r\nprint(list_1)\r\nprint(list_1[0])\r\nprint(list_1[1:3])\r\nprint(list_1[2:])\r\nprint(list_2 * 2)\r\nprint(list_1 + list_2)\r\nlist_1[0] = 'klmn'\r\nprint(list_1[0])\r\nprint(list_1)\r\nlist_1.append(2.3)\r\nprint(list_1)\r\nlist_1.insert(2,2.3)\r\nlist_1.extend(['dfg',456])\r\nprint(list_1)\r\nprint(list_1.index('dfg'))\r\nprint(2.3 in list_1)\r\nlist_1.remove('klmn')\r\ndel list_1[3]","info":"විචල්‍යයක් තුල ගබඩා කර හැක්කේ එක අගයක් පමණක් වුවත් අගයන් ලැයිස්තුවක් ලෙස එක වර ගබඩා කිරීමට Python භාෂාවේ List භාවිතා වේ. එමගින් විවිධ දත්ත ස්වරූපවල අගයන් වුවත් එක ලැයිස්තුවක් තුල තැම්පත් කිරීමට හැකිය. මේ සඳහා ලැයිස්තුව දැක්වීමේදී කොටු වරහන් [] මගින් කොමා සහිතව දත්ත ඉදිරිපත් කෙරේ. printf() මගින් මුලු ලැයිස්තුවම එකවර දැක්විය හැකි අතර පිලිවෙලින් ගත් විට list_1[0], list_2[1] මගින් ලැයිස්තුවේ පළමු දත්තය හා දෙවන දත්තය සැළකේ. ඒ ආකාරයෙන් ගෙන අගයන් කියීම හෝ එයට නව අගයන් ලබා දීම සිදු කළ හැකිය. list_1[1:3] මගින් ලැයිස්තුවේ දෙවන දත්තයේ සිට ඉරියට ඇති දත්ත 3 පමණක් වෙන් කර ගැනීම සිදු වේ. list_1[2:] මගින් ලැයිස්තුවේ තුන්වන අයිතමයේ සිට ඉතුරු සියලුම අයිතම සැලකේ. ලැයිස්තුවක් යම් අගයකින් ගුණ කර ඇක්වීමේදී එකම ලැයිස්තුව එම වාර ගණනක් ප්‍රතිදානය වේ. \r\n\r\nලැයිස්තු දෙකක් list_1 + list_2 ලෙසද දැක්විය හැකිය. එමගින් ලැයිස්තු දෙහෙිම අයිතම එම පිලිවෙලින්ම එකට ගැනේ.\r\nlist_1.append(2.3) මගින් list_1 යන ලැයිස්තුවේ වම් කොළවරට 2.3 යන දත්තය නව අයිතමයක් ලෙස එක් වීම සිදු වේ.\r\n\r\nlist_1.insert(2,2.3) මගින් ලැයිස්තුවේ තුන්වන තැනට 2.3 යන දත්තය ඇතුලත් වන අතර ඉන් පසුව ඇති සියලුම අයිතම එක ස්ථානය බැගින් පිටුපසට යයි.\r\n\r\nextend මගින් එක වරකට එක අයිකමයකට වඩා ලැයිස්තුව අගට එක් කිරීමට හැකියාව ඇත.\r\n\r\nindex() යන විධානයෙන් ඒ තුළට දත්තයක් ලබා දුන් විට එම දත්තය ලැයිස්තුවේ ඇත්තේ කුමන ස්ථානයේද යන්න ප්‍රතිදානය වීම සිදු වේ.\r\n\r\nඑමෙන්ම print(2.3 in list_1) මගින් අදහස් වන්නේ අදාළ දැයිස්තුව තුළ 2.3 යන්න දත්තය තිබේද යන්නයි. එමගනින් true හෝ false ලෙස ප්‍රතිදාන ලැබේ.\r\n\r\nremove() මගින් ඒ තුල ලබා දෙන දත්තය අදාළ ලැයිස්තුවෙන් මකා දැමීම සිදු වේ."},{"name":"tuples","code":"tuple_1 = ('abcd',1234,'deshan',5678)\r\ntuple_2 = ('abc',123)\r\nprint(tuple_1)\r\nprint(tuple_1[0])\r\nprint(tuple_1[1:3])\r\nprint(tuple_1[2:])\r\nprint(tuple_2 *2)\r\nprint(tuple_1 + tuple_2)","info":"Tuple මගින්ද දත්ත ලැයිස්තුවක් දැක්විය හැකි අතර මේ සඳහා සාමාන්‍ය වරහන () භාවිත කෙරේ. නමුත් මෙහි අයිතම නැවත වෙනස් කළ නොහැක. ලැයිස්තු වල භාවිත වූ දත්ත වෙන් කර ගැනීමේ අනිත් ආකාර අනෙක් සියල්ල Tupleවලටද භාවිත කළ හැක.\r\n\r\n<br><br>\r\n\r\nඑනම් දත්ත එක බැගින් කියවීම, දත්ත කිහිපයක් එක වර වෙන් කර ගැනීම සහ Tuple දෙකක් එකතු කර දැක්වීම වැනි දෑ සිදු කළ හැකිය."},{"name":"dictionary","code":"dict_1 = {}\r\ndict_1['one'] = \"This is one\"\r\nprint(dict_1)\r\ndict_2 = {'name':'deshan','age':'18','village':'madampe'}\r\nprint(dict_2)\r\nprint(dict_2['name'])\r\nprint(dict_2.keys())\r\nprint(dict_2.values())","info":"Dictionary එකක් යනු ඒ තුළ ඇති සෑම අයිතමයකටම key එකක් සහ value එකක් බැගින් ඇති ලැයිස්තු ආකාරයකි. නිදසුනක් ලෙස භාෂා පරිවර්තන පොතක එක් භාෂාවක වචනයක අනෙක් බසේ වචනය දක්වා ඇති පරිදිය. මේ සඳහා සඟල වරහන් {} යොදා ගැනේ. අයිතම වෙන් කිරීමට කොමා සහ එක අයිතමවල key එක සහ value එක : ලකුණ මගින් වෙන් කෙරේ.\r\n\r\nDictionary එක තැනූ පසු dict_2['name'] ලෙස සැළකූ විට ඉන් අදහස් වන්නේ dict_2 නම් Dictionary එකෙහි 'name' නම් key එකට අදාළ value එකයි. keys() මගින් Dictionary එකෙහි keys පමණක් ලැයිස්තුවක් ලෙසත්, values() මගින් values පමණක් ලැයිස්තුවක් ලෙසත් ප්‍රතිදානය වේ.\r\n"},{"name":"if_else","code":"y = 5\r\n\r\nif y == 5:\r\n    print('yis equal to 5')\r\n\r\nif y == 6:\r\n    print('y is equal to 6')\r\nelse:\r\n    print ('y is not equal 6')\r\n\r\nmarks = int(input('Input your marks : '))\r\n\r\nif marks >= 75:\r\n    print('A')\r\nelif marks >= 65:\r\n    print('B')\r\nelif marks >= 55:\r\n    print('C')\r\nelif marks >= 45:\r\n    print('S')\r\nelse:\r\n    print('F')\r\n","info":"අගයන් සැසඳීම මගින් ඊට අදාළව අපට අවශ්‍ය කේත ක්‍රියාත්මක කිරීමට if විධන භාවිතා කළ හැකිය. ඒ සඳහා භාවිත බූලියානු සැසඳීම් පහත පරිදි වේ.\r\n\r\n<table border=\"1\">\r\n<tr>\r\n\t<th>සංඛේතය</th>\r\n\t<th>ගණිතකර්මය</th>\r\n</tr>\r\n<tr>\r\n\t<td>==</td>\r\n\t<td>සමානද යන්න</td>\r\n</tr>\r\n<tr>\r\n\t<td>!=</td>\r\n\t<td>අසමානද යන්න</td>\r\n</tr>\r\n<tr>\r\n\t<td>&gt;</td>\r\n\t<td>පළමු අගය දෙවැන්නට වඩා විශාලද යන්න</td>\r\n</tr>\r\n<tr>\r\n\t<td>&lt;</td>\r\n\t<td>පළමු අගය දෙවැන්නට වඩා කුඩාද යන්න</td>\r\n</tr>\r\n<tr>\r\n\t<td>&gt;=</td>\r\n\t<td>පළමු අගය දෙවැන්නට වඩා විශාල හෝ සමානද යන්න</td>\r\n</tr>\r\n<tr>\r\n\t<td>&lt;=</td>\r\n\t<td>පළමු අගය දෙවැන්නට වඩා කුඩා හෝ සමානද යන්න</td>\r\n</tr>\r\n</table>\r\n\r\nඅදාළ සැසඳීම සත්‍ය වූ විට if තුළ ඇති කේත ක්‍රියාත්මක වේ. මෙහිදී එම කේත if කේතවලට වඩා ඇතුලට indent වී තිබිය යුතුය. පළමු නිදසුනේ ඇත්තේ if පමණක් වන අතර දෙවන නිදසුන් else නම් කොටසක්ද වේ. මේ නිසා if තුළ ඇති සැසඳීම false නම් else තුළ ඇති විධාන අනිවාර්යයෙන් ක්‍රියාත්මක වේ. \r\n\r\nමීට අමතරව elif මගින් if සහ else වලට අමතරව අපට අවශ්‍ය සැසඳීම් ගණනක් එකම if ඛණ්ඩයක් තුල ලබා දිය හැකිය.\r\n"},{"name":"loops","code":"counter = 1\r\nwhile counter <= 10:\r\n    print(counter)\r\n    counter = counter + 1\r\n\r\nfor a in \"SAMPLE TEXT\":\r\n    print(a)\r\n    \r\nfor a in range(10,21,2):\r\n    print(a)","info":"එකම කේත වැකි කිහිපයක් අපට අවශ්‍ය වාර ගණනක් පුනරාවර්තීව ක්‍රියාත්මක වීමට Loops භාවිතා වේ. මේ සඳහා While Loop සහ For Loop ලෙස ආකාර දෙකක් භාවිත වේ.\r\n\r\nපළමු නිදසුන While එකක් වන අතර පෙර හඳුන්වා දුන් counter විචල්‍ය මේ සඳහා භාවිත වේ. මුලින්ම එහි අගය 1ක් වන අතර while තුල ඇති කේත ක්‍රියාත්මක වන්නේ counter හි අගය 10ට අඩු හෝ සමාන වන කෙත් පමණි. ඒ සඳහා අපට කැමති ආකාරයේ බූලියානු සැසඳීම් පදයක් ලබා දිය හැකිය. ඒ අතරම while තුල ඇති කේත අතර counter එකෙහි අගය වරින් වර වැඩි වන නිසා එහි අගය 11 වන විට While Loop එක නැවතීම සිදු වේ. ඒ වන තාක් එහි අගය පිලිවෙලින් පහලට ප්‍රතිදානය වීම print() මගින් සිදු වේ.\r\n\r\n<br><br>\r\n\r\nමෙහි දක්වා ඇති පළමු For Loop එකෙහි පරිදි a නම් විචල්‍යයකට \"SAMPLE TEXT\" එකෙහි අකුරින් අකුර වරින් වර ගැනීම සිදු වේ. එනම් මෙම For Loop එක පුනරාවර්තනය වන්නේ එම වැකියේ අක්ෂර ගණනට සමානවය. එවිට වරින් වර a විචල්‍යයෙහි අකුරින් අකුර පිලිවෙලින් තැම්පත් වේ. ඒ අතරම ඒවා පහලට ප්‍රතිදානය වීමද සිදු වේ.\r\n\r\n<br><br> දෙවෙනි For Loop එක ක්‍රියත්මක වන්නේ යම් පරාසයක් තුලය. ඒ සඳහා range() යන විධානය භාවිත වේ. මෙහි ඇති ආකාරයට range(10,21,2) මගින් හැඳින්වනුයේ 10 සිට 21 දක්වා 2න් දෙකට අගයන් ගෙන වරින් වර ගැනීමයි. එම අගයන් a විචල්‍ය තුල වරින් වර තැපත් වේ."}],"MySQL":[{"name":"create_database","code":"mysql> CREATE DATABASE dbs_1;\r\nQuery OK, 1 row affected (0.00 sec)","info":"MySQL මගින් වගු නිර්මාණය කිරීම සහ දත්ත එය තුළ ගබඩා කිරීම සඳහා දත්ත සමුදායක් (Database) තැනිය යුතු වේ. එවිට අප නිර්මාණය කරන වගු සියල්ල එම සමුදාය තුළ ගබඩා වීම සිදු වේ. මෙලෙස දත්ත සමුදායක් තුළ වගු තැනීමේ අරමුණ වන්නේ යම් ආයතනයක් වේ නම්, එම ආයතනයේ පියලු දත්ත වගු එකම දත්ත සමුදායක් තුලටත්, වෙනත් සමාගමක දත්ත වගු වෙ නම් තවත් දත්ත සමුදායක ලෙසත් වෙන වෙනම ගබඩා කිරීමට හැකියව ඇති වන නිසාවෙනි. CREATE DATABASE කේතය සමග ඊට පසුව නමක් ලබා දීමෙන් දත්ත සමුදායක් තැනිය හැකිය. මෙම කේතය ක්‍රියාත්මක වෙන්නේ Enter යතුර තද කිරීමෙන් පසුවය. එමෙන්ම එම නම සාමාන්‍ය විචළ්‍යයකදී භාවිත වන නිති රීති වලට යටත්ව යෙදූ එකක් විය යුතුය (මැදට හිස්තැන් හෝ වෙනක් සංඛේත නොමැති වීම වැනි...) එමෙන්ම එ් නමින් පෙරදී දත්ත සමුදායක් සකසා නොතිබිය යුතුය. මේ නීතිවලට යටත් නොවී දත්ත සමුදායක් සැකසීමට යාමේදී දත්ත සමුදාය සැකසීම වෙනුවට එම වැරැද්ද දක්වමින් ප්‍රතිදානයක් ලැබෙනු ඇත. එසේ නෙවේ නම් Query OK, 1 row affected ලෙස විධානයක් සහ ඊට දකුණු පසින් එම විධානය ක්‍රියාත්මක වීමට යත වූ කාලය ප්‍රතිදානය වනු ඇත.SQL මගින් ක්‍රයිත්මක කරන හැම කේතයක්ම අවසානයේ තිත් කොමාව (;) යෙදිය යුතුය. එයද මෙහිදී වැදගත්වන එක් නීතියකි."},{"name":"use_database","code":"mysql> use dbs_1;\r\nDatabase changed\r\nmysql> use dbs_2;\r\nDatabase changed","info":"දත්ත සමුදාය තැනීමෙන් පසුව අප භාවිතයට ගන්නා දත්ත සමුදාය SQL වෙත තෝරා දිය යුතුය. දත්ත සමුදායන් කිහිපයක් පවතින විට වගු නිර්මාණය සහ දත්ත යාවත්කාලීන කල යුත්තේ කුමන සමුදාය තුලද යන්න මෙමගින් දක්වයි. නිදසුනේ පරිදි use dbs_1; ලෙස විධානයක ක්‍රියාත්මක කල විට SQL මගින් එම dbs_1 දත්ත සමුදාය යාවත්කාලීන කිරීමට සූදානම් වේ. එම තෝරාදීමෙන් පසු අප වගුවක් තැනුවහොත් එම වගුව තැනෙන්නේ dbs_1 තුලය. අපට අවශ්‍ය අවස්ථාවක මෙම විධානය මගින් කැමති දත්ත සමුදායක් වෙත මාරු වීම සිදු කල හැකිය. වගුවක් නිර්මාණය කිරීමට ප්‍රථම එම වගුව තැනීමට යන දත්ත සමුදාය මෙසේ කලින් තෝරා දෙනු ලැබේ.\r\n"},{"name":"create_table","code":"mysql> CREATE TABLE tbl_1 (\r\n    -> id int(5) not null,\r\n    -> name varchar(60) not null,\r\n    -> mobile int(9)\r\n    -> );\r\nQuery OK, 0 rows affected (0.60 sec)","info":"ඉන් අනතුරුව වගුවක් නිර්මාණය කිරීමට හැකියාව ලැබේ. මේ සඳහා CREATE TABLE විධානය භාවිත කරයි. එම විධානය සමග තනන වගුවේ නම සහ ඊට දකුණු පසින් වරහනක් තුළ වගුවේ ක්ෂේත්‍ර (Fields) දක්වනු ලැබේ. මෙම නිදසුනේ මා සහත පරිදි ක්ෂේත්‍ර ඉදිරිපත් කර ඇත.\r\n\r\n<center>\r\n<table border=\"1\">\r\n<tr>\r\n<td>ක්ෂේත්‍රය</td>\r\n<td>දත්ත වර්ගය</td>\r\n<td>ගබඩා කළ හැකි උපරිම අක්ෂර / සංඛේත ගණන</td>\r\n</tr>\r\n<tr>\r\n<td>id</td>\r\n<td>int - නිඛිල</td>\r\n<td>5</td>\r\n</tr>\r\n<tr>\r\n<td>name</td>\r\n<td>varchar - තරමක් දිගු වැකි</td>\r\n<td>60</td>\r\n</tr>\r\n<tr>\r\n<td>mobile</td>\r\n<td>int - නිඛිල</td>\r\n<td>9</td>\r\n</tr>\r\n</table>\r\n</center>\r\n\r\nමෙහි varchar මෙන්ම char ලෙසද දත්ත ස්වරූපයක් පවතී. එය භාවිත කරනුයේ ඉතා කුඩා වචනයක් වැනි දත්තයක් ගබඩා වන ක්ෂේත්‍රයක් සඳහාය (නිද: sex char(1) මගින් Male නම් M ලෙසත් Female නම් F ලෙසත් දැක්වීමට)\r\n\r\n<br><br>\r\n\r\nමෙහි not null යනු නව රෙකෝඩයක් වගුවට ඇතුලත් කිරීමේදී හිස් නොවිය යුතු තීර මොනවාද යන්නයි. එනම් id සහ name යන තීර කිසි විටකත් එක් රෙකෝඩයක හෝ හිස් විය නොහැක. නමුත් mobile තීරය හිස් රෙකෝඩ තිබිය හැකිය. මෙසේ රොකඩෙයක් ඇතුලත් කිරීමේදී not null ලෙස ඇති තීරයකට හිස් ලෙස රෙකෝඩයක් ලබා දුන් විට දෝශයක් පෙන්වයි."},{"name":"describe_table","code":"mysql> DESCRIBE tbl_1;\r\n+--------+-------------+------+-----+---------+-------+\r\n| Field  | Type        | Null | Key | Default | Extra |\r\n+--------+-------------+------+-----+---------+-------+\r\n| id     | int(5)      | NO   |     | NULL    |       |\r\n| name   | varchar(60) | NO   |     | NULL    |       |\r\n| mobile | int(9)      | YES  |     | NULL    |       |\r\n+--------+-------------+------+-----+---------+-------+\r\n3 rows in set (0.01 sec)","info":"වගුවක ක්ෂේත්‍ර සහ ඒවායේ විස්තර වගුවක් ආකාරයෙන්ම DESCRIBE කේතය මගින් ලබා ගත හැකිය. එම කේතය සමග අගට වගුවේ නම ලබා දුන් විට අදාල වගුවේ විස්තර ලැයිස්තුව නිදසුනේ ආකාරයට ලැබේ. ඒ අනුව id, name සහ mobile යන තීර වල දත්ත ස්වරූපය, දත්තයක උපරිම දිග සහ හිස් විය හැකිද යන්න මෙම වගුවෙන් දැක්වේ."},{"name":"primary_key_(while_creating_table)","code":"mysql> CREATE TABLE tbl_2 (\r\n    -> id int(5) not null,\r\n    -> name varchar(60) not null,\r\n    -> PRIMARY KEY(id)\r\n    -> );\r\nQuery OK, 0 rows affected (0.06 sec)\r\n\r\nmysql> DESCRIBE tbl_2;\r\n+-------+-------------+------+-----+---------+-------+\r\n| Field | Type        | Null | Key | Default | Extra |\r\n+-------+-------------+------+-----+---------+-------+\r\n| id    | int(5)      | NO   | PRI | NULL    |       |\r\n| name  | varchar(60) | NO   |     | NULL    |       |\r\n+-------+-------------+------+-----+---------+-------+\r\n2 rows in set (0.01 sec)","info":"වගුවක රෙකෝඩයකට අනන්‍ය වන ක්ෂේත්‍රය අප විසින් ප්‍රාථමික යතුර (Primary Key) ලෙස නම් කරනු ලැබේ. මෙම යතුර ලබා දීම PRIMARY KEY(&lt;FIELD_NAME&gt;) ලෙස ක්ෂේත්‍ර දක්වා අවසානයේ නිදසුනේ පරිදි සිදු කළ හැකිය. එවිට වගුව DESCRIBE කේතය මගින් විශ්ලේෂණය කිරීමේදී අදාල තීරයට Key සඳහා PRI ලෙස දැක්වෙනු ඇත. මෙම ක්‍රමය මගින් වගුව සකසන මොහොතේ ප්‍රාථමික යතුර ලබා දීම සිදු වේ."},{"name":"primary_key_(after_creating_table)","code":"mysql> CREATE TABLE tbl_3 (\r\n    -> id int(5) not null,\r\n    -> name varchar(60) not null\r\n    -> );\r\nQuery OK, 0 rows affected (0.06 sec)\r\n\r\nmysql> ALTER TABLE tbl_3 ADD PRIMARY KEY(id);\r\nQuery OK, 0 rows affected (0.08 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0","info":"වගුව නිර්මාණය කලින් සිදු කර තිබෙන අවස්ථාවක එම වගුවේ ප්‍රාථමික යතුර නම් කිරීම ALTER TABLE විධානය හරහා ADD PRIMARY KEY(&lt;FIELD_NAME&gt;) මගින් සිදු කළ හැකිය. ඒ අනුව ALTER TABLE විධානයට පසුව අදාල වගුවේ නමත් PRIMARY KEY කෙතය සමග එන වරහන තුළ ප්‍රාථමික යතුර ලෙස නම් කිරීමට අවශ්‍ය තීර නාමයත් ලබා දිය යුතුය.\r\n"},{"name":"foreign_key_(while_creating_table)","code":"mysql> CREATE TABLE tbl_1(\r\n    -> id int(5) not null,\r\n    -> name varchar(60) not null,\r\n    -> PRIMARY KEY(id)\r\n    -> );\r\nQuery OK, 0 rows affected (0.05 sec)\r\n\r\nmysql> CREATE TABLE tbl_2(\r\n    -> book_id int(5) not null,\r\n    -> id int(5) not null,\r\n    -> name varchar(60) not null,\r\n    -> PRIMARY KEY(book_id),\r\n    -> FOREIGN KEY(id)\r\n    -> REFERENCES tbl_1(id)\r\n    -> );\r\nQuery OK, 0 rows affected (0.39 sec)","info":"ආගන්තුක යතුර මගින් වගු දෙකක් අතර සම්බන්ධතාවය ඇති කළ හැකිය. මෙහිදී නිදසුනේ පරිදි කලින් සැකසූ වගුව tbl_1 වේ. එහි ප්‍රාථමික යතුර id වන අතර එය tbl_2 හි ආගන්තුක යතුර වීමට දෙවන වගුව නිර්මාණය කරන අවස්ථාවේදීම උපදෙස් දී ඇත. දෙවන වගුව වන tbl_2 හි ප්‍රාථමික යතුර book_id වේ. සහි ඇති id තීරය පළමු වගුවේ id තීරය සමග සම්බන්ධ වීමට FOREIGN KEY තුළට දැනට නිර්මාණය කරන්නට යන වගුවේ තීරයද එය පෙර සකස් කළ වගුවේ කුමන තීරයක් සම්බන්ධ වේද යන්න REFERENCES කේතය සමග දෙනු ලැබේ. මෙය දෙවන වගුව සකසන අවස්ථාවේම ප්‍රාථමික යතුර පවරාදෙන ආකාරයයි."},{"name":"foreign_key_(after_creating_table)","code":"mysql> CREATE TABLE tbl_1(\r\n    -> id int(5) not null,\r\n    -> name varchar(60) not null,\r\n    -> PRIMARY KEY(id)\r\n    -> );\r\nQuery OK, 0 rows affected (0.06 sec)\r\n\r\nmysql> CREATE TABLE tbl_2(\r\n    -> book_id int(5) not null,\r\n    -> name varchar(60) not null,\r\n    -> id int(5) not null,\r\n    -> PRIMARY KEY(id)\r\n    -> );\r\nQuery OK, 0 rows affected (0.65 sec)\r\n\r\nmysql> ALTER TABLE tbl_2\r\n    -> ADD FOREIGN KEY(id)\r\n    -> REFERENCES tbl_1(id);\r\nQuery OK, 0 rows affected (0.44 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0","info":"පෙර සැකසූ වගු දෙකක් අතර සම්බන්ධතාවය ඇති කිරීමට ප්‍රාථමික යතුර පැවරූ ආකාරයටම ALTER TABLE කේතය මගින් සිදු කල හැකිය. ඒ සඳහා ADD FOREIGN KEY සමග අදාල වගුවේ ආගන්තුක යතුර වන තීරය සහ REFERENCES සමග එය හා සම්බන්ධ වන වගුවේ අදාල තීරයද දෙනු ලැබේ."},{"name":"add_column","code":"mysql> describe tbl_1;\r\n+-------+-------------+------+-----+---------+-------+\r\n| Field | Type        | Null | Key | Default | Extra |\r\n+-------+-------------+------+-----+---------+-------+\r\n| id    | int(5)      | NO   | PRI | NULL    |       |\r\n| name  | varchar(60) | NO   |     | NULL    |       |\r\n+-------+-------------+------+-----+---------+-------+\r\n2 rows in set (0.02 sec)\r\n\r\nmysql> ALTER TABLE tbl_1 ADD address varchar(50);\r\nQuery OK, 0 rows affected (0.09 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0\r\n\r\nmysql> describe tbl_1;\r\n+---------+-------------+------+-----+---------+-------+\r\n| Field   | Type        | Null | Key | Default | Extra |\r\n+---------+-------------+------+-----+---------+-------+\r\n| id      | int(5)      | NO   | PRI | NULL    |       |\r\n| name    | varchar(60) | NO   |     | NULL    |       |\r\n| address | varchar(50) | YES  |     | NULL    |       |\r\n+---------+-------------+------+-----+---------+-------+\r\n3 rows in set (0.03 sec)","info":"පෙර සැකසූ වගුවකට නව උපලැකියක් (Column) එක් කිරීමට ALTER TABLE සමග එන ADD විධානය භාවිතා කළ හැකිය. එමගින් නව උපලැකියේ නම සම දත්ත ස්වරූපය සමග උපරිම විශාලත්වය ලබා දිය යුතුය. නිදසුනේ පරිදි අදාල විධාන ක්‍රියාත්මක කිරීමට පෙර සහ පසු DESCRIBE විධානය මගින් වගුවේ තත්ත්වය දක්වා ඇත."},{"name":"delete_primary_key_and_foreign_key","code":"mysql> ALTER TABLE tbl_1 DROP PRIMARY KEY;\r\nQuery OK, 0 rows affected (0.11 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0\r\n\r\nSHOW CREATE TABLE tbl_2;\r\ntbl_2 | CREATE TABLE `tbl_2` (\r\n  `book_id` int(5) NOT NULL,\r\n  `name` varchar(60) NOT NULL,\r\n  `id` int(5) NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  CONSTRAINT `tbl_2_ibfk_1` FOREIGN KEY (`id`) REFERENCES `tbl_1` (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\r\n\r\nmysql> ALTER TABLE tbl_2 DROP FOREIGN KEY tbl_2_ibfk_1;\r\nQuery OK, 0 rows affected (0.09 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0","info":"මෙහිදී ප්‍රාථමික යතුර සහ ආගන්තුක යතුර මකා දමන අකාරය විස්තර කෙරේ. ALTER TABLE සමග එන DROP PRIMARY KEY මගින් අදාල වගුව ලබා දීමෙන් නිදසුනේ පරිදි පහසුවෙන් වගුවක ප්‍රාථමික යතුර ඉවත් කල හැකිය.\r\n\r\n<br><br>\r\n\r\nනමුත් ආගන්තුක යතුර ඉවත් කිරීමට අදාල වගුවේ \"නිර්දේශන සීමා කේතය\" ප්‍රථමයෙන් ලබා ගත යුතුය. ඒ සඳහා SHOW CREATE  TABLE මගින් අදාල වගුව ලබා දිය යුතුය. නිදසුනේ ඇති වගුවේ එම කේතය tbl_2_ibfk_1 වේ. එය CONSTRAINT යටතේ දැක්වේ. මෙම SHOW CREATE  TABLE මගින් වනුයේ අදාල වගුව නිර්මාණය වී ඇති ආකාරය ලබා ගත හැකිය.\r\nපසුව එම කේතය DROP FOREIGN KEY සමග යෙදීමෙන් වගුවේ ආගන්තුක යතුර ඉවත් කල හැකිය."},{"name":"delete_columns_and_tables","code":"mysql> DESCRIBE tbl_1;\r\n+-------+-------------+------+-----+---------+-------+\r\n| Field | Type        | Null | Key | Default | Extra |\r\n+-------+-------------+------+-----+---------+-------+\r\n| id    | int(5)      | NO   | PRI | NULL    |       |\r\n| name  | varchar(60) | NO   |     | NULL    |       |\r\n+-------+-------------+------+-----+---------+-------+\r\n2 rows in set (0.01 sec)\r\n\r\nmysql> ALTER TABLE tbl_1 DROP name;\r\nQuery OK, 0 rows affected (0.09 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0\r\n\r\nmysql> DESCRIBE tbl_1;\r\n+-------+--------+------+-----+---------+-------+\r\n| Field | Type   | Null | Key | Default | Extra |\r\n+-------+--------+------+-----+---------+-------+\r\n| id    | int(5) | NO   | PRI | NULL    |       |\r\n+-------+--------+------+-----+---------+-------+\r\n1 row in set (0.01 sec)\r\n\r\nmysql> DROP TABLE tbl_1;\r\nQuery OK, 0 rows affected (0.03 sec)","info":"වගුවක උපලැකියක් ඉවත් කිරීමට DROP කේතය භාවිත කල හැකිය. ඒ සමග ඉවත් කිරීමට අවශ්‍ය උපලැකියේ නම දැක්විය යුතුය. නිදසුනේ DESCRIBE කේතය මගින් එහි වෙනස සිදු වන ආකාරය දක්වා ඇත.\r\n\r\nඑමෙන්ම වගුව සම්පූර්ණයෙන් ඉවත් කිරීම නිදසුනේ අවසානයේ සිදු කර ඇත ඒ සඳහා DROP TABLE සමග වගවේ නම දැක්විය යුතුය.\r\n\r\n"},{"name":"show_databases","code":"mysql SHOW DATABASES;\r\n+--------------------+\r\n Database           \r\n+--------------------+\r\n information_schema \r\n dbs_1              \r\n dbs_2              \r\n mysql              \r\n performance_schema \r\n test               \r\n+--------------------+\r\n6 rows in set (0.00 sec)","info":"SHOW DATABASES මගින් SQL තුල නිර්මාණය කර ඇති සියලුම දත්ත දමුදාය වල ලැයිස්තුව මෙසේ ලබා ගත හැකිය."},{"name":"insert_records","code":"mysql> INSERT INTO tbl_1(id,name) VALUES (1,'Deshan Nawanjana');\r\nQuery OK, 1 row affected (0.38 sec)\r\n\r\nmysql> INSERT INTO tbl_1(id,name) VALUES (2,'John Luke');\r\nQuery OK, 1 row affected (1.16 sec)\r\n\r\nmysql> INSERT INTO tbl_1 SET id=3, name='Kamal Perera';\r\nQuery OK, 1 row affected (0.41 sec)","info":"වගුවකට දත්ත ඇතුලත් කිරීමේදී INSERT INTO විධානය භාවිතා කෙරේත මෙහිදී ආකාර දෙකක් ඇති අතර නිදසුනේ පළමුවෙන් දක්වා ඇති විධාන දෙකම පළමු ක්‍රමයෙන් දත්ත ගබඩා කල අවස්තා වේ. ඒ අනුව INSERT INTO කේතයට පසුව වගුවේ නම සම වරහනක් තුල රෙකෝඩ පිලිවෙලින් සහ පසුව VALUES සමග තවත් වරහනක් යොදා එය තුල කොමා සහිතව දත්ත පිලිවෙලින් දැක්වීම සිදු කරයි.\r\n\r\n<br><br>\r\n\r\nදෙවන ආකාරය වන්නේ SET විධානය භාවිතයයි. SET විධානයට පසුව අවශ්‍ය උපලැකි පමණක් නම සහ = ලකුණ යොදා එයට ගබඩා කල යුතු අගයද සහිතව කොමා මගින් වෙන් කරමින් දක්වනු ලැබේ.\r\n\r\n"},{"name":"show_table","code":"mysql> SELECT * FROM tbl_1;\r\n+----+------------------+\r\n| id | name             |\r\n+----+------------------+\r\n|  1 | Deshan Nawanjana |\r\n|  2 | John Luke        |\r\n|  3 | Kamal Perera     |\r\n+----+------------------+\r\n3 rows in set (0.00 sec)\r\n\r\nmysql> SELECT name FROM tbl_1;\r\n+------------------+\r\n| name             |\r\n+------------------+\r\n| Deshan Nawanjana |\r\n| John Luke        |\r\n| Kamal Perera     |\r\n+------------------+\r\n3 rows in set (0.00 sec)","info":"වගුවක් දත්ත ප්‍රතිදානය කිරීම මෙහිදී සලකා බැලේ. මේ සඳහා SELECT විධානය භාවිත කෙරේ. SELECT සමග * ලකුණ (තරු ලකුණට All අර්ථය පවතී) යෙදීමෙන් FROM විධානය සමග අදාල වගුව ලබා දීමෙන් එම වගුවේ සියලුම උපලැකි සමග සම්පූර්ණ වගුවම දර්ශනය වීම සිදු වේ.\r\n\r\n<br><br>\r\n\r\nඑමෙන්ම * ලකුණ වෙනුවට අවශ්‍ය උපලැකි කොමා සමග ලබා දීමෙන් එම උපලැකි වල දත්ත පමණක්ද දර්ශනය කිරීමේ හැකියාව ඇත.\r\n\r\n\r\n\r\n"},{"name":"filter_records_(single_condition)","code":"mysql> SELECT * FROM tbl_1;\r\n+----+------------------+------+\r\n| id | name             | age  |\r\n+----+------------------+------+\r\n|  1 | Deshan Nawanjana |   23 |\r\n|  2 | John Luke        |   20 |\r\n|  3 | Kamal Perera     |   23 |\r\n+----+------------------+------+\r\n3 rows in set (0.01 sec)\r\n\r\nmysql> SELECT * FROM tbl_1 WHERE age=23;\r\n+----+------------------+------+\r\n| id | name             | age  |\r\n+----+------------------+------+\r\n|  1 | Deshan Nawanjana |   23 |\r\n|  3 | Kamal Perera     |   23 |\r\n+----+------------------+------+\r\n2 rows in set (0.00 sec)\r\n\r\nmysql> SELECT name FROM tbl_1 WHERE age=23;\r\n+------------------+\r\n| name             |\r\n+------------------+\r\n| Deshan Nawanjana |\r\n| Kamal Perera     |\r\n+------------------+\r\n2 rows in set (0.00 sec)\r\n\r\nmysql> SELECT name FROM tbl_1 WHERE age<23;\r\n+-----------+\r\n| name      |\r\n+-----------+\r\n| John Luke |\r\n+-----------+\r\n1 row in set (0.00 sec)","info":"වගුවක කිසියම් රෙකෝඩ කිහිපයක් යම් තත්ත්ව යටතේ තෝරා ගැනීම සිදු කරන ආකාරය මෙහිදී දැක්වේ. ඒ සඳහා SELECT විධානය සමග WHERE විධානය භාවිත කෙරේ. SELECT * FROM tbl_1 මගින් නිදසුනේ මුලින්ම සියලු උපලැකියාන සහ උපලැකි සහිතව දක්වා ඇත. පසුව ලියා ඇති කේතයේ WHERE age=23 ලෙස දක්වා ඇත. මේ නිසා අදාල වගුවේ age උපලැකිය 23ට සමාන වන රෙකෝඩවල ලියලුම උපලැකියාන දර්ශනය වීම සිදු වේ. නමුත් තුන් වන පියවරේදී SELECT name ලෙස දක්වා ඇති නිසා දර්ශනය වන්නේ තෝරාගත් රෙකෝඩවල name යන උපලැකිය පමණි. එමෙන්ම මෙම සැසඳීම් සඳහා සමාන වීම (=) මෙන්ම කුඩා වීම (&lt;) සහ විශාල වීම (&gt;) වැනි අසමානතාද භෘවිත කල හැකිය. එය හතරවන කොටසේ ඇතුලත්ය.\r\n\r\n"},{"name":"filter_records_(multi_conditions)","code":"mysql> SELECT * FROM tbl_1;\r\n+----+------------------+------+-------+\r\n| id | name             | age  | marks |\r\n+----+------------------+------+-------+\r\n|  1 | Deshan Nawanjana |   23 |    78 |\r\n|  2 | John Luke        |   20 |    82 |\r\n|  3 | Kamal Perera     |   23 |    65 |\r\n+----+------------------+------+-------+\r\n3 rows in set (0.00 sec)\r\n\r\nmysql> SELECT * FROM tbl_1 WHERE age=23 AND marks>70;\r\n+----+------------------+------+-------+\r\n| id | name             | age  | marks |\r\n+----+------------------+------+-------+\r\n|  1 | Deshan Nawanjana |   23 |    78 |\r\n+----+------------------+------+-------+\r\n1 row in set (0.00 sec)\r\n\r\nmysql> SELECT * FROM tbl_1 WHERE age=23 OR marks>70;\r\n+----+------------------+------+-------+\r\n| id | name             | age  | marks |\r\n+----+------------------+------+-------+\r\n|  1 | Deshan Nawanjana |   23 |    78 |\r\n|  2 | John Luke        |   20 |    82 |\r\n|  3 | Kamal Perera     |   23 |    65 |\r\n+----+------------------+------+-------+\r\n3 rows in set (0.02 sec)","info":"සැසඳීම් කිහිපයක් මගින් වුගවකින් දත්ත වෙන් කර ගැනීම මෙම කොටසේ විස්තර කෙරේ. ඒ සඳහා AND සහ OR විධාන භාවිත කෙරේ. පෙර නිදසුනේ පරිදිම කේතය ලියවෙන අතර අගය AND හෝ OR මගින් තවත් සැසඳීමක් කළ හැකිය. AND මගින් අදාළ සැසඳීම් දෙකම සත්‍ය වන දත්ත පමණක් ප්‍රතිදානය වන අතර OR කේතය මගින් සැසඳීම් දෙකෙන් එකක් හෝ සත්‍ය නම් එම රෙකෝඩය ප්‍රතිදානය වීම සිදු වේ.\r\n\r\n\r\n"},{"name":"update_records","code":"mysql> SELECT * FROM tbl_1;\r\n+----+------------------+------+-------+\r\n| id | name             | age  | marks |\r\n+----+------------------+------+-------+\r\n|  1 | Deshan Nawanjana |   23 |    78 |\r\n|  2 | John Luke        |   20 |    82 |\r\n|  3 | Kamal Perera     |   23 |    65 |\r\n+----+------------------+------+-------+\r\n3 rows in set (0.00 sec)\r\n\r\nmysql> UPDATE tbl_1 SET age=24 WHERE id=1;\r\nQuery OK, 1 row affected (0.03 sec)\r\nRows matched: 1  Changed: 1  Warnings: 0\r\n\r\nmysql> SELECT * FROM tbl_1;\r\n+----+------------------+------+-------+\r\n| id | name             | age  | marks |\r\n+----+------------------+------+-------+\r\n|  1 | Deshan Nawanjana |   24 |    78 |\r\n|  2 | John Luke        |   20 |    82 |\r\n|  3 | Kamal Perera     |   23 |    65 |\r\n+----+------------------+------+-------+\r\n3 rows in set (0.00 sec)","info":"යම් තෝරාගැනීමක් යටතේ දත්ත යාවත්කාලීන කිරීම මෙහිදී දක්වා ඇත. මේ සඳහා UPDATE විධානය භාවිතා කරන අතර එම කේත සමග වගුවේ නමද, SET විධානයට පසුව යාවත්කාලීන විය යුත්තේ කුමන අගයන් සමගද යන්න අදාල උපලැකි නම් සමග = ලකුණින්ද යොදා WHERE විධානය මගින් යාවත්කාලීන විය යුතු රෙකෝඩ තෝරොගැනීමද දැක්වේ. නිදසුනෙ පරිදි පෙර Deshan Nawanjana යන පුද්ගලයාගේ වයස 23ක් වන අතර කේතයේ පරිදි id අගය 1 වන පුද්ගලයාගේ age දත්තය 24 වීමට ලියා ඇති නිසා අවසානයේ වගුවේ දත්ත ඇති ආකාරය සැලකීමේදී එය වෙනස් වී ඇති ආකාරය දැකිය හැකිය. එමෙන්ම පෙර ලෙසම මේ සඳහා තේරීම් කිහිපයක් AND සහ OR විධානය මගින් ලබා දිය හැකිය.\r\n"},{"name":"delete_records","code":"mysql> SELECT * FROM tbl_1;\r\n+----+------------------+------+-------+\r\n| id | name             | age  | marks |\r\n+----+------------------+------+-------+\r\n|  1 | Deshan Nawanjana |   24 |    78 |\r\n|  2 | John Luke        |   20 |    82 |\r\n|  3 | Kamal Perera     |   23 |    65 |\r\n+----+------------------+------+-------+\r\n3 rows in set (0.00 sec)\r\n\r\nmysql> DELETE FROM tbl_1 WHERE id=2;\r\nQuery OK, 1 row affected (0.05 sec)\r\n\r\nmysql> SELECT * FROM tbl_1;\r\n+----+------------------+------+-------+\r\n| id | name             | age  | marks |\r\n+----+------------------+------+-------+\r\n|  1 | Deshan Nawanjana |   24 |    78 |\r\n|  3 | Kamal Perera     |   23 |    65 |\r\n+----+------------------+------+-------+\r\n2 rows in set (0.00 sec)\r\n\r\nmysql> DELETE FROM tbl_1;\r\nQuery OK, 2 rows affected (0.03 sec)\r\n\r\nmysql> SELECT * FROM tbl_1;\r\nEmpty set (0.00 sec)","info":"මෙහිදී වගුවක උපලැකියාන ඉවත් කරන අයුරු දක්වා ඇත. මේ සඳහා DELETE FROM විධානය භාවිතා කෙරේ. DELETE FROM සමග වගුවේ නමද පසුව WHERE කේතය සමග අදාල සැසඳීමද කල යුතුය. එම සුසඳීම සත්‍ය වන සියලු රෙකෝඩ මෙහිදී මැකී යයි. නිදසුනේ පරිදි id=2 ලෙස දක්වා ඇති නිසා මැකී යන්නේ id හි අගය 2 වන රෙකෝඩය පමණි. නමුත් WHERE යෙදීමකින් තොරව කේතය ක්‍රියාත්මක වීමේදී නිදසුනේ අවසාන කොටසේ පරිදි සියලුම රෙකෝඩ මැකී යාම සිදු වේ."}],"CSS":[{"name":"introduction","code":"<html>\r\n<head>\r\n<title>Web Title</title>\r\n<style>\r\n.myClassName {\r\n\tcolor:red;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<span class=\"myClassName\">CSS TEXT</span>\r\n</body>\r\n</html>","info":"HTMLවලින් ලියන ලද වෙබ් අඩවියක හැඩගැන්වීම සහ පරිශීලකට වැඩි ආකර්ශනයක් ඇති කිරීම සඳහා CSS භාෂාව භාවිතා කරයි. මෙම CSS කේත &lt;style&gt;...&lt;/style&gt; කේත තුල ලිවීම සිදු වේ. මෙම කේත ඛණ්ඩ &lt;head&gt;...&lt;/head&gt; තුලින් ඇතුලත් කරනුයේ වෙබ් අඩවිය පූරණය වීමට පෙර අදාළ CSS ගුණාංග පූර්ණය වීම සඳහාය.\r\n\r\nමේ ආකාරයෙන් CSS ගුණාංග පැවරීම සිදු කරනුයේ හඳුන්වන ලද ඉසුලුම් නාමයකට (Tag Name), පන්ති නාමයකට (Class Name) එකකට වේ. ඉහත කිදසුනේ පරිදි myClassName නමින් සැකසූ පන්තියක අක්ෂර වර්ණය රතු වන ලෙස ගුණාංග ලබා දී ඇත. මේ නිසා පන්තිය myClassName වූ සියලුම උසුලනවල අක්ෂර වර්ණ රතු පැහැය ගනී.\r\n\r\nසෑම විටම CSS කේත ඛණ්ඩයක් සඟල වරහන් සහිතව දක්වනු ලැබේ. එම සඟල වරහනක් තුල ලියූ සියලුම ගුණාංග ඊට අදාළ ඉසුලුමට හෝ පන්තියට ලැබේ. එමෙන්ම සෑම ගුණාංගයකටම ඕට අදාළ අගයන් පවතී. එම අගය ගුණාංග නාමයට colon : යොදා ඊට ඉදිරියෙන් දෙනු ලැබේ.\r\n\r\nCSS කේතනය කිරීම සඳහා HTML පිළිබඳ පෙර දැනුමක් අවශ්‍ය වේ. ඒ සඳහා HTML පිලිබඳ ලියූ සරළ කේත මාලාවද ඔබට ලබා ගත හැක.\r\n\r\n<br><br>\r\n\r\nඉදිරි නිදසුන්වලදී පහසුව සඳහා &lt;style&gt;...&lt;/style&gt; උසුලනය පමණක් සහ අවශ්‍ය නම් පමණක් ඊට අදාළ එහි නම් කර ඇති උසුලන දක්වනු ලැබේ. \r\n\r\nCSS කේත මේ ආකාරයෙන් HTML ගොනුව තුල &lt;style&gt;...&lt;/style&gt; උසුලනයක් තුල හෝ අදාළ උසුලනයේම  &lt;font style=\"color:red;\"&gt;Text &lt;/font&gt; ආකාරයෙන් දැක්විය හැකිය. එමෙන්ම වැඩි භාවිතයක් සහ කාර්යක්ෂමතාව සඳහා මෙම CSS කේත .css ලෙස සෑදූ ගොනුවක තැම්පත් කෙරේ. පසුව එම ගොනුව HTML ගොනුවට සම්බන්ධ කරනුයේ &lt;link href=\"fileName.css\" rel=\"stylesheet\" /&gt; ලෙස &lt;head&gt;...&lt;/head&gt; උසුලන තුල දැක්වූ කේතයකිනි.\r\n\r\n<br><br>\r\n\r\nCSS යනු සරළ හැඩගැන්වීමේ සිට ඉතා සංකීර්ණ සහ අනර්ඝ ලෙස පරිශීලක ආකර්ශනය දිනාගත හැකි අයුරින් වෙබ් අඩවි සංස්කරණය කළ හැකි භාෂාවකි.\r\n\r\n"},{"name":"selectors","code":"<style>\r\n* {...}\r\n\r\np {...}\r\nspan, ol {...}\r\nul > li {...}\r\n\r\n.class_1 {...}\r\n.class_2 {...}\r\n.class_3 {...}\r\ndiv.class_3 {...}\r\n\r\n#id_1 {...}\r\ndiv#id_1 {...}\r\n</style>\r\n\r\n\r\n<p>Pharagraph Text 1</p>\r\n<p>Pharagraph Text 2</p>\r\n\r\n<span class=\"class_1\">Span Text 1</span>\r\n<span class=\"class_2\">Span Text 2</span>\r\n<span class=\"class_1 class_2 class_3\">Span Text 3</span>\r\n\r\n<div id=\"id_1\">Div Text 1</div>\r\n<div id=\"id_2\" class=\"class_3\">Div Text 2</div>\r\n\r\n<ol>\r\n<li>List Item 1\r\n<li>List Item 2\r\n</ol>\r\n\r\n<ul>\r\n<li>List Item 1\r\n<li>List Item 2\r\n</ul>","info":"ගුණාංග පවරා දෙන ආකාර පිළිබඳ මෙම කොටසේදී විස්තර කෙරේ. * {...} ලෙස තරු ලකුණක් යෙදීමෙන් එය තුල ලියූ සියලු ගුණාංග HTML ගොනුවේ ඇති සෑම උසුලනයකටම අදාල වේ. p {...} ලෙස දක්වා ඇත්තේ Paragraph Tag සඳහා පමණක් අදාළ ගුණෘංග පැවරෙන් පවයි. එවිට එම ගුණාංග HTML ගොනුවේ සෑම &lt;p&gt; සඳහාම අදාල වේ. එමෙන්ම මෙහි දක්වා ඇති ලෙස span, ol {...} ආකාරයට උසුලන නාම කිහිපයකට වුවත් එකවර පැවරිය හැකිය. ul > li {...} මගින් දැක්වෙන්නේ &lt;ul&gt; උසුලන තුල ඇති &lt;li&gt; උසුලන සඳහා පමණක් අදාළ ගුණෘංග බලපාන බවයි. එමෙන්ම class සහ id යන Attributes භාවිතයෙන්ද CSS ගුණාංග ගැවරිය හැකිය. class සඳහා එම නමට මුලින් තිතක් (.) ද id සඳහා හෑෂ් (#) ලකුණද යොදනු ලැබේ. එමෙන්ම අදාළ උසුලනයේ class එකක් නොව &lt;span class=\"class_1 class_2 class_3\"&gt; ලෙස පන්ති කිහිපයක් ලබා දිය හැකිය. එවිට සියලු පන්තිවල CSS ගුණාංග එම උසුලනයට ලැබේ.\r\n\r\ndiv.class_3 {...} මගින් අදහස් වනුයේ class_3 පන්තියට අදාල &lt;div&gt; උසුලනවලට පමණක් අදාළ ගුණාංග පැවරෙන බවයි.\r\n\r\n"},{"name":"colors","code":".class_1 {\r\n\tbackground:black;\r\n\tcolor:red;\r\n}\r\n\r\n.class_2 {\r\n\tbackground:rgb(0,0,0);\r\n\tcolor:rgb(255,0,0);\r\n}\r\n\r\n.class_3 {\r\n\tbackground:#000000;\r\n\tcolor:#FF0000;\r\n}\r\n\r\n.class_4 {\r\n\tbackground:rgba(0,0,0,0.7);\r\n\tcolor:rgba(255,0,0,0.5);\r\n}","info":"CSS භාෂාව තුළ වරණවල වැඩි භාවිතයක් පවතී. ඒ සඳහා වර්ණ නිරූපණය කරන ප්‍රධාන ආකාර කිහිපයක් මෙම නිදසුනේ දැක්වෙයි. \r\n\r\nclass_1 ගුණාංග අනුව වර්ණ ලබා දී ඇත්තේ ඒවායේ නාමයෙනි. මේ ආකාරයට නාම ලබා දිය හැකි ප්‍රමාණය සීමා වන නිසා මෙම ක්‍රමයේ වැඩි භාවිතයක් නොමැත. red, green, blue, gold, gray, brown, yellow... ආදි වශයෙන් වර්ණ නාමයක් ලබා දිය හැක.\r\n\r\nclass_2 හි දැක්වෙන පරිදි RGB ආකාරයටද වර්ණ ලබා දිය හැක. එහි ඇති (0, 0, 0) අගයන් 0 හා 255 අතර වෙනස් කරමින් රතු, කොල, නිල් සංකලනය දැක්විය හැක. මේ නිසා වර්ණ පරාසය සැළකීමේදී ඕනෑම ආකාරයක වර්ණයක් නිරූපණය කිරීමේ හැකියාව මෙම ක්‍රමයට පවතී.\r\n\r\nclass_3 තුල වර්ණ ලබා දී ඇත්තේ ෂඩ්දශමය ආකාරයටය. ඒ සඳහා වර්ණය මුලට # ලකුණ යෙදිය යුතු අතර class_2 වල දැක්වූ RGB අගයන් තුන 16 පාදයට පරිවර්ථනය කර Digits දෙක බැගින් ගෙන Digits 6කින් මෙම වර්ණ හැඳන්වීම කර ඇත.\r\n\r\nclass_4 හි ඇති rgba ආකාරය නිසා අපට අවශ්‍ය ඕනෑම වර්ණ සංකලනයක් පමණක් නොව එම වර්ණයේ Opacity එක වුවද සැකසිය හැකිය. (255, 0, 0, 0.5) දී වර්ණයේ 0.5 න් දැක්වෙනුයේ එම Opacity එකයි. එම අගය 0 - 1 පරාසය තුළ වෙනස් කළ හැකිය. 1 යනු 100% Opacity නෙහොත් විනිවිධභාවයක් නොමැති වීමයි. මෙම අගය 0 වූ විට වර්ණය සම්පූර්ණ විනිවිද බවට පත්වේ. වැඩි භාවිතයක් ඇති වර්ණ කිහිපයක් පහත පරිදි වේ.\r\n\r\n<table border=\"1\">\r\n\r\n<tr>\r\n<td width=\"80\">White</td><td>#FFFFFF</td>\r\n<td width=\"80\">Red</td><td>#FF0000</td>\r\n<td>Lvory</td><td>#FFFFF0</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>Silver</td><td>#E6E8FA</td>\r\n<td>Green</td><td>#00FF00</td>\r\n<td>Orange</td><td>#FF7F00</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>Blue</td><td>#0000FF</td>\r\n<td>Gold</td><td>#CD7F32</td>\r\n<td>Black</td><td>#000000</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>Magenta</td><td>#FF00FF</td>\r\n<td>Gray</td><td>#808080</td>\r\n<td>Purple</td><td>#871F78</td>\r\n</tr>\r\n</table>\r\n\r\nPaint හෝ Adobe Photoshop වැනි මෘදුකාංග හරහා මාවැනි වර්ණ කේත අවශ්‍ය පරිදි පහසුවෙන් ලබා ගත හැක.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"name":"basic_box","code":".box_all {\r\n\twidth:100px;\r\n\theight:300px;\r\n\tmargin:0px 2px 34px 12px;\r\n\tpadding:10px 20px 0px 40px;\r\n}\r\n\r\n.box_size {\r\n\twidth:80%;\r\n\theight:100%;\r\n}\r\n\r\n.box_margin {\r\n\tmargin-left:10px;\r\n\tmargin-right:20px;\r\n\tmargin-top:45px;\r\n\tmargin-bottom:10px;\r\n}\r\n\r\n.box_padding {\r\n\tpadding-left:10px;\r\n\tpadding-right:20px;\r\n\tpadding-top:45px;\r\n\tpadding-bottom:10px;\r\n}","info":"උසුලනයක ප්‍රමාණය සැකසීම සහ වටේ ඉඩ සැකසීම පිලිබඳ මෙහි විස්තර කර ඇත. width හා height මගින් අපට අවශ්‍ය පරිදි පළල සහ උස පික්සල් මගින් ලබා දීමෙන් උසුලනයේ විශාලත්වය සකස් කළ හැක. එමෙන්ම box_size පන්තියේ දැක්වෙන පරිදි එය වෙබ් පිරික්සුවේ විශාලත්වයෙන් ප්‍රතිශතයක් වශයෙන්ද ලබා දිය හැක.\r\n\r\n<br><br>\r\n\r\nmargin හි ලබා දී ඇති අගයන් 4 පිළිවෙළින් සැළකූ විට ඉහළ, දකුණු පස, පහළ සහ වම් පස උසුලනයට එළියෙන් ඉඩ තැබිය යුතු ප්‍රමාණ ලබා දී ඇත. ඒවා margin-left, margin-right වශයෙන් වෙන් වෙන්වද ලබා දිය හැකිය.\r\n\r\n<br><br>\r\n\r\npadding මගින් උසුලනය තුළ ඇති අන්තර්ගතය හා උසුලනයේ සීමාව දක්වා ඇතුලතින් තැබිය යුතු ඉඩ තීරණය වේ. එයද ඉහළ, දකුණු පස, පහළ සහ වම් පස ලෙස පිළිවෙලින් මෙන්ම padding-left, padding-right වශයෙන් වෙන් වෙන්වද ලබා දිය හැකිය.\r\n\r\n"},{"name":"background_and_border","code":".background_styles {\r\n\tbackground-color:red;\r\n\tbackground-image:url(image.jpg);\r\n\tbackground-position:center;\r\n\tbackground-repeat:no-repeat;\r\n\tbackground-size:200px 100px;\r\n}\r\n\r\n.border_styles_1 {\r\n\tborder-width:4px;\r\n\tborder-style:solid;\r\n\tborder-color:#FF00FF;\r\n}\r\n\r\n.border_styles_2 {\r\n\tborder-right-width:4px;\r\n\tborder-left-width:5px;\r\n\r\n\tborder-right-style:dotted;\r\n\tborder-left-style:solid;\r\n\r\n\tborder-top-color:#00FFFF;\r\n\tborder-right-color:#FF00FF;\r\n}","info":"උසුලනයක පසුබිම සහ දාරය හැඩගැන්වීම මෙම කොටසේදී විස්තර කෙරේ. background_styles යන පන්තිය තුළ ඇති ගුණාංග සළකන්න. background-color මගින් පසුබිම් වර්ණය වර්ණ කේත ඇසුරෙන් ලබා දිය හැකිය. background-image මගින් ඡායාරූපයක් පසුබිමට ලබා දිය හැකි අතර එහි නම පමණක් image.jpg ලෙස දක්වා ඇත්තේ එම ඡායාරූපය CSS ගොනුව ඇති ෆෝල්ඩරය තුලම ඇතැයි සළකාය. එසේ නැති නම් මුලු ලිපිනයම එතැනට ලබා දිය යුතුය. background-position මගින් පසුබිම් ඡායාරූපය කුමන පසින් දිස් විය යුතුද යන්න දැක්විය හැකිය. එයට ප්‍රධාන වශයෙන් ලබා දිය හැකි අගයන් center, left, right, top, bottom වේ. background-size මගින් පසුබිම් ඡායාරූපය සඳහා උස සහ පළල ලබා දිය හැකි අතර පසුබිම් ඡායාරූපය පුනරාවර්තනය විය යුතු ආකාරය පහත පරිදි අගයන් ලබා දීමෙන් වෙනස් කළ හැකිය.\r\n\r\n<table border=\"1\">\r\n<tr><td>no-repeat</td><td>පුනරාවර්තනය නොවේ</td></tr>\r\n<tr><td>repeat</td><td>දෙපසටම පුනරාවර්තනය වීම සිදු වේ</td></tr>\r\n<tr><td>repeat-x</td><td>තිරස් අතට පමණක් පුනරාවර්තනය වීම සිදු වේ</td></tr>\r\n<tr><td>repeat-y</td><td>සිරස් අතට පමණක් පුනරාවර්තනය වීම සිදු වේ</td></tr>\r\n</table>\r\n\r\nborder_styles_1 හි දැක්වෙන ආකාරයට border-width මගින් දාරයේ ඝනකමද, border-color මගින් දාරයේ වර්ණයද ලබා දිය හැකි අතර border-style මගින් දාරයේ ස්වභාවය ලබා දිය හැකිය. ඒ සඳහා දිය හැකි අගයන් කහිපයක් පහත පරිදි වේ.\r\n\r\n<br><br><br><br><br>\r\n\r\n<table border=\"1\">\r\n<tr><td>none</td><td>දාරයක් නොදැක්වේ</td></tr>\r\n<tr><td>dotted</td><td>තිත් ආකාරයට දාරය දැක්වේ</td></tr>\r\n<tr><td>dashed</td><td>කෙටි ඉරි ආකාරයට දාරය දැක්වේ</td></tr>\r\n<tr><td>solid</td><td>තනි ඉරකින් දාරය දැක්වේ</td></tr>\r\n<tr><td>double</td><td>ඉරි දෙකකින් දාරය දැක්වේ</td></tr>\r\n</table>\r\n\r\nඑමෙන්ම border සඳහා ඇති ගුණාංග border_styles_2 පරිදි එක් පසකට පමණක් විශේෂ කර වුවද ලබා දිය හැකිය."},{"name":"text_and_font","code":".text_1 {\r\n\tline-height:20px;\r\n\ttext-align:center;\r\n\ttext-decoraion:underline;\r\n\ttext-shadow:2px 2px 3px rgba(0,0,0,0.5);\r\n}\r\n\r\n.font_1 {\r\n\tcolor:#FF0000;\r\n\tfont-family:Arial, Consolas;\r\n\tfont-size:25px;\r\n\tfont-style:italic;\r\n\tfont-weight:bold;\r\n}","info":"මෙම කොටසේදී Text සහ Font සඳහා සිදු කළ හැකි වෙනස්කම් විස්තර කෙරේ. line-height දැක්වෙනුයේ එක් වැකියක උස කොපමණ විය යුතුද යන්නයි. එය අපට අවශ්‍ය පික්සල් ප්‍රමාණයකින් ලබා දිය හැකිය. එවිට ඡේදයක් සැළකීමේදී එක් පේලියක් අප දෙන ලද උසකින් වෙන් වී දැක්වෙනු ඇත.\r\n\r\n<br><br>\r\n\r\ntext-align මගින් ඡේද එකෙල්ල විය යුත්තේ කුමණ ආකාරයටද යැයි දැක්විය හැකිය. එයට ලබා දිය හැකි ප්‍රධාන අගයන් පහත පරිදි වේ.\r\n\r\n<table border=\"1\">\r\n<tr><td>left</td><td>ඡේද වමට එකෙල්ල වේ.</td></tr>\r\n<tr><td>right</td><td>ඡේද දකුණට එකෙල්ල වේ.</td></tr>\r\n<tr><td>center</td><td>ඡේද මැදට එකෙල්ල වේ.</td></tr>\r\n<tr><td>justify</td><td>ඡේද දෙපසට එකෙල්ල වේ.</td></tr>\r\n</table>\r\n\r\n<br><br><br><br>\r\n\r\ntext-decoration මගින් ඡේදයක හෝ වැකියක ඉරක් යෙදිය යුත්තේ කුමණ ආකාරයටද යැයි දැක්විය හැකිය. එයට ලබා දිය හැකි ප්‍රධාන අගයන් පහත පරිදි වේ.\r\n\r\n<table border=\"1\">\r\n<tr><td>overline</td><td>වැකිය ඉහලින් ඉරක් යෙදීම</td></tr>\r\n<tr><td>line-through</td><td>වැකිය කැපී යන සේ මැදින් ඉරක් යෙදීම</td></tr>\r\n<tr><td>underline</td><td>වැකිය යටින් ඉරක් යෙදීම</td></tr>\r\n</table>\r\n\r\ntext-shadow මගින් වැකියක සෙවනැලි ඇති කළ හැකිය. නිදසුනේ පරිදි 2px 4px 6px rgba(0,0,0,0.5); ලෙස දැක්වෙනුයේ අකුරක සෙවනැලේල එම අකුරේ සිට 2px පහලට, 4px දකුණට වී දැක්වෙන බවයි. 6px මගින් දක්වා ඇත්තේ එම සෙවනැල්ල විහිදිය යුතු උපරිම පික්සල් ප්‍රමාණයයි. rgba(0,0,0,0.5) මගින් වර්ණය සහ එහි විනිවිද බවේ ප්‍රමාණය දිය හැකිය.\r\n\r\n<br><br>\r\n\r\nfont_1 මගින් දක්වා ඇතු ගුණාංග වැකියක font styles සමග සම්බන්ධ වන ගුණාංග වේ. color මගින් වර්ණය දැක්වෙන අතර ඉහත colors යන කොටසේ දැක්වූ වර්ණ මේ සඳහා භාවිත කළ හැක.\r\n\r\n<br><br>\r\n\r\nfont-family මගින් ඔබ පරිගණකයේ ස්ථාපනය කර ඇති Font නාම භාවිතා කරමින් හැඩගැන්විය හැකිය. මෙහි Arial සහ Consolas ලෙස font දෙකක් දී ඇත්තේ යම් හෙයකින් Arial යන Font එක පරිගණකයේ නැති නම් ඒ සඳහා Consolas Font එක භාවිතා වන්නටයි.\r\n\r\n<br><br>\r\n\r\nfont-size මගින් අකුරක විශාලත්ව දක්වන අතර එයට ඔබට අවශ්‍ය පික්සල් ප්‍රමාණයක් ලබා දිය හැකිය. font-style හා font-weight මගින් කළ හැකි වෙනස්කම් පහත පරිදි වේ.\r\n\r\n<table border=\"1\">\r\n<caption>font-style</caption>\r\n<tr><td width=\"100\">normal</td><td>සාමාන්‍ය ආකාරය</td></tr>\r\n<tr><td>italic</td><td>ඇල අකුරු ආකාරය</td></tr>\r\n<tr><td>oblique</td><td>ඇල සහ තරමක් ඝනකම් අක්ෂර ලෙස දැක්වේ</td></tr>\r\n</table>\r\n\r\n<table border=\"1\">\r\n<caption>font-weight</caption>\r\n<tr><td width=\"100\">normal</td><td>සාමාන්‍ය ඝනකම දැක්වේ</td></tr>\r\n<tr><td>bold</td><td>තරමක් ඝනකම් වී දැකිවේ</td></tr>\r\n<tr><td>300, 400</td><td>ඝනකම අවශ්‍ය ප්‍රමාණයකට ලබා දීම</td></tr>\r\n</table>"}]}